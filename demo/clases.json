[{"name":"AABB","functions":[{"type":[""],"definition":["driderSDK::AABB::AABB"],"argsstring":["()"],"name":["AABB"],"detaileddescription":[{"para":["TEST::defaultConstructor Default constructor "]}],"description":"TEST::defaultConstructor Default constructor  ","testName":"defaultConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"defaultConstructor","status":"run","time":"0","classname":"AABB"},"name":"defaultConstructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::AABB::AABB"],"argsstring":["(float width, float height, const Vector3D &C)"],"name":["AABB"],"detaileddescription":[{"para":["TEST::constructFromValues Initialize the constructor with the given values",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["s"]}],"parameterdescription":[{"para":[{"_":"Size of the ","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]},{"parameternamelist":[{"parametername":["C"]}],"parameterdescription":[{"para":["Center of the box given by a vector 3D "]}]}]}]}]}],"description":"TEST::constructFromValues Initialize the constructor with the given values [object Object] ","testName":"constructFromValues","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"constructFromValues","status":"run","time":"0","classname":"AABB"},"name":"constructFromValues"},"errorFlag":false},{"type":[""],"definition":["driderSDK::AABB::AABB"],"argsstring":["(AABB &&A)=default"],"name":["AABB"],"detaileddescription":[{"para":["TEST::moveConstructor Move constructor. "]}],"description":"TEST::moveConstructor Move constructor.  ","testName":"moveConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"moveConstructor","status":"run","time":"0","classname":"AABB"},"name":"moveConstructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::AABB::AABB"],"argsstring":["(const AABB &A)"],"name":["AABB"],"detaileddescription":[{"para":["TEST::constructFromAABB Copy constructor. "]}],"description":"TEST::constructFromAABB Copy constructor.  ","testName":"constructFromAABB","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"constructFromAABB","status":"run","time":"0","classname":"AABB"},"name":"constructFromAABB"},"errorFlag":false},{"type":[""],"definition":["driderSDK::AABB::~AABB"],"argsstring":["()"],"name":["~AABB"],"detaileddescription":[{"para":["TEST::destructor Default destructor "]}],"description":"TEST::destructor Default destructor  ","testName":"destructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"destructor","status":"run","time":"0","classname":"AABB"},"name":"destructor"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::AABB::intersect"],"argsstring":["(AABB &aabb)"],"name":["intersect"],"detaileddescription":[{"para":[{"_":"TEST::intersectAABB Checks for an intersection with another ","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]},{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["aabb"]}],"parameterdescription":[{"para":[{"_":"The other  to check","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if it intersects "]}]}]}],"description":"[object Object] [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::AABB::intersect"],"argsstring":["(Sphere &sphere)"],"name":["intersect"],"detaileddescription":[{"para":["TEST::intersectSphere Checks for an intersection with a sphere",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["sphere"]}],"parameterdescription":[{"para":["The sphere to check"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if it intersects "]}]}]}],"description":"TEST::intersectSphere Checks for an intersection with a sphere [object Object] ","testName":"intersectSphere","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::AABB::intersect"],"argsstring":["(Plane &plane)"],"name":["intersect"],"detaileddescription":[{"para":["TEST::intersectPlane Checks for an intersection with a plane",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["plane"]}],"parameterdescription":[{"para":["The plane to check"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if it intersects "]}]}]}],"description":"TEST::intersectPlane Checks for an intersection with a plane [object Object] ","testName":"intersectPlane","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"intersectPlane","status":"run","time":"0","classname":"AABB"},"name":"intersectPlane"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::AABB::intersect"],"argsstring":["(Frustrum &frustrum)"],"name":["intersect"],"detaileddescription":[{"para":["TEST::intersectFrustrum Checks for an intersection with a frustrum",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["frustrum"]}],"parameterdescription":[{"para":["The frustrum to check"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if it intersects "]}]}]}],"description":"TEST::intersectFrustrum Checks for an intersection with a frustrum [object Object] ","testName":"intersectFrustrum","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"intersectFrustrum","status":"run","time":"0","classname":"AABB"},"name":"intersectFrustrum"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::AABB::intersect"],"argsstring":["(Ray &ray)"],"name":["intersect"],"detaileddescription":[{"para":["TEST::intersectRay Checks for an intersection with a ray",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["ray"]}],"parameterdescription":[{"para":["The ray to check"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":"True if the ray intersects with the  ","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]}]}],"description":"TEST::intersectRay Checks for an intersection with a ray [object Object] ","testName":"intersectRay","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"intersectRay","status":"run","time":"0","classname":"AABB"},"name":"intersectRay"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::AABB::intersect"],"argsstring":["(Vector3D &point)"],"name":["intersect"],"detaileddescription":[{"para":[{"_":"TEST::intersectPoint Checks if the point is in the ","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]},{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["point"]}],"parameterdescription":[{"para":[{"_":" that represents the point","ref":[{"_":"Vector3D","$":{"refid":"classdrider_s_d_k_1_1_vector3_d","kindref":"compound"}}]}]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the point is inside "]}]}]}],"description":"[object Object] [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"Nombre del test: AABB","testClase":{"name":"AABB","tests":"11","failures":"0","disabled":"1","errors":"0","time":"0.006","testCases":[{"data":{"name":"defaultConstructor","status":"run","time":"0","classname":"AABB"},"name":"defaultConstructor"},{"data":{"name":"constructFromValues","status":"run","time":"0","classname":"AABB"},"name":"constructFromValues"},{"data":{"name":"moveConstructor","status":"run","time":"0","classname":"AABB"},"name":"moveConstructor"},{"data":{"name":"constructFromAABB","status":"run","time":"0","classname":"AABB"},"name":"constructFromAABB"},{"data":{"name":"destructor","status":"run","time":"0","classname":"AABB"},"name":"destructor"},{"data":{"name":"intersectAABB","status":"run","time":"0","classname":"AABB"},"name":"intersectAABB"},{"data":{"name":"intersectPoint","status":"run","time":"0","classname":"AABB"},"name":"intersectPoint"},{"data":{"name":"intersectPlane","status":"run","time":"0","classname":"AABB"},"name":"intersectPlane"},{"data":{"name":"intersectFrustrum","status":"run","time":"0","classname":"AABB"},"name":"intersectFrustrum"},{"data":{"name":"DISABLED_intersectSphere","status":"notrun","time":"0","classname":"AABB"},"name":"DISABLED_intersectSphere"},{"data":{"name":"intersectRay","status":"run","time":"0","classname":"AABB"},"name":"intersectRay"}]}},{"name":"Capsule","functions":[{"type":[""],"definition":["driderSDK::Capsule::Capsule"],"argsstring":["()"],"name":["Capsule"],"detaileddescription":[{"para":["TEST::capsuleConstructor Default constructor. "]}],"description":"TEST::capsuleConstructor Default constructor.  ","testName":"capsuleConstructor","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"capsuleConstructor","status":"run","time":"0.004","classname":"Capsule"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:17\r\nValue of: capsule.pointA == driderSDK::Vector3D(1.0f, 0.0f, 0.0f)\r\n  Actual: false\r\nExpected: true","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:17\nValue of: capsule.pointA == driderSDK::Vector3D(1.0f, 0.0f, 0.0f)\n  Actual: false\nExpected: true","type":""}},{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:19\r\nValue of: capsule.radius == 0.5f\r\n  Actual: false\r\nExpected: true","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:19\nValue of: capsule.radius == 0.5f\n  Actual: false\nExpected: true","type":""}}],"name":"capsuleConstructor"},"errorFlag":true},{"type":[""],"definition":["driderSDK::Capsule::Capsule"],"argsstring":["(const Vector3D &_pointA, const Vector3D &_pointB, float _radius)"],"name":["Capsule"],"detaileddescription":[{"para":["TEST::capsuleConstructor Default with two points an radius. "]}],"description":"TEST::capsuleConstructor Default with two points an radius.  ","testName":"capsuleConstructor","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"capsuleConstructor","status":"run","time":"0.004","classname":"Capsule"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:17\r\nValue of: capsule.pointA == driderSDK::Vector3D(1.0f, 0.0f, 0.0f)\r\n  Actual: false\r\nExpected: true","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:17\nValue of: capsule.pointA == driderSDK::Vector3D(1.0f, 0.0f, 0.0f)\n  Actual: false\nExpected: true","type":""}},{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:19\r\nValue of: capsule.radius == 0.5f\r\n  Actual: false\r\nExpected: true","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:19\nValue of: capsule.radius == 0.5f\n  Actual: false\nExpected: true","type":""}}],"name":"capsuleConstructor"},"errorFlag":true},{"type":[""],"definition":["driderSDK::Capsule::~Capsule"],"argsstring":["()"],"name":["~Capsule"],"detaileddescription":[{"para":["TEST::capsuleDestructor "]}],"description":"TEST::capsuleDestructor  ","testName":"capsuleDestructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"capsuleDestructor","status":"run","time":"0","classname":"Capsule"},"name":"capsuleDestructor"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Capsule::intersects"],"argsstring":["(const Plane &plane)"],"name":["intersects"],"detaileddescription":[{"para":["TEST::intersectPlane Checks if the capsule intersects with a plane.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["plane"]}],"parameterdescription":[{"para":["The plane to check."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Return true if the plane intertsects with sphare, otherwise return false. "]}]}]}],"description":"TEST::intersectPlane Checks if the capsule intersects with a plane. [object Object] ","testName":"intersectPlane","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"intersectPlane","status":"run","time":"0","classname":"Capsule"},"name":"intersectPlane"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Capsule::intersects"],"argsstring":["(const Sphere &sphere)"],"name":["intersects"],"detaileddescription":[{"para":["TEST::intersectSphere Checks if the capsule intersects with a plane.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["sphere"]}],"parameterdescription":[{"para":["The sphere to check."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Return true if the sphere intertsects with other sphere, otherwise return false. "]}]}]}],"description":"TEST::intersectSphere Checks if the capsule intersects with a plane. [object Object] ","testName":"intersectSphere","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"intersectSphere","status":"run","time":"0.003","classname":"Capsule"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:42\r\nValue of: capsule.intersects(sphere)\r\n  Actual: true\r\nExpected: false","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:42\nValue of: capsule.intersects(sphere)\n  Actual: true\nExpected: false","type":""}}],"name":"intersectSphere"},"errorFlag":true},{"type":["bool"],"definition":["bool driderSDK::Capsule::intersects"],"argsstring":["(const AABB &aabb)"],"name":["intersects"],"detaileddescription":[{"para":["TEST::intersectAabb Checks if the capsule intersects with a plane.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["aabb"]}],"parameterdescription":[{"para":["The aabb to check."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Return true if the sphare intertsects with aabb, otherwise return false. "]}]}]}],"description":"TEST::intersectAabb Checks if the capsule intersects with a plane. [object Object] ","testName":"intersectAabb","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"intersectAabb","status":"run","time":"0.001","classname":"Capsule"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:51\r\nValue of: capsule.intersects(aabb2)\r\n  Actual: true\r\nExpected: false","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:51\nValue of: capsule.intersects(aabb2)\n  Actual: true\nExpected: false","type":""}}],"name":"intersectAabb"},"errorFlag":true},{"type":["bool"],"definition":["bool driderSDK::Capsule::intersects"],"argsstring":["(const Capsule &capsule)"],"name":["intersects"],"detaileddescription":[{"para":["TEST::intersectCapsule Checks if the capsule intersects with a other.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["capsule"]}],"parameterdescription":[{"para":["The capsule to check."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Return true if the capsule intertsects with capsule, otherwise return false. "]}]}]}],"description":"TEST::intersectCapsule Checks if the capsule intersects with a other. [object Object] ","testName":"intersectCapsule","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"intersectCapsule","status":"run","time":"0","classname":"Capsule"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:62\r\nValue of: capsule1.intersects(capsule2)\r\n  Actual: true\r\nExpected: false","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:62\nValue of: capsule1.intersects(capsule2)\n  Actual: true\nExpected: false","type":""}}],"name":"intersectCapsule"},"errorFlag":true},{"type":["bool"],"definition":["bool driderSDK::Capsule::intersects"],"argsstring":["(const Frustrum &frustrum)"],"name":["intersects"],"detaileddescription":[{"para":["TEST::intersectFrustrum Checks if the capsule intersects with a frustrum.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["frustrum"]}],"parameterdescription":[{"para":["The frustrum to check."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Return true if the capsule intertsects with frustrum, otherwise return false. "]}]}]}],"description":"TEST::intersectFrustrum Checks if the capsule intersects with a frustrum. [object Object] ","testName":"intersectFrustrum","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"intersectFrustrum","status":"run","time":"0","classname":"Capsule"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:67\r\nValue of: true\r\n  Actual: true\r\nExpected: false","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:67\nValue of: true\n  Actual: true\nExpected: false","type":""}}],"name":"intersectFrustrum"},"errorFlag":true}],"testFile":"Nombre del test: Capsule","testClase":{"name":"Capsule","tests":"7","failures":"5","disabled":"0","errors":"0","time":"0.023","testCases":[{"data":{"name":"capsuleConstructor","status":"run","time":"0.004","classname":"Capsule"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:17\r\nValue of: capsule.pointA == driderSDK::Vector3D(1.0f, 0.0f, 0.0f)\r\n  Actual: false\r\nExpected: true","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:17\nValue of: capsule.pointA == driderSDK::Vector3D(1.0f, 0.0f, 0.0f)\n  Actual: false\nExpected: true","type":""}},{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:19\r\nValue of: capsule.radius == 0.5f\r\n  Actual: false\r\nExpected: true","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:19\nValue of: capsule.radius == 0.5f\n  Actual: false\nExpected: true","type":""}}],"name":"capsuleConstructor"},{"data":{"name":"capsuleDestructor","status":"run","time":"0","classname":"Capsule"},"name":"capsuleDestructor"},{"data":{"name":"intersectPlane","status":"run","time":"0","classname":"Capsule"},"name":"intersectPlane"},{"data":{"name":"intersectSphere","status":"run","time":"0.003","classname":"Capsule"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:42\r\nValue of: capsule.intersects(sphere)\r\n  Actual: true\r\nExpected: false","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:42\nValue of: capsule.intersects(sphere)\n  Actual: true\nExpected: false","type":""}}],"name":"intersectSphere"},{"data":{"name":"intersectAabb","status":"run","time":"0.001","classname":"Capsule"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:51\r\nValue of: capsule.intersects(aabb2)\r\n  Actual: true\r\nExpected: false","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:51\nValue of: capsule.intersects(aabb2)\n  Actual: true\nExpected: false","type":""}}],"name":"intersectAabb"},{"data":{"name":"intersectCapsule","status":"run","time":"0","classname":"Capsule"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:62\r\nValue of: capsule1.intersects(capsule2)\r\n  Actual: true\r\nExpected: false","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:62\nValue of: capsule1.intersects(capsule2)\n  Actual: true\nExpected: false","type":""}}],"name":"intersectCapsule"},{"data":{"name":"intersectFrustrum","status":"run","time":"0","classname":"Capsule"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:67\r\nValue of: true\r\n  Actual: true\r\nExpected: false","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_capsule.cpp:67\nValue of: true\n  Actual: true\nExpected: false","type":""}}],"name":"intersectFrustrum"}]}},{"name":"Codec","functions":[{"type":["ResourceType::E"],"definition":["ResourceType::E driderSDK::Codec::decode"],"argsstring":["(std::string pathName)"],"name":["decode"],"detaileddescription":[{"para":["TEST::codecDecode Decodes and load a resource.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["pathName"]}],"parameterdescription":[{"para":["Path of the file (include extension)."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["The type of the resource ResourceType::E. "]}]}]}],"description":"TEST::codecDecode Decodes and load a resource. [object Object] ","testName":"codecDecode","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":"std::shared_ptr<  >","ref":[{"_":"Resource","$":{"refid":"classdrider_s_d_k_1_1_resource","kindref":"compound"}}]}],"definition":["std::shared_ptr< Resource > driderSDK::Codec::encode"],"argsstring":["(std::string pathName)"],"name":["encode"],"detaileddescription":[{"para":["TEST::codecEncode Encode and save a resource.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["pathName"]}],"parameterdescription":[{"para":["Path of the file (include extension)."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":"Shared_ptr to a . ","ref":[{"_":"Resource","$":{"refid":"classdrider_s_d_k_1_1_resource","kindref":"compound"}}]}]}]}]}],"description":"TEST::codecEncode Encode and save a resource. [object Object] ","testName":"codecEncode","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"No existe Test con el nombre de la clase"},{"name":"Degree","functions":[{"type":[""],"definition":["driderSDK::Degree::Degree"],"argsstring":["()"],"name":["Degree"],"detaileddescription":[{"para":["TEST::defaultConstructor","Default constructor. "]}],"description":"TEST::defaultConstructor Default constructor.  ","testName":"defaultConstructor","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"defaultConstructor","status":"run","time":"0.001","classname":"Degree"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_degree.cpp:8\r\nValue of: testDegree\r\n  Actual: true\r\nExpected: false","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_degree.cpp:8\nValue of: testDegree\n  Actual: true\nExpected: false","type":""}}],"name":"defaultConstructor"},"errorFlag":true},{"type":[""],"definition":["driderSDK::Degree::Degree"],"argsstring":["(Degree &&V)=default"],"name":["Degree"],"detaileddescription":[{"para":["TEST::moveConstructor","Move constructor. "]}],"description":"TEST::moveConstructor Move constructor.  ","testName":"moveConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"moveConstructor","status":"run","time":"0","classname":"Degree"},"name":"moveConstructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Degree::Degree"],"argsstring":["(const Degree &V)"],"name":["Degree"],"detaileddescription":[{"para":["TEST::copyConstructor","Copy constructor. "]}],"description":"TEST::copyConstructor Copy constructor.  ","testName":"copyConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"copyConstructor","status":"run","time":"0","classname":"Degree"},"name":"copyConstructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Degree::Degree"],"argsstring":["(float value)"],"name":["Degree"],"detaileddescription":[{"para":["TEST::floatConstructor","Initialize class with value.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["value"]}],"parameterdescription":[{"para":["Initial value of the class. "]}]}]}]}]}],"description":"TEST::floatConstructor Initialize class with value. [object Object] ","testName":"floatConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"floatConstructor","status":"run","time":"0","classname":"Degree"},"name":"floatConstructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Degree::~Degree"],"argsstring":["()"],"name":["~Degree"],"detaileddescription":[{"para":["TEST::defaultDestructor","Default destructor. "]}],"description":"TEST::defaultDestructor Default destructor.  ","testName":"defaultDestructor","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"defaultDestructor","status":"run","time":"0.001","classname":"Degree"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_degree.cpp:44\r\nValue of: testDegree\r\n  Actual: false\r\nExpected: true","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_degree.cpp:44\nValue of: testDegree\n  Actual: false\nExpected: true","type":""}}],"name":"defaultDestructor"},"errorFlag":true},{"type":["float"],"definition":["float driderSDK::Degree::toRadian"],"argsstring":["() const"],"name":["toRadian"],"detaileddescription":[{"para":["TEST::toRadian",{"_":"Returns a  class with a value equal to the actual degrees in radians.","ref":[{"_":"Radian","$":{"refid":"classdrider_s_d_k_1_1_radian","kindref":"compound"}}]},{"simplesect":[{"$":{"kind":"return"},"para":["Class radian. "]}]}]}],"description":"TEST::toRadian [object Object] [object Object] ","testName":"toRadian","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"toRadian","status":"run","time":"0","classname":"Degree"},"name":"toRadian"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Degree","$":{"refid":"classdrider_s_d_k_1_1_degree","kindref":"compound"}}]}],"definition":["Degree & driderSDK::Degree::unwind"],"argsstring":["()"],"name":["unwind"],"detaileddescription":[{"para":["TEST::unwind","Limit the value in [0, 360)",{"simplesect":[{"$":{"kind":"return"},"para":["A reference to this class. "]}]}]}],"description":"TEST::unwind Limit the value in [0, 360) [object Object] ","testName":"unwind","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"unwind","status":"run","time":"0","classname":"Degree"},"name":"unwind"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Degree::operator float"],"argsstring":["()"],"name":["operator float"],"detaileddescription":[{"para":["TEST::floatOperator return the value as a float.",{"simplesect":[{"$":{"kind":"return"},"para":["A float value. "]}]}]}],"description":"TEST::floatOperator return the value as a float. [object Object] ","testName":"floatOperator","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"floatOperator","status":"run","time":"0","classname":"Degree"},"name":"floatOperator"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Degree","$":{"refid":"classdrider_s_d_k_1_1_degree","kindref":"compound"}}]}],"definition":["Degree & driderSDK::Degree::operator="],"argsstring":["(float V)"],"name":["operator="],"detaileddescription":[{"para":["TEST::equalFloat","Sets the value to the float param.",{"_":"\nreturn A reference to this. ","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["V"]}],"parameterdescription":[{"para":["The new value."]}]}]}]}]}],"description":"TEST::equalFloat Sets the value to the float param. [object Object] ","testName":"equalFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"equalFloat","status":"run","time":"0","classname":"Degree"},"name":"equalFloat"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Degree","$":{"refid":"classdrider_s_d_k_1_1_degree","kindref":"compound"}}]}],"definition":["Degree & driderSDK::Degree::operator+="],"argsstring":["(float V)"],"name":["operator+="],"detaileddescription":[{"para":["TEST::plusEqualFloat","Adds the given float to the class value.",{"_":"\nreturn A reference to this. ","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["V"]}],"parameterdescription":[{"para":["The new value."]}]}]}]}]}],"description":"TEST::plusEqualFloat Adds the given float to the class value. [object Object] ","testName":"plusEqualFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"plusEqualFloat","status":"run","time":"0","classname":"Degree"},"name":"plusEqualFloat"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Degree","$":{"refid":"classdrider_s_d_k_1_1_degree","kindref":"compound"}}]}],"definition":["Degree & driderSDK::Degree::operator-="],"argsstring":["(float V)"],"name":["operator-="],"detaileddescription":[{"para":["TEST::lessEqualFloat","Subs the given float to the class value.",{"_":"\nreturn A reference to this. ","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["V"]}],"parameterdescription":[{"para":["The value to sub."]}]}]}]}]}],"description":"TEST::lessEqualFloat Subs the given float to the class value. [object Object] ","testName":"lessEqualFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"lessEqualFloat","status":"run","time":"0","classname":"Degree"},"name":"lessEqualFloat"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Degree","$":{"refid":"classdrider_s_d_k_1_1_degree","kindref":"compound"}}]}],"definition":["Degree & driderSDK::Degree::operator*="],"argsstring":["(float V)"],"name":["operator*="],"detaileddescription":[{"para":["TEST::mulEqualFloat","Multiplies the given float to the class value.",{"_":"\nreturn A reference to this. ","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["V"]}],"parameterdescription":[{"para":["The factor value."]}]}]}]}]}],"description":"TEST::mulEqualFloat Multiplies the given float to the class value. [object Object] ","testName":"mulEqualFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"mulEqualFloat","status":"run","time":"0","classname":"Degree"},"name":"mulEqualFloat"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Degree","$":{"refid":"classdrider_s_d_k_1_1_degree","kindref":"compound"}}]}],"definition":["Degree & driderSDK::Degree::operator/="],"argsstring":["(float V)"],"name":["operator/="],"detaileddescription":[{"para":["TEST::divEqualFloat","Divides the class value with the given float.",{"_":"\nreturn A reference to this. ","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["V"]}],"parameterdescription":[{"para":["The dividend value."]}]}]}]}]}],"description":"TEST::divEqualFloat Divides the class value with the given float. [object Object] ","testName":"divEqualFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"divEqualFloat","status":"run","time":"0","classname":"Degree"},"name":"divEqualFloat"},"errorFlag":false}],"testFile":"Nombre del test: Degree","testClase":{"name":"Degree","tests":"13","failures":"2","disabled":"0","errors":"0","time":"0.016","testCases":[{"data":{"name":"defaultConstructor","status":"run","time":"0.001","classname":"Degree"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_degree.cpp:8\r\nValue of: testDegree\r\n  Actual: true\r\nExpected: false","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_degree.cpp:8\nValue of: testDegree\n  Actual: true\nExpected: false","type":""}}],"name":"defaultConstructor"},{"data":{"name":"moveConstructor","status":"run","time":"0","classname":"Degree"},"name":"moveConstructor"},{"data":{"name":"copyConstructor","status":"run","time":"0","classname":"Degree"},"name":"copyConstructor"},{"data":{"name":"floatConstructor","status":"run","time":"0","classname":"Degree"},"name":"floatConstructor"},{"data":{"name":"defaultDestructor","status":"run","time":"0.001","classname":"Degree"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_degree.cpp:44\r\nValue of: testDegree\r\n  Actual: false\r\nExpected: true","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_degree.cpp:44\nValue of: testDegree\n  Actual: false\nExpected: true","type":""}}],"name":"defaultDestructor"},{"data":{"name":"toRadian","status":"run","time":"0","classname":"Degree"},"name":"toRadian"},{"data":{"name":"unwind","status":"run","time":"0","classname":"Degree"},"name":"unwind"},{"data":{"name":"floatOperator","status":"run","time":"0","classname":"Degree"},"name":"floatOperator"},{"data":{"name":"equalFloat","status":"run","time":"0","classname":"Degree"},"name":"equalFloat"},{"data":{"name":"plusEqualFloat","status":"run","time":"0","classname":"Degree"},"name":"plusEqualFloat"},{"data":{"name":"lessEqualFloat","status":"run","time":"0","classname":"Degree"},"name":"lessEqualFloat"},{"data":{"name":"mulEqualFloat","status":"run","time":"0","classname":"Degree"},"name":"mulEqualFloat"},{"data":{"name":"divEqualFloat","status":"run","time":"0","classname":"Degree"},"name":"divEqualFloat"}]}},{"name":"Face","functions":[{"type":[""],"definition":["driderSDK::Face::Face"],"argsstring":["()"],"name":["Face"],"detaileddescription":[{"para":["TEST::faseConstructor Default constructor "]}],"description":"TEST::faseConstructor Default constructor  ","testName":"faseConstructor","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::Face::~Face"],"argsstring":["()"],"name":["~Face"],"detaileddescription":[{"para":["TEST::faceDestructor Default destructor "]}],"description":"TEST::faceDestructor Default destructor  ","testName":"faceDestructor","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"No existe Test con el nombre de la clase"},{"name":"FileSystem","functions":[{"type":[""],"definition":["driderSDK::FileSystem::FileSystem"],"argsstring":["()"],"name":["FileSystem"],"detaileddescription":[{"para":["TEST::defaultConstructor",{"_":"Default  constructor ","ref":[{"_":"FileSystem","$":{"refid":"classdrider_s_d_k_1_1_file_system","kindref":"compound"}}]}]}],"description":"TEST::defaultConstructor [object Object] ","testName":"defaultConstructor","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::FileSystem::~FileSystem"],"argsstring":["()"],"name":["~FileSystem"],"detaileddescription":[{"para":["TEST::defaultDestructor",{"_":"Default  constructor ","ref":[{"_":"FileSystem","$":{"refid":"classdrider_s_d_k_1_1_file_system","kindref":"compound"}}]}]}],"description":"TEST::defaultDestructor [object Object] ","testName":"defaultDestructor","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::FileSystem::load"],"argsstring":["(const std::string filename, std::string &bufferOut)"],"name":["load"],"detaileddescription":[{"para":["The Load operation determines how many bytes are in the file and returns the amount in riSize.","Param filename The name of the file to load.","Param bufferOut The output where the file will be loaded","Return Boolean value is true if the load is successful, in which case the outputs racBuffer and riSize are valid.","If the returned value is false, one of the following conditions has occurred: The file does not exist. The file cannot be opened for reading (the file attributes might not allow this). "]}],"description":"The Load operation determines how many bytes are in the file and returns the amount in riSize. Param filename The name of the file to load. Param bufferOut The output where the file will be loaded Return Boolean value is true if the load is successful, in which case the outputs racBuffer and riSize are valid. If the returned value is false, one of the following conditions has occurred: The file does not exist. The file cannot be opened for reading (the file attributes might not allow this).  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::FileSystem::save"],"argsstring":["(const std::string filename, const std::string &bufferToSave)"],"name":["save"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::FileSystem::append"],"argsstring":["(const std::string filename, const std::string &bufferToAppend)"],"name":["append"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"No existe Test con el nombre de la clase"},{"name":"Frustrum","functions":[{"type":[""],"definition":["driderSDK::Frustrum::Frustrum"],"argsstring":["(const Matrix4x4 &ViewProjection)"],"name":["Frustrum"],"detaileddescription":[{"para":["Constructor using a View Projection matrix",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["VP"]}],"parameterdescription":[{"para":["The View Projection matrix. "]}]}]}]}]}],"description":"Constructor using a View Projection matrix [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["void"],"definition":["void driderSDK::Frustrum::createFromVP"],"argsstring":["(const Matrix4x4 &ViewProjection)"],"name":["createFromVP"],"detaileddescription":[{"para":["Create the frustrum planes with the View Projection matrix",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["VP"]}],"parameterdescription":[{"para":["The View Projection matrix. "]}]}]}]}]}],"description":"Create the frustrum planes with the View Projection matrix [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Frustrum::intersects"],"argsstring":["(const Ray &bRay) const"],"name":["intersects"],"detaileddescription":[{"para":["Check if the frustrum intersects other ray",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["bRay"]}],"parameterdescription":[{"para":["The ray to check the intersecton."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the frustrum intersects with the other ray "]}]}]}],"description":"Check if the frustrum intersects other ray [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Frustrum::intersects"],"argsstring":["(const Plane &plane) const"],"name":["intersects"],"detaileddescription":[{"para":["Check if the frustrum intersects with a plane",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["plane"]}],"parameterdescription":[{"para":["The plane to check the intersecton."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the frustrum intersects with the plane "]}]}]}],"description":"Check if the frustrum intersects with a plane [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Frustrum::intersects"],"argsstring":["(const Sphere &sphere) const"],"name":["intersects"],"detaileddescription":[{"para":["Check if the frustrum intersects with a sphere",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["sphere"]}],"parameterdescription":[{"para":["The sphere to check the intersecton."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the frustrum intersects with the sphere "]}]}]}],"description":"Check if the frustrum intersects with a sphere [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Frustrum::intersects"],"argsstring":["(const Capsule &capsule) const"],"name":["intersects"],"detaileddescription":[{"para":["Check if the frustrum intersects with a capsule",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["capsule"]}],"parameterdescription":[{"para":["The capsule to check the intersecton."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the frustrum intersects with the capsule "]}]}]}],"description":"Check if the frustrum intersects with a capsule [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Frustrum::intersects"],"argsstring":["(const Frustrum &frustrum) const"],"name":["intersects"],"detaileddescription":[{"para":["Check if the frustrum intersects with a frustrum",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["frustrum"]}],"parameterdescription":[{"para":["The frustrum to check the intersecton."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the frustrum intersects with the frustrum "]}]}]}],"description":"Check if the frustrum intersects with a frustrum [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Frustrum::contains"],"argsstring":["(const Vector3D &point) const"],"name":["contains"],"detaileddescription":[{"para":["Check if the frustrum intersects contains a point",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["point"]}],"parameterdescription":[{"para":["The point to check."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the frustrum contains the point "]}]}]}],"description":"Check if the frustrum intersects contains a point [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Frustrum::contains"],"argsstring":["(const Plane &plane) const"],"name":["contains"],"detaileddescription":[{"para":["Check if the frustrum intersects contains a plane",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["plane"]}],"parameterdescription":[{"para":["The plane to check."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the frustrum contains the plane "]}]}]}],"description":"Check if the frustrum intersects contains a plane [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Frustrum::contains"],"argsstring":["(const Sphere &sphere) const"],"name":["contains"],"detaileddescription":[{"para":["Check if the frustrum intersects contains a sphere",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["sphere"]}],"parameterdescription":[{"para":["The sphere to check."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the frustrum contains the sphere "]}]}]}],"description":"Check if the frustrum intersects contains a sphere [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Frustrum::contains"],"argsstring":["(const Capsule &capsule) const"],"name":["contains"],"detaileddescription":[{"para":["Check if the frustrum intersects contains a capsule",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["capsule"]}],"parameterdescription":[{"para":["The capsule to check."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the frustrum contains the capsule "]}]}]}],"description":"Check if the frustrum intersects contains a capsule [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Frustrum::contains"],"argsstring":["(const Frustrum &frustrum) const"],"name":["contains"],"detaileddescription":[{"para":["Check if the frustrum intersects contains a frustrum",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["frustrum"]}],"parameterdescription":[{"para":["The frustrum to check."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the frustrum contains the frustrum "]}]}]}],"description":"Check if the frustrum intersects contains a frustrum [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"No existe Test con el nombre de la clase"},{"name":"Intersect","functions":[{"type":["bool"],"definition":["bool driderSDK::Intersect::sphereSphere"],"argsstring":["(const Vector3D &sph1Position, float sph1Radius, const Vector3D &sph2Position, float sph2Radius)"],"name":["sphereSphere"],"detaileddescription":[{"para":["Check if one sphere intersects with another.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["sph1Position"]}],"parameterdescription":[{"para":["Center of the first sphere."]}]},{"parameternamelist":[{"parametername":["sph1Radio"]}],"parameterdescription":[{"para":["Radius of the first sphere."]}]},{"parameternamelist":[{"parametername":["sph2Position"]}],"parameterdescription":[{"para":["Center of the second sphere."]}]},{"parameternamelist":[{"parametername":["sph2Radius"]}],"parameterdescription":[{"para":["Radius of the second sphere."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the point is inside, otherwise returns false. "]}]}]}],"description":"Check if one sphere intersects with another. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::sphereCapsule"],"argsstring":["(const Vector3D &sphPosition, float sphRadio, const Vector3D &capsuleA, const Vector3D &capsuleB, float capsuleRadius)"],"name":["sphereCapsule"],"detaileddescription":[{"para":["Check if there was an intersection between a sphere and a capsule.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["sphPosition"]}],"parameterdescription":[{"para":["Center of the sphere."]}]},{"parameternamelist":[{"parametername":["sphRadio"]}],"parameterdescription":[{"para":["Radius of the sphere."]}]},{"parameternamelist":[{"parametername":["capsuleA"]}],"parameterdescription":[{"para":["Point A of the capsule."]}]},{"parameternamelist":[{"parametername":["capsuleB"]}],"parameterdescription":[{"para":["Point B of the capsule."]}]},{"parameternamelist":[{"parametername":["capsuleRadius"]}],"parameterdescription":[{"para":["Radius of the capsule."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if there is intersection, if not False "]}]}]}],"description":"Check if there was an intersection between a sphere and a capsule. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::capsuleCapsule"],"argsstring":["(const Vector3D &capsule1A, const Vector3D &capsule1B, float capsule1Radius, const Vector3D &capsule2A, const Vector3D &capsule2B, float capsule2Radius)"],"name":["capsuleCapsule"],"detaileddescription":[{"para":["Check if there was an intersection between a sphere and a capsule.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["capsule1A"]}],"parameterdescription":[{"para":["Point A of capsule 1."]}]},{"parameternamelist":[{"parametername":["capsule1B"]}],"parameterdescription":[{"para":["Point B of capsule 1."]}]},{"parameternamelist":[{"parametername":["capsule1Radius"]}],"parameterdescription":[{"para":["Radius of capsuele 1."]}]},{"parameternamelist":[{"parametername":["capsule2A"]}],"parameterdescription":[{"para":["Point A of capsule 2."]}]},{"parameternamelist":[{"parametername":["capsule2B"]}],"parameterdescription":[{"para":["Point B of capsule 2."]}]},{"parameternamelist":[{"parametername":["capsule2Radius"]}],"parameterdescription":[{"para":["Radius of capsuele 2."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if there is intersection, if not False "]}]}]}],"description":"Check if there was an intersection between a sphere and a capsule. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::sphereRay"],"argsstring":["(const Vector3D &sphPosition, float sphRadio, const Vector3D &rayOrigin, const Vector3D &rayDirection)"],"name":["sphereRay"],"detaileddescription":[{"para":["Check if there was an intersection between a sphere and a capsule.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["sphPosition"]}],"parameterdescription":[{"para":["Center of the sphere to check."]}]},{"parameternamelist":[{"parametername":["sphRadio"]}],"parameterdescription":[{"para":["Radius of the sphere."]}]},{"parameternamelist":[{"parametername":["rayOrigin"]}],"parameterdescription":[{"para":["Origin of the sphere."]}]},{"parameternamelist":[{"parametername":["rayDirection"]}],"parameterdescription":[{"para":["Directions of the ray."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if there is intersection, if not False "]}]}]}],"description":"Check if there was an intersection between a sphere and a capsule. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::rayPlane"],"argsstring":["(const Vector3D &rayOrigin, const Vector3D &rayDirection, const Vector3D &planeNormal, float planeGap)"],"name":["rayPlane"],"detaileddescription":[{"para":["Check if there was an intersection between a sphere and a capsule.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["rayOrigin"]}],"parameterdescription":[{"para":["Origin of the ray."]}]},{"parameternamelist":[{"parametername":["rayDirection"]}],"parameterdescription":[{"para":["Direction of the ray."]}]},{"parameternamelist":[{"parametername":["planeNormal"]}],"parameterdescription":[{"para":["Normal vector of the plane."]}]},{"parameternamelist":[{"parametername":["planePoint"]}],"parameterdescription":[{"para":["Point on the plane."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if there is intersection, if not False "]}]}]}],"description":"Check if there was an intersection between a sphere and a capsule. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::rayPlane"],"argsstring":["(const Vector3D &rayOrigin, const Vector3D &rayDirection, const Vector3D &planeNormal, const Vector3D &planePoint)"],"name":["rayPlane"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::rayPlane"],"argsstring":["(const Vector3D &rayOrigin, const Vector3D &rayDirection, const Vector3D &planeNormal, const Vector3D &planePoint, float *intersectionPoint)"],"name":["rayPlane"],"detaileddescription":[{"para":["Check if there was an intersection between a sphere and a capsule.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["rayOrigin"]}],"parameterdescription":[{"para":["Origin of the ray."]}]},{"parameternamelist":[{"parametername":["rayDirection"]}],"parameterdescription":[{"para":["Direction of the ray."]}]},{"parameternamelist":[{"parametername":["planeNormal"]}],"parameterdescription":[{"para":["Normal vector of the plane."]}]},{"parameternamelist":[{"parametername":["planePoint"]}],"parameterdescription":[{"para":["Point on the plane."]}]},{"parameternamelist":[{"parametername":["intersectionPoint"]}],"parameterdescription":[{"para":["Return the intersect point."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if there is intersection, if not False "]}]}]}],"description":"Check if there was an intersection between a sphere and a capsule. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::rayCapsule"],"argsstring":["(const Vector3D &pointSA, const Vector3D &pointSB, const Vector3D &pointP, const Vector3D &pointQ, float r, float &t)"],"name":["rayCapsule"],"detaileddescription":[{"para":["Check if there was an intersection between a sphere and a capsule.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["pointSA"]}],"parameterdescription":[{"para":["Min point of the capsule."]}]},{"parameternamelist":[{"parametername":["pointSB"]}],"parameterdescription":[{"para":["Max point of the capsule."]}]},{"parameternamelist":[{"parametername":["pointP"]}],"parameterdescription":[{"para":["Origin of the ray."]}]},{"parameternamelist":[{"parametername":["pointQ"]}],"parameterdescription":[{"para":["Final point of the ray."]}]},{"parameternamelist":[{"parametername":["r"]}],"parameterdescription":[{"para":["Radius of the capsule."]}]},{"parameternamelist":[{"parametername":["t"]}],"parameterdescription":[{"para":["Range of intersection."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if there is intersection, if not False "]}]}]}],"description":"Check if there was an intersection between a sphere and a capsule. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::rayFrustrum"],"argsstring":["(const Vector3D &rayOrigin, const Vector3D &rayDirection, const std::array< Plane, 6 > &frustrumPlanes)"],"name":["rayFrustrum"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::rayRay"],"argsstring":["(const Vector3D &rayAOrigin, const Vector3D &rayADirection, const Vector3D &rayBOrigin, const Vector3D &rayBDirection)"],"name":["rayRay"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::frustrumFrustrum"],"argsstring":["(const std::array< Plane, 6 > &frustrumAPlanes, const std::array< Plane, 6 > &frustrumBPlanes)"],"name":["frustrumFrustrum"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::frustrumSphere"],"argsstring":["(const std::array< Plane, 6 > &frustrumPlanes, const Vector3D &sphereOrigin, float sphereRadius)"],"name":["frustrumSphere"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::aabbAabb"],"argsstring":["(const Vector3D &aabbCenter, float aabbWidth, float aabbHeight, const Vector3D &aabbCenter2, float aabbWidth2, float aabbheight2)"],"name":["aabbAabb"],"detaileddescription":[{"para":[{"_":"Check if an  intersects with another .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}},{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]},{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["aabbCenter"]}],"parameterdescription":[{"para":[{"_":"Center of the first .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]},{"parameternamelist":[{"parametername":["aabbWidth"]}],"parameterdescription":[{"para":[{"_":"Width of the first .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]},{"parameternamelist":[{"parametername":["aabbHeight"]}],"parameterdescription":[{"para":[{"_":"Heigh of the first .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]},{"parameternamelist":[{"parametername":["aabbCenter2"]}],"parameterdescription":[{"para":[{"_":"Center of the second .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]},{"parameternamelist":[{"parametername":["aabbWidth2"]}],"parameterdescription":[{"para":[{"_":"Width of the second .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]},{"parameternamelist":[{"parametername":["aabbHeight2"]}],"parameterdescription":[{"para":[{"_":"Heigh of the second .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":"True if the  intesects, else returns false. ","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]}]}],"description":"[object Object] [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::aabbSphere"],"argsstring":["(const Vector3D &aabbCenter, float aabbWidth, float aabbheight, const Vector3D &sphereOrigin, float sphereRadius)"],"name":["aabbSphere"],"detaileddescription":[{"para":[{"_":"Check if a sphere intersects with an .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]},{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["aabbCenter"]}],"parameterdescription":[{"para":[{"_":"Center of the .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]},{"parameternamelist":[{"parametername":["aabbWidth"]}],"parameterdescription":[{"para":[{"_":"Width of the .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]},{"parameternamelist":[{"parametername":["aabbheight"]}],"parameterdescription":[{"para":[{"_":"Heigh of the .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]},{"parameternamelist":[{"parametername":["sphereOrigin"]}],"parameterdescription":[{"para":["Origin of the sphere."]}]},{"parameternamelist":[{"parametername":["sphereRadius"]}],"parameterdescription":[{"para":["Radius of the sphere to check."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the sphere intersects, else returns false. "]}]}]}],"description":"[object Object] [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::aabbFrustrum"],"argsstring":["(const Vector3D &aabbCenter, float aabbWidth, float aabbheight, const std::array< Plane, 6 > &frustrumPlanes)"],"name":["aabbFrustrum"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::aabbRay"],"argsstring":["(const Vector3D &aabbCenter, float aabbWidth, float aabbHeight, const Vector3D &rayOrigin, const Vector3D &rayDirection)"],"name":["aabbRay"],"detaileddescription":[{"para":[{"_":"Check if a ray intersects with an .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]},{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["aabbCenter"]}],"parameterdescription":[{"para":[{"_":"Center of the .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]},{"parameternamelist":[{"parametername":["aabbWidth"]}],"parameterdescription":[{"para":[{"_":"Width of the .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]},{"parameternamelist":[{"parametername":["aabbHeight"]}],"parameterdescription":[{"para":[{"_":"Heigh of the .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]},{"parameternamelist":[{"parametername":["rayOrigin"]}],"parameterdescription":[{"para":["Origin of the ray."]}]},{"parameternamelist":[{"parametername":["rayDirection"]}],"parameterdescription":[{"para":["Direction of the ray."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the ray intersects, else returns false. "]}]}]}],"description":"[object Object] [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::aabbPoint"],"argsstring":["(const Vector3D &aabbCenter, float aabbWidth, float aabbHeight, const Vector3D &point)"],"name":["aabbPoint"],"detaileddescription":[{"para":[{"_":"Check if a point is inside an .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]},{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["aabbCenter"]}],"parameterdescription":[{"para":[{"_":"Center of the .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]},{"parameternamelist":[{"parametername":["aabbWidth"]}],"parameterdescription":[{"para":[{"_":"Width of the .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]},{"parameternamelist":[{"parametername":["aabbheight"]}],"parameterdescription":[{"para":[{"_":"Heigh of the .","ref":[{"_":"AABB","$":{"refid":"classdrider_s_d_k_1_1_a_a_b_b","kindref":"compound"}}]}]}]},{"parameternamelist":[{"parametername":["point"]}],"parameterdescription":[{"para":["Point to check."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the point is inside, else returns false. "]}]}]}],"description":"[object Object] [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::spherePlane"],"argsstring":["(const Vector3D &planeNormal, float planeGap, const Vector3D &sphereCenter, float sphereRadius)"],"name":["spherePlane"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::aabbPlane"],"argsstring":["(const Vector3D &aabbCenter, float aabbWidth, float aabbHeight, const Vector3D &planeNormal, float planeGap)"],"name":["aabbPlane"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::segmentPlane"],"argsstring":["(const Vector3D &linePointA, const Vector3D &linePointB, const Vector3D &planeNormal, float planeGap)"],"name":["segmentPlane"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::capsulePlane"],"argsstring":["(const Vector3D &capsuleA, const Vector3D &capsuleB, float capsuleRadius, const Vector3D &planeNormal, float planeGap)"],"name":["capsulePlane"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::frustrumPlane"],"argsstring":["(const std::array< Plane, 6 > &frustrumPlanes, const Vector3D &planeNormal)"],"name":["frustrumPlane"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::planePlane"],"argsstring":["(const Vector3D &plane1Normal, float plane1Gap, const Vector3D &plane2Normal, float plane2Gap, Vector3D &point, Vector3D &direction)"],"name":["planePlane"],"detaileddescription":[{"para":["Checks if there is an intersection between 2 planes.",{"_":"\nplane1Gap Gap of the first plane.","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["plane1Normal"]}],"parameterdescription":[{"para":["Normal of the first plane."]}]}]}]},{"_":"\npoint A point of the intersection line.","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["plane2Normal"]}],"parameterdescription":[{"para":["Normal of the second plane."]}]},{"parameternamelist":[{"parametername":["plane2Gap"]}],"parameterdescription":[{"para":["Gap of the second plane."]}]}]}]},"direction Direction of the instersection line.",{"simplesect":[{"$":{"kind":"return"},"para":["True if the planes intersect, false if they are parallel (and separated) or coincident. "]}]}]}],"description":"Checks if there is an intersection between 2 planes. [object Object] [object Object] direction Direction of the instersection line. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::planePlane"],"argsstring":["(const Vector3D &plane1Normal, const Vector3D &plane2Normal)"],"name":["planePlane"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::sphereContainsPoint"],"argsstring":["(const Vector3D &point, const Vector3D &sphPosition, float radius)"],"name":["sphereContainsPoint"],"detaileddescription":[{"para":["Check if a point is inside a sphere.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["point"]}],"parameterdescription":[{"para":["Point to test."]}]},{"parameternamelist":[{"parametername":["sphPosition"]}],"parameterdescription":[{"para":["Center of the sphere."]}]},{"parameternamelist":[{"parametername":["radius"]}],"parameterdescription":[{"para":["Radius of the sphere."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the point is inside, otherwise returns false. "]}]}]}],"description":"Check if a point is inside a sphere. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::frustrumContainsFrustrum"],"argsstring":["(const std::array< Plane, 6 > &frustrumAPlanes, const std::array< Plane, 6 > &frustrumBPlanes)"],"name":["frustrumContainsFrustrum"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Intersect::frustrumContainsSphere"],"argsstring":["(const std::array< Plane, 6 > &frustrumPlanes, const Vector3D &sphereOrigin, float sphereRadius)"],"name":["frustrumContainsSphere"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["float"],"definition":["float driderSDK::Intersect::closestPointSegmentSegment"],"argsstring":["(const Vector3D &p1, const Vector3D &q1, const Vector3D &p2, const Vector3D &q2, float &s, float &t, Vector3D &c1, Vector3D &c2)"],"name":["closestPointSegmentSegment"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"No existe Test con el nombre de la clase"},{"name":"Logger","functions":[{"type":[""],"definition":["driderSDK::Logger::Logger"],"argsstring":["()"],"name":["Logger"],"detaileddescription":[{"para":["TEST::defaultConstructor","Default constructor. "]}],"description":"TEST::defaultConstructor Default constructor.  ","testName":"defaultConstructor","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["virtual driderSDK::Logger::~Logger"],"argsstring":["()"],"name":["~Logger"],"detaileddescription":[{"para":["TEST::defaultDestructor","Default destructor. "]}],"description":"TEST::defaultDestructor Default destructor.  ","testName":"defaultDestructor","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["void"],"definition":["void driderSDK::Logger::reset"],"argsstring":["()"],"name":["reset"],"detaileddescription":[{"para":["TEST::reset","This function reset the content of the logger's html. "]}],"description":"TEST::reset This function reset the content of the logger's html.  ","testName":"reset","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["void"],"definition":["void driderSDK::Logger::addError"],"argsstring":["(const std::string Filename, int lineNumber, const std::string message)"],"name":["addError"],"detaileddescription":[{"para":["TEST::addError",{"_":"Adds a message in the error area. Use  in the Filename parameter. Use  in the Filename parameter. ","bold":["FILE","LINE"]}]}],"description":"TEST::addError [object Object] ","testName":"addError","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["void"],"definition":["void driderSDK::Logger::addWarning"],"argsstring":["(const std::string Filename, int lineNumber, const std::string message)"],"name":["addWarning"],"detaileddescription":[{"para":["TEST::addWarning",{"_":"Adds a message in the warning area. Use  in the Filename parameter. Use  in the Filename parameter. ","bold":["FILE","LINE"]}]}],"description":"TEST::addWarning [object Object] ","testName":"addWarning","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"No existe Test con el nombre de la clase"},{"name":"Math","functions":[{"type":["FORCEINLINE Int32"],"definition":["static FORCEINLINE Int32 driderSDK::Math::divX2"],"argsstring":["(Int32 value)"],"name":["divX2"],"detaileddescription":[{"para":["TEST::divX2 "]}],"description":"TEST::divX2  ","testName":"divX2","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"divX2","status":"run","time":"0","classname":"Math"},"name":"divX2"},"errorFlag":false},{"type":["FORCEINLINE Int32"],"definition":["static FORCEINLINE Int32 driderSDK::Math::mulX2"],"argsstring":["(Int32 value)"],"name":["mulX2"],"detaileddescription":[{"para":["TEST::mulX2 "]}],"description":"TEST::mulX2  ","testName":"mulX2","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"mulX2","status":"run","time":"0","classname":"Math"},"name":"mulX2"},"errorFlag":false},{"type":["FORCEINLINE Int32"],"definition":["static FORCEINLINE Int32 driderSDK::Math::divX4"],"argsstring":["(Int32 value)"],"name":["divX4"],"detaileddescription":[{"para":["TEST::divX4 "]}],"description":"TEST::divX4  ","testName":"divX4","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"divX4","status":"run","time":"0","classname":"Math"},"name":"divX4"},"errorFlag":false},{"type":["FORCEINLINE Int32"],"definition":["static FORCEINLINE Int32 driderSDK::Math::mulX4"],"argsstring":["(Int32 value)"],"name":["mulX4"],"detaileddescription":[{"para":["TEST::mulX4 "]}],"description":"TEST::mulX4  ","testName":"mulX4","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"mulX4","status":"run","time":"0","classname":"Math"},"name":"mulX4"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["static FORCEINLINE float driderSDK::Math::cos"],"argsstring":["(float value)"],"name":["cos"],"detaileddescription":[{"para":["TEST::cos "]}],"description":"TEST::cos  ","testName":"cos","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"cos","status":"run","time":"0","classname":"Math"},"name":"cos"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["static FORCEINLINE float driderSDK::Math::aCos"],"argsstring":["(float value)"],"name":["aCos"],"detaileddescription":[{"para":["TEST::aCos "]}],"description":"TEST::aCos  ","testName":"aCos","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"aCos","status":"run","time":"0","classname":"Math"},"name":"aCos"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["static FORCEINLINE float driderSDK::Math::sin"],"argsstring":["(float value)"],"name":["sin"],"detaileddescription":[{"para":["TEST::sin "]}],"description":"TEST::sin  ","testName":"sin","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"sin","status":"run","time":"0","classname":"Math"},"name":"sin"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["static FORCEINLINE float driderSDK::Math::aSin"],"argsstring":["(float value)"],"name":["aSin"],"detaileddescription":[{"para":["TEST::aSin "]}],"description":"TEST::aSin  ","testName":"aSin","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"aSin","status":"run","time":"0","classname":"Math"},"name":"aSin"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["static FORCEINLINE float driderSDK::Math::tan"],"argsstring":["(float value)"],"name":["tan"],"detaileddescription":[{"para":["TEST::tan "]}],"description":"TEST::tan  ","testName":"tan","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"tan","status":"run","time":"0","classname":"Math"},"name":"tan"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["static FORCEINLINE float driderSDK::Math::aTan"],"argsstring":["(float value)"],"name":["aTan"],"detaileddescription":[{"para":["TEST::aTan "]}],"description":"TEST::aTan  ","testName":"aTan","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"aTan","status":"run","time":"0","classname":"Math"},"name":"aTan"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["static FORCEINLINE float driderSDK::Math::aTan2"],"argsstring":["(float y, float x)"],"name":["aTan2"],"detaileddescription":[{"para":["TEST::aTan2 "]}],"description":"TEST::aTan2  ","testName":"aTan2","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"aTan2","status":"run","time":"0","classname":"Math"},"name":"aTan2"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["static FORCEINLINE float driderSDK::Math::sqrt"],"argsstring":["(float value)"],"name":["sqrt"],"detaileddescription":[{"para":["TEST::sqrt "]}],"description":"TEST::sqrt  ","testName":"sqrt","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"sqrt","status":"run","time":"0","classname":"Math"},"name":"sqrt"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["static FORCEINLINE float driderSDK::Math::pow"],"argsstring":["(float a, float b)"],"name":["pow"],"detaileddescription":[{"para":["TEST::pow "]}],"description":"TEST::pow  ","testName":"pow","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"pow","status":"run","time":"0","classname":"Math"},"name":"pow"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["static FORCEINLINE float driderSDK::Math::exp"],"argsstring":["(float value)"],"name":["exp"],"detaileddescription":[{"para":["TEST::exp "]}],"description":"TEST::exp  ","testName":"exp","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"exp","status":"run","time":"0.001","classname":"Math"},"name":"exp"},"errorFlag":false},{"type":["FORCEINLINE Int32"],"definition":["static FORCEINLINE Int32 driderSDK::Math::truncate2Int"],"argsstring":["(float value)"],"name":["truncate2Int"],"detaileddescription":[{"para":["TEST::truncate2Int "]}],"description":"TEST::truncate2Int  ","testName":"truncate2Int","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"truncate2Int","status":"run","time":"0","classname":"Math"},"name":"truncate2Int"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["static FORCEINLINE float driderSDK::Math::truncate2Float"],"argsstring":["(float value)"],"name":["truncate2Float"],"detaileddescription":[{"para":["TEST::truncate2Float "]}],"description":"TEST::truncate2Float  ","testName":"truncate2Float","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"truncate2Float","status":"run","time":"0","classname":"Math"},"name":"truncate2Float"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["static FORCEINLINE float driderSDK::Math::ceil"],"argsstring":["(float value)"],"name":["ceil"],"detaileddescription":[{"para":["TEST::ceil "]}],"description":"TEST::ceil  ","testName":"ceil","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"ceil","status":"run","time":"0","classname":"Math"},"name":"ceil"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["static FORCEINLINE float driderSDK::Math::floor"],"argsstring":["(float value)"],"name":["floor"],"detaileddescription":[{"para":["TEST::floor "]}],"description":"TEST::floor  ","testName":"floor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"floor","status":"run","time":"0","classname":"Math"},"name":"floor"},"errorFlag":false},{"type":["FORCEINLINE Int32"],"definition":["static FORCEINLINE Int32 driderSDK::Math::round"],"argsstring":["(float value)"],"name":["round"],"detaileddescription":[{"para":["TEST::round "]}],"description":"TEST::round  ","testName":"round","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"round","status":"run","time":"0","classname":"Math"},"name":"round"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["static FORCEINLINE float driderSDK::Math::logE"],"argsstring":["(float value)"],"name":["logE"],"detaileddescription":[{"para":["TEST::logE "]}],"description":"TEST::logE  ","testName":"logE","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"logE","status":"run","time":"0","classname":"Math"},"name":"logE"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["static FORCEINLINE float driderSDK::Math::logX"],"argsstring":["(float base, float value)"],"name":["logX"],"detaileddescription":[{"para":["TEST::logX "]}],"description":"TEST::logX  ","testName":"logX","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"logX","status":"run","time":"0","classname":"Math"},"name":"logX"},"errorFlag":false},{"type":["FORCEINLINE T"],"definition":["static FORCEINLINE T driderSDK::Math::abs"],"argsstring":["(const T A)"],"name":["abs"],"detaileddescription":[{"para":["TEST::absT "]}],"description":"TEST::absT  ","testName":"absT","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"absT","status":"run","time":"0","classname":"Math"},"name":"absT"},"errorFlag":false},{"type":["FORCEINLINE T"],"definition":["static FORCEINLINE T driderSDK::Math::max"],"argsstring":["(const T A, const T B)"],"name":["max"],"detaileddescription":[{"para":["TEST::max "]}],"description":"TEST::max  ","testName":"max","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"max","status":"run","time":"0.001","classname":"Math"},"name":"max"},"errorFlag":false},{"type":["FORCEINLINE T"],"definition":["static FORCEINLINE T driderSDK::Math::min"],"argsstring":["(const T A, const T B)"],"name":["min"],"detaileddescription":[{"para":["TEST::min "]}],"description":"TEST::min  ","testName":"min","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"min","status":"run","time":"0","classname":"Math"},"name":"min"},"errorFlag":false},{"type":["FORCEINLINE T"],"definition":["static FORCEINLINE T driderSDK::Math::square"],"argsstring":["(const T A)"],"name":["square"],"detaileddescription":[{"para":["TEST::square "]}],"description":"TEST::square  ","testName":"square","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"square","status":"run","time":"0","classname":"Math"},"name":"square"},"errorFlag":false},{"type":["FORCEINLINE T"],"definition":["static FORCEINLINE T driderSDK::Math::clamp"],"argsstring":["(const T X, const T Min, const T Max)"],"name":["clamp"],"detaileddescription":[{"para":["TEST::clamp "]}],"description":"TEST::clamp  ","testName":"clamp","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"clamp","status":"run","time":"0","classname":"Math"},"name":"clamp"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["static FORCEINLINE float driderSDK::Math::abs"],"argsstring":["(float value)"],"name":["abs"],"detaileddescription":[{"para":["TEST::absF "]}],"description":"TEST::absF  ","testName":"absF","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"absF","status":"run","time":"0","classname":"Math"},"name":"absF"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Math::fast_invSqrt"],"argsstring":["(float number)"],"name":["fast_invSqrt"],"detaileddescription":[{"para":["TEST::fast_invSqrt "]}],"description":"TEST::fast_invSqrt  ","testName":"fast_invSqrt","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"fast_invSqrt","status":"run","time":"0","classname":"Math"},"name":"fast_invSqrt"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Math::fast_exp"],"argsstring":["(float value)"],"name":["fast_exp"],"detaileddescription":[{"para":["TEST::fast_exp "]}],"description":"TEST::fast_exp  ","testName":"fast_exp","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"fast_exp","status":"run","time":"0","classname":"Math"},"name":"fast_exp"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Math::fast_ln"],"argsstring":["(float value)"],"name":["fast_ln"],"detaileddescription":[{"para":["TEST::fast_ln "]}],"description":"TEST::fast_ln  ","testName":"fast_ln","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"fast_ln","status":"run","time":"0","classname":"Math"},"name":"fast_ln"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Math::fast_sin"],"argsstring":["(float value)"],"name":["fast_sin"],"detaileddescription":[{"para":["TEST::fast_sin "]}],"description":"TEST::fast_sin  ","testName":"fast_sin","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"fast_sin","status":"run","time":"0","classname":"Math"},"name":"fast_sin"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Math::fast_aSin"],"argsstring":["(float value)"],"name":["fast_aSin"],"detaileddescription":[{"para":["TEST::fast_aSin "]}],"description":"TEST::fast_aSin  ","testName":"fast_aSin","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"fast_aSin","status":"run","time":"0","classname":"Math"},"name":"fast_aSin"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Math::fast_cos"],"argsstring":["(float value)"],"name":["fast_cos"],"detaileddescription":[{"para":["TEST::fast_cos "]}],"description":"TEST::fast_cos  ","testName":"fast_cos","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"fast_cos","status":"run","time":"0","classname":"Math"},"name":"fast_cos"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Math::fast_aCos"],"argsstring":["(float value)"],"name":["fast_aCos"],"detaileddescription":[{"para":["TEST::fast_aCos "]}],"description":"TEST::fast_aCos  ","testName":"fast_aCos","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"fast_aCos","status":"run","time":"0","classname":"Math"},"name":"fast_aCos"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Math::fast_tan"],"argsstring":["(float value)"],"name":["fast_tan"],"detaileddescription":[{"para":["TEST::fast_tan "]}],"description":"TEST::fast_tan  ","testName":"fast_tan","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"fast_tan","status":"run","time":"0","classname":"Math"},"name":"fast_tan"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Math::fast_aTan"],"argsstring":["(float value)"],"name":["fast_aTan"],"detaileddescription":[{"para":["TEST::fast_aTan "]}],"description":"TEST::fast_aTan  ","testName":"fast_aTan","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"fast_aTan","status":"run","time":"0","classname":"Math"},"name":"fast_aTan"},"errorFlag":false}],"testFile":"Nombre del test: Math","testClase":{"name":"Math","tests":"36","failures":"0","disabled":"0","errors":"0","time":"0.032","testCases":[{"data":{"name":"divX2","status":"run","time":"0","classname":"Math"},"name":"divX2"},{"data":{"name":"mulX2","status":"run","time":"0","classname":"Math"},"name":"mulX2"},{"data":{"name":"divX4","status":"run","time":"0","classname":"Math"},"name":"divX4"},{"data":{"name":"mulX4","status":"run","time":"0","classname":"Math"},"name":"mulX4"},{"data":{"name":"cos","status":"run","time":"0","classname":"Math"},"name":"cos"},{"data":{"name":"aCos","status":"run","time":"0","classname":"Math"},"name":"aCos"},{"data":{"name":"sin","status":"run","time":"0","classname":"Math"},"name":"sin"},{"data":{"name":"aSin","status":"run","time":"0","classname":"Math"},"name":"aSin"},{"data":{"name":"tan","status":"run","time":"0","classname":"Math"},"name":"tan"},{"data":{"name":"aTan","status":"run","time":"0","classname":"Math"},"name":"aTan"},{"data":{"name":"aTan2","status":"run","time":"0","classname":"Math"},"name":"aTan2"},{"data":{"name":"sqrt","status":"run","time":"0","classname":"Math"},"name":"sqrt"},{"data":{"name":"pow","status":"run","time":"0","classname":"Math"},"name":"pow"},{"data":{"name":"exp","status":"run","time":"0.001","classname":"Math"},"name":"exp"},{"data":{"name":"truncate2Int","status":"run","time":"0","classname":"Math"},"name":"truncate2Int"},{"data":{"name":"truncate2Float","status":"run","time":"0","classname":"Math"},"name":"truncate2Float"},{"data":{"name":"ceil","status":"run","time":"0","classname":"Math"},"name":"ceil"},{"data":{"name":"floor","status":"run","time":"0","classname":"Math"},"name":"floor"},{"data":{"name":"round","status":"run","time":"0","classname":"Math"},"name":"round"},{"data":{"name":"logE","status":"run","time":"0","classname":"Math"},"name":"logE"},{"data":{"name":"logX","status":"run","time":"0","classname":"Math"},"name":"logX"},{"data":{"name":"absT","status":"run","time":"0","classname":"Math"},"name":"absT"},{"data":{"name":"max","status":"run","time":"0.001","classname":"Math"},"name":"max"},{"data":{"name":"min","status":"run","time":"0","classname":"Math"},"name":"min"},{"data":{"name":"square","status":"run","time":"0","classname":"Math"},"name":"square"},{"data":{"name":"clamp","status":"run","time":"0","classname":"Math"},"name":"clamp"},{"data":{"name":"absF","status":"run","time":"0","classname":"Math"},"name":"absF"},{"data":{"name":"fast_invSqrt","status":"run","time":"0","classname":"Math"},"name":"fast_invSqrt"},{"data":{"name":"fast_exp","status":"run","time":"0","classname":"Math"},"name":"fast_exp"},{"data":{"name":"fast_ln","status":"run","time":"0","classname":"Math"},"name":"fast_ln"},{"data":{"name":"fast_sin","status":"run","time":"0","classname":"Math"},"name":"fast_sin"},{"data":{"name":"fast_aSin","status":"run","time":"0","classname":"Math"},"name":"fast_aSin"},{"data":{"name":"fast_cos","status":"run","time":"0","classname":"Math"},"name":"fast_cos"},{"data":{"name":"fast_aCos","status":"run","time":"0","classname":"Math"},"name":"fast_aCos"},{"data":{"name":"fast_tan","status":"run","time":"0","classname":"Math"},"name":"fast_tan"},{"data":{"name":"fast_aTan","status":"run","time":"0","classname":"Math"},"name":"fast_aTan"}]}},{"name":"Matrix3x3","functions":[{"type":[""],"definition":["driderSDK::Matrix3x3::Matrix3x3"],"argsstring":["()"],"name":["Matrix3x3"],"detaileddescription":[{"para":["TEST::operatorEqual","Default constructor "]}],"description":"TEST::operatorEqual Default constructor  ","testName":"operatorEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorEqual","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorEqual"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Matrix3x3::Matrix3x3"],"argsstring":["(Math::FORCE_INIT k)"],"name":["Matrix3x3"],"detaileddescription":[{"para":["TEST::forceInit","Default constructor","Values are initialized with 0(kZero) or identity matrix(kIdentity). "]}],"description":"TEST::forceInit Default constructor Values are initialized with 0(kZero) or identity matrix(kIdentity).  ","testName":"forceInit","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"forceInit","status":"run","time":"0","classname":"Matrix3x3"},"name":"forceInit"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Matrix3x3::Matrix3x3"],"argsstring":["(Matrix3x3 &&M)=default"],"name":["Matrix3x3"],"detaileddescription":[{"para":["TEST::moveConstructor","Move constructor "]}],"description":"TEST::moveConstructor Move constructor  ","testName":"moveConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"moveConstructor","status":"run","time":"0","classname":"Matrix3x3"},"name":"moveConstructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Matrix3x3::Matrix3x3"],"argsstring":["(const Matrix3x3 &M)"],"name":["Matrix3x3"],"detaileddescription":[{"para":["TEST::constructForMatrix3x3","Copy constructor "]}],"description":"TEST::constructForMatrix3x3 Copy constructor  ","testName":"constructForMatrix3x3","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"constructForMatrix3x3","status":"run","time":"0","classname":"Matrix3x3"},"name":"constructForMatrix3x3"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Matrix3x3::Matrix3x3"],"argsstring":["(float v0x, float v0y, float v0z, float v1x, float v1y, float v1z, float v2x, float v2y, float v2z)"],"name":["Matrix3x3"],"detaileddescription":[{"para":["TEST::constructFor9Floats","Initialize constructor with values.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["v0x","v0y","v0z"]}],"parameterdescription":[{"para":["The x, y, z values of the vector, first raw"]}]},{"parameternamelist":[{"parametername":["v1x","v1y","v1z"]}],"parameterdescription":[{"para":["The x, y, z values of the vector, second raw"]}]},{"parameternamelist":[{"parametername":["v2x","v2y","v2z"]}],"parameterdescription":[{"para":["The x, y, z values of the vector, third raw "]}]}]}]}]}],"description":"TEST::constructFor9Floats Initialize constructor with values. [object Object] ","testName":"constructFor9Floats","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"constructFor9Floats","status":"run","time":"0","classname":"Matrix3x3"},"name":"constructFor9Floats"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Matrix3x3::Matrix3x3"],"argsstring":["(Vector3D vector0, Vector3D vector1, Vector3D vector2)"],"name":["Matrix3x3"],"detaileddescription":[{"para":["TEST::constructFor3Vectors","Initialize constructor with values.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["vector0"]}],"parameterdescription":[{"para":["The vector0(x, y, z) values of the vector, first row"]}]},{"parameternamelist":[{"parametername":["vector10-vector12"]}],"parameterdescription":[{"para":["The vector1(x, y, z) values of the vector, second row"]}]},{"parameternamelist":[{"parametername":["vector20-vector22"]}],"parameterdescription":[{"para":["The vector2(x, y, z) values of the vector, third row "]}]}]}]}]}],"description":"TEST::constructFor3Vectors Initialize constructor with values. [object Object] ","testName":"constructFor3Vectors","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"constructFor3Vectors","status":"run","time":"0","classname":"Matrix3x3"},"name":"constructFor3Vectors"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Matrix3x3::~Matrix3x3"],"argsstring":["()"],"name":["~Matrix3x3"],"detaileddescription":[{"para":["TEST::destructor Default destructor "]}],"description":"TEST::destructor Default destructor  ","testName":"destructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"destructor","status":"run","time":"0","classname":"Matrix3x3"},"name":"destructor"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Matrix3x3::determinant"],"argsstring":["() const"],"name":["determinant"],"detaileddescription":[{"para":["TEST::determinant","Calculates the determinant of the matrix",{"simplesect":[{"$":{"kind":"return"},"para":["determinant. "]}]}]}],"description":"TEST::determinant Calculates the determinant of the matrix [object Object] ","testName":"determinant","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"determinant","status":"run","time":"0","classname":"Matrix3x3"},"name":"determinant"},"errorFlag":false},{"type":["void"],"definition":["void driderSDK::Matrix3x3::cofactor"],"argsstring":["()"],"name":["cofactor"],"detaileddescription":[{"para":["TEST::inverse","Calculates the cofactor of the matrix",{"simplesect":[{"$":{"kind":"return"},"para":["cofactor of matrix. "]}]}]}],"description":"TEST::inverse Calculates the cofactor of the matrix [object Object] ","testName":"inverse","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"inverse","status":"run","time":"0","classname":"Matrix3x3"},"name":"inverse"},"errorFlag":false},{"type":["void"],"definition":["void driderSDK::Matrix3x3::adjugate"],"argsstring":["()"],"name":["adjugate"],"detaileddescription":[{"para":["TEST::inverse","Calculates the adjugate of the matrix using transpose for cofactor matrix",{"simplesect":[{"$":{"kind":"return"},"para":["adjugate. "]}]}]}],"description":"TEST::inverse Calculates the adjugate of the matrix using transpose for cofactor matrix [object Object] ","testName":"inverse","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"inverse","status":"run","time":"0","classname":"Matrix3x3"},"name":"inverse"},"errorFlag":false},{"type":["void"],"definition":["void driderSDK::Matrix3x3::inverse"],"argsstring":["()"],"name":["inverse"],"detaileddescription":[{"para":["TEST::inverse","Calculate inverse of matrix. using det * adjugate "]}],"description":"TEST::inverse Calculate inverse of matrix. using det * adjugate  ","testName":"inverse","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"inverse","status":"run","time":"0","classname":"Matrix3x3"},"name":"inverse"},"errorFlag":false},{"type":["void"],"definition":["void driderSDK::Matrix3x3::transpose"],"argsstring":["()"],"name":["transpose"],"detaileddescription":[{"para":["TEST::inverse","Transpose","Invert columns whith rows | A1 | A2 | A3 |T | A1 | B1 | C1 | | B1 | B2 | B3 | = | A2 | B2 | C2 | | C1 | C2 | C3 | | A3 | B3 | C3 | "]}],"description":"TEST::inverse Transpose Invert columns whith rows | A1 | A2 | A3 |T | A1 | B1 | C1 | | B1 | B2 | B3 | = | A2 | B2 | C2 | | C1 | C2 | C3 | | A3 | B3 | C3 |  ","testName":"inverse","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"inverse","status":"run","time":"0","classname":"Matrix3x3"},"name":"inverse"},"errorFlag":false},{"type":["void"],"definition":["void driderSDK::Matrix3x3::identity"],"argsstring":["()"],"name":["identity"],"detaileddescription":[{"para":["TEST::identity","Identity","Tranform matrix to identity "]}],"description":"TEST::identity Identity Tranform matrix to identity  ","testName":"identity","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"identity","status":"run","time":"0","classname":"Matrix3x3"},"name":"identity"},"errorFlag":false},{"type":["float *"],"definition":["float * driderSDK::Matrix3x3::ptr"],"argsstring":["()"],"name":["ptr"],"detaileddescription":[{"para":["TEST::getPointer","Gets a pointer to the first element of the matrix.",{"simplesect":[{"$":{"kind":"return"},"para":["A pointer to the first element of the matrix. "]}]}]}],"description":"TEST::getPointer Gets a pointer to the first element of the matrix. [object Object] ","testName":"getPointer","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"getPointer","status":"run","time":"0","classname":"Matrix3x3"},"name":"getPointer"},"errorFlag":false},{"type":["const float *"],"definition":["const float * driderSDK::Matrix3x3::ptr"],"argsstring":["() const"],"name":["ptr"],"detaileddescription":[{"para":["TEST::getPointerConst","Gets a constant pointer to the first element of the matrix.",{"simplesect":[{"$":{"kind":"return"},"para":["A constant pointer to the first element of the matrix. "]}]}]}],"description":"TEST::getPointerConst Gets a constant pointer to the first element of the matrix. [object Object] ","testName":"getPointerConst","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"getPointerConst","status":"run","time":"0","classname":"Matrix3x3"},"name":"getPointerConst"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Vector3D","$":{"refid":"classdrider_s_d_k_1_1_vector3_d","kindref":"compound"}}]}],"definition":["Vector3D & driderSDK::Matrix3x3::operator[]"],"argsstring":["(SizeT index)"],"name":["operator[]"],"detaileddescription":[{"para":["TEST::forceInit "]}],"description":"TEST::forceInit  ","testName":"forceInit","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"forceInit","status":"run","time":"0","classname":"Matrix3x3"},"name":"forceInit"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Matrix3x3","$":{"refid":"classdrider_s_d_k_1_1_matrix3x3","kindref":"compound"}}]}],"definition":["Matrix3x3 & driderSDK::Matrix3x3::operator="],"argsstring":["(const Matrix3x3 &A)"],"name":["operator="],"detaileddescription":[{"para":["TEST::operatorEqual "]}],"description":"TEST::operatorEqual  ","testName":"operatorEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorEqual","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorEqual"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Matrix3x3","$":{"refid":"classdrider_s_d_k_1_1_matrix3x3","kindref":"compound"}}]}],"definition":["Matrix3x3 & driderSDK::Matrix3x3::operator="],"argsstring":["(const Matrix4x4 &A)"],"name":["operator="],"detaileddescription":[{"para":["TEST::operatorEqualMatrix4x4 "]}],"description":"TEST::operatorEqualMatrix4x4  ","testName":"operatorEqualMatrix4x4","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorEqualMatrix4x4","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorEqualMatrix4x4"},"errorFlag":false},{"type":[{"ref":[{"_":"Matrix3x3","$":{"refid":"classdrider_s_d_k_1_1_matrix3x3","kindref":"compound"}}]}],"definition":["Matrix3x3 driderSDK::Matrix3x3::operator+"],"argsstring":["(const Matrix3x3 &A) const"],"name":["operator+"],"detaileddescription":[{"para":["TEST::operatorAdd "]}],"description":"TEST::operatorAdd  ","testName":"operatorAdd","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorAdd","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorAdd"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Matrix3x3","$":{"refid":"classdrider_s_d_k_1_1_matrix3x3","kindref":"compound"}}]}],"definition":["Matrix3x3 & driderSDK::Matrix3x3::operator+="],"argsstring":["(const Matrix3x3 &A)"],"name":["operator+="],"detaileddescription":[{"para":["TEST::operatorAddEqual "]}],"description":"TEST::operatorAddEqual  ","testName":"operatorAddEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorAddEqual","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorAddEqual"},"errorFlag":false},{"type":[{"ref":[{"_":"Matrix3x3","$":{"refid":"classdrider_s_d_k_1_1_matrix3x3","kindref":"compound"}}]}],"definition":["Matrix3x3 driderSDK::Matrix3x3::operator-"],"argsstring":["(const Matrix3x3 &A) const"],"name":["operator-"],"detaileddescription":[{"para":["TEST::operatorMinus "]}],"description":"TEST::operatorMinus  ","testName":"operatorMinus","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMinus","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorMinus"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Matrix3x3","$":{"refid":"classdrider_s_d_k_1_1_matrix3x3","kindref":"compound"}}]}],"definition":["Matrix3x3 & driderSDK::Matrix3x3::operator-="],"argsstring":["(const Matrix3x3 &A)"],"name":["operator-="],"detaileddescription":[{"para":["TEST::operatorMinusEqual "]}],"description":"TEST::operatorMinusEqual  ","testName":"operatorMinusEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMinusEqual","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorMinusEqual"},"errorFlag":false},{"type":[{"ref":[{"_":"Matrix3x3","$":{"refid":"classdrider_s_d_k_1_1_matrix3x3","kindref":"compound"}}]}],"definition":["Matrix3x3 driderSDK::Matrix3x3::operator*"],"argsstring":["(const Matrix3x3 &A) const"],"name":["operator*"],"detaileddescription":[{"para":["TEST::operatorMultiplication "]}],"description":"TEST::operatorMultiplication  ","testName":"operatorMultiplication","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMultiplication","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorMultiplication"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Matrix3x3","$":{"refid":"classdrider_s_d_k_1_1_matrix3x3","kindref":"compound"}}]}],"definition":["Matrix3x3 & driderSDK::Matrix3x3::operator*="],"argsstring":["(const Matrix3x3 &A)"],"name":["operator*="],"detaileddescription":[{"para":["TEST::operatorMultiplicationEqual "]}],"description":"TEST::operatorMultiplicationEqual  ","testName":"operatorMultiplicationEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMultiplicationEqual","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorMultiplicationEqual"},"errorFlag":false},{"type":[{"ref":[{"_":"Vector3D","$":{"refid":"classdrider_s_d_k_1_1_vector3_d","kindref":"compound"}}]}],"definition":["Vector3D driderSDK::Matrix3x3::operator*"],"argsstring":["(const Vector3D &S) const"],"name":["operator*"],"detaileddescription":[{"para":["TEST::operatorMultiplicationForVector3 "]}],"description":"TEST::operatorMultiplicationForVector3  ","testName":"operatorMultiplicationForVector3","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMultiplicationForVector3","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorMultiplicationForVector3"},"errorFlag":false},{"type":[{"ref":[{"_":"Matrix3x3","$":{"refid":"classdrider_s_d_k_1_1_matrix3x3","kindref":"compound"}}]}],"definition":["Matrix3x3 driderSDK::Matrix3x3::operator*"],"argsstring":["(const float S) const"],"name":["operator*"],"detaileddescription":[{"para":["TEST::operatorMultiplicationFloat "]}],"description":"TEST::operatorMultiplicationFloat  ","testName":"operatorMultiplicationFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMultiplicationFloat","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorMultiplicationFloat"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Matrix3x3","$":{"refid":"classdrider_s_d_k_1_1_matrix3x3","kindref":"compound"}}]}],"definition":["Matrix3x3 & driderSDK::Matrix3x3::operator*="],"argsstring":["(const float S)"],"name":["operator*="],"detaileddescription":[{"para":["TEST::operatorMultiplicationEqualFloat "]}],"description":"TEST::operatorMultiplicationEqualFloat  ","testName":"operatorMultiplicationEqualFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMultiplicationEqualFloat","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorMultiplicationEqualFloat"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Matrix3x3::operator=="],"argsstring":["(const Matrix3x3 &M)"],"name":["operator=="],"detaileddescription":[{"para":["TEST::operatorEqualEqual "]}],"description":"TEST::operatorEqualEqual  ","testName":"operatorEqualEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorEqualEqual","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorEqualEqual"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Matrix3x3::operator!="],"argsstring":["(const Matrix3x3 &M)"],"name":["operator!="],"detaileddescription":[{"para":["TEST::operatorNotEqual "]}],"description":"TEST::operatorNotEqual  ","testName":"operatorNotEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorNotEqual","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorNotEqual"},"errorFlag":false}],"testFile":"Nombre del test: Matrix3x3","testClase":{"name":"Matrix3x3","tests":"24","failures":"0","disabled":"0","errors":"0","time":"0.021","testCases":[{"data":{"name":"forceInit","status":"run","time":"0","classname":"Matrix3x3"},"name":"forceInit"},{"data":{"name":"moveConstructor","status":"run","time":"0","classname":"Matrix3x3"},"name":"moveConstructor"},{"data":{"name":"constructForMatrix3x3","status":"run","time":"0","classname":"Matrix3x3"},"name":"constructForMatrix3x3"},{"data":{"name":"constructFor9Floats","status":"run","time":"0","classname":"Matrix3x3"},"name":"constructFor9Floats"},{"data":{"name":"constructFor3Vectors","status":"run","time":"0","classname":"Matrix3x3"},"name":"constructFor3Vectors"},{"data":{"name":"destructor","status":"run","time":"0","classname":"Matrix3x3"},"name":"destructor"},{"data":{"name":"determinant","status":"run","time":"0","classname":"Matrix3x3"},"name":"determinant"},{"data":{"name":"inverse","status":"run","time":"0","classname":"Matrix3x3"},"name":"inverse"},{"data":{"name":"identity","status":"run","time":"0","classname":"Matrix3x3"},"name":"identity"},{"data":{"name":"getPointer","status":"run","time":"0","classname":"Matrix3x3"},"name":"getPointer"},{"data":{"name":"getPointerConst","status":"run","time":"0","classname":"Matrix3x3"},"name":"getPointerConst"},{"data":{"name":"operatorEqual","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorEqual"},{"data":{"name":"operatorEqualMatrix4x4","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorEqualMatrix4x4"},{"data":{"name":"operatorAdd","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorAdd"},{"data":{"name":"operatorAddEqual","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorAddEqual"},{"data":{"name":"operatorMinus","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorMinus"},{"data":{"name":"operatorMinusEqual","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorMinusEqual"},{"data":{"name":"operatorMultiplication","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorMultiplication"},{"data":{"name":"operatorMultiplicationEqual","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorMultiplicationEqual"},{"data":{"name":"operatorMultiplicationForVector3","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorMultiplicationForVector3"},{"data":{"name":"operatorMultiplicationFloat","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorMultiplicationFloat"},{"data":{"name":"operatorMultiplicationEqualFloat","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorMultiplicationEqualFloat"},{"data":{"name":"operatorEqualEqual","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorEqualEqual"},{"data":{"name":"operatorNotEqual","status":"run","time":"0","classname":"Matrix3x3"},"name":"operatorNotEqual"}]}},{"name":"Matrix4x4","functions":[{"type":[""],"definition":["driderSDK::Matrix4x4::Matrix4x4"],"argsstring":["()"],"name":["Matrix4x4"],"detaileddescription":[{"para":["TEST::operatorEqual","Default constructor "]}],"description":"TEST::operatorEqual Default constructor  ","testName":"operatorEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorEqual","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorEqual"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Matrix4x4::Matrix4x4"],"argsstring":["(Math::FORCE_INIT k)"],"name":["Matrix4x4"],"detaileddescription":[{"para":["TEST::forceInit","Default constructor","Values are initialized with 0(kZero) or identity matrix(kIdentity). "]}],"description":"TEST::forceInit Default constructor Values are initialized with 0(kZero) or identity matrix(kIdentity).  ","testName":"forceInit","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"forceInit","status":"run","time":"0","classname":"Matrix4x4"},"name":"forceInit"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Matrix4x4::Matrix4x4"],"argsstring":["(Matrix4x4 &&M)=default"],"name":["Matrix4x4"],"detaileddescription":[{"para":["TEST::moveConstructor","Move constructor "]}],"description":"TEST::moveConstructor Move constructor  ","testName":"moveConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"moveConstructor","status":"run","time":"0","classname":"Matrix4x4"},"name":"moveConstructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Matrix4x4::Matrix4x4"],"argsstring":["(const Matrix4x4 &M)"],"name":["Matrix4x4"],"detaileddescription":[{"para":["TEST::constructForMatrix4x4","Copy constructor "]}],"description":"TEST::constructForMatrix4x4 Copy constructor  ","testName":"constructForMatrix4x4","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"constructForMatrix4x4","status":"run","time":"0","classname":"Matrix4x4"},"name":"constructForMatrix4x4"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Matrix4x4::Matrix4x4"],"argsstring":["(float v0x, float v0y, float v0z, float v0w, float v1x, float v1y, float v1z, float v1w, float v2x, float v2y, float v2z, float v2w, float v3x, float v3y, float v3z, float v3w)"],"name":["Matrix4x4"],"detaileddescription":[{"para":["TEST::constructFor16Floats Initialize constructor with values.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["v0x","v0y","v0z","v0w"]}],"parameterdescription":[{"para":["The x, y, z, w values of the vector, first row"]}]},{"parameternamelist":[{"parametername":["v1x","v1y","v1z","v1w"]}],"parameterdescription":[{"para":["The x, y, z, w values of the vector, second row"]}]},{"parameternamelist":[{"parametername":["v2x","v2y","v2z","v2w"]}],"parameterdescription":[{"para":["The x, y, z, w values of the vector, third row"]}]},{"parameternamelist":[{"parametername":["v3x","v3y","v3z","v3w"]}],"parameterdescription":[{"para":["The x, y, z, w values of the vector, quarter row "]}]}]}]}]}],"description":"TEST::constructFor16Floats Initialize constructor with values. [object Object] ","testName":"constructFor16Floats","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"constructFor16Floats","status":"run","time":"0","classname":"Matrix4x4"},"name":"constructFor16Floats"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Matrix4x4::Matrix4x4"],"argsstring":["(Vector4D vector0, Vector4D vector1, Vector4D vector2, Vector4D vector3)"],"name":["Matrix4x4"],"detaileddescription":[{"para":["TEST::constructFor4Vectors","Initialize constructor with values.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["vector0"]}],"parameterdescription":[{"para":["The vector0(x, y, z, w) values of the vector, first raw"]}]},{"parameternamelist":[{"parametername":["vector1"]}],"parameterdescription":[{"para":["The vector1(x, y, z, w) values of the vector, second raw"]}]},{"parameternamelist":[{"parametername":["vector3"]}],"parameterdescription":[{"para":["The vector2(x, y, z, w) values of the vector, third raw"]}]},{"parameternamelist":[{"parametername":["vector4"]}],"parameterdescription":[{"para":["The vector2(x, y, z, w) values of the vector, quarter raw "]}]}]}]}]}],"description":"TEST::constructFor4Vectors Initialize constructor with values. [object Object] ","testName":"constructFor4Vectors","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"constructFor4Vectors","status":"run","time":"0","classname":"Matrix4x4"},"name":"constructFor4Vectors"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Matrix4x4::~Matrix4x4"],"argsstring":["()"],"name":["~Matrix4x4"],"detaileddescription":[{"para":["TEST::destructor","Destructor","Default destructor "]}],"description":"TEST::destructor Destructor Default destructor  ","testName":"destructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"destructor","status":"run","time":"0","classname":"Matrix4x4"},"name":"destructor"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Matrix4x4::determinant"],"argsstring":["() const"],"name":["determinant"],"detaileddescription":[{"para":["TEST::determinant","Calculates the determinant of the matrix",{"simplesect":[{"$":{"kind":"return"},"para":["determinant. "]}]}]}],"description":"TEST::determinant Calculates the determinant of the matrix [object Object] ","testName":"determinant","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"determinant","status":"run","time":"0","classname":"Matrix4x4"},"name":"determinant"},"errorFlag":false},{"type":["void"],"definition":["void driderSDK::Matrix4x4::cofactor"],"argsstring":["()"],"name":["cofactor"],"detaileddescription":[{"para":["TEST::inverse","Calculates the cofactor of the matrix",{"simplesect":[{"$":{"kind":"return"},"para":["cofactor of matrix. "]}]}]}],"description":"TEST::inverse Calculates the cofactor of the matrix [object Object] ","testName":"inverse","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"inverse","status":"run","time":"0","classname":"Matrix4x4"},"name":"inverse"},"errorFlag":false},{"type":["void"],"definition":["void driderSDK::Matrix4x4::adjugate"],"argsstring":["()"],"name":["adjugate"],"detaileddescription":[{"para":["TEST::inverse","Calculates the adjugate of the matrix using transpose for cofactor matrix",{"simplesect":[{"$":{"kind":"return"},"para":["adjugate. "]}]}]}],"description":"TEST::inverse Calculates the adjugate of the matrix using transpose for cofactor matrix [object Object] ","testName":"inverse","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"inverse","status":"run","time":"0","classname":"Matrix4x4"},"name":"inverse"},"errorFlag":false},{"type":["void"],"definition":["void driderSDK::Matrix4x4::inverse"],"argsstring":["()"],"name":["inverse"],"detaileddescription":[{"para":["TEST::inverse","Calculate inverse of matrix. using det * adjugate "]}],"description":"TEST::inverse Calculate inverse of matrix. using det * adjugate  ","testName":"inverse","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"inverse","status":"run","time":"0","classname":"Matrix4x4"},"name":"inverse"},"errorFlag":false},{"type":["void"],"definition":["void driderSDK::Matrix4x4::transpose"],"argsstring":["()"],"name":["transpose"],"detaileddescription":[{"para":["TEST::inverse","Transpose","Invert columns whith rows | A1 | A2 | A3 | A4 |T | A1 | B1 | C1 | D1 | | B1 | B2 | B3 | B4 | | A2 | B2 | C2 | D2 | | C1 | C2 | C3 | C4 | = | A3 | B3 | C3 | D3 | | D1 | D2 | D3 | C4 | | A4 | B4 | C4 | D4 | "]}],"description":"TEST::inverse Transpose Invert columns whith rows | A1 | A2 | A3 | A4 |T | A1 | B1 | C1 | D1 | | B1 | B2 | B3 | B4 | | A2 | B2 | C2 | D2 | | C1 | C2 | C3 | C4 | = | A3 | B3 | C3 | D3 | | D1 | D2 | D3 | C4 | | A4 | B4 | C4 | D4 |  ","testName":"inverse","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"inverse","status":"run","time":"0","classname":"Matrix4x4"},"name":"inverse"},"errorFlag":false},{"type":["void"],"definition":["void driderSDK::Matrix4x4::identity"],"argsstring":["()"],"name":["identity"],"detaileddescription":[{"para":["TEST::identity","Identity","Tranform matrix to identity "]}],"description":"TEST::identity Identity Tranform matrix to identity  ","testName":"identity","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"identity","status":"run","time":"0","classname":"Matrix4x4"},"name":"identity"},"errorFlag":false},{"type":["float *"],"definition":["float * driderSDK::Matrix4x4::ptr"],"argsstring":["()"],"name":["ptr"],"detaileddescription":[{"para":["TEST::getPointer","Gets a pointer to the first element of the matrix.",{"simplesect":[{"$":{"kind":"return"},"para":["A pointer to the first element of the matrix. "]}]}]}],"description":"TEST::getPointer Gets a pointer to the first element of the matrix. [object Object] ","testName":"getPointer","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"getPointer","status":"run","time":"0","classname":"Matrix4x4"},"name":"getPointer"},"errorFlag":false},{"type":["const float *"],"definition":["const float * driderSDK::Matrix4x4::ptr"],"argsstring":["() const"],"name":["ptr"],"detaileddescription":[{"para":["TEST::getPointerConst","Gets a constant pointer to the first element of the matrix.",{"simplesect":[{"$":{"kind":"return"},"para":["A constant pointer to the first element of the matrix. "]}]}]}],"description":"TEST::getPointerConst Gets a constant pointer to the first element of the matrix. [object Object] ","testName":"getPointerConst","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"getPointerConst","status":"run","time":"0","classname":"Matrix4x4"},"name":"getPointerConst"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Vector4D","$":{"refid":"classdrider_s_d_k_1_1_vector4_d","kindref":"compound"}}]}],"definition":["Vector4D & driderSDK::Matrix4x4::operator[]"],"argsstring":["(SizeT index)"],"name":["operator[]"],"detaileddescription":[{"para":["TEST::forceInit "]}],"description":"TEST::forceInit  ","testName":"forceInit","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"forceInit","status":"run","time":"0","classname":"Matrix4x4"},"name":"forceInit"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Matrix4x4","$":{"refid":"classdrider_s_d_k_1_1_matrix4x4","kindref":"compound"}}]}],"definition":["Matrix4x4 & driderSDK::Matrix4x4::operator="],"argsstring":["(const Matrix4x4 &A)"],"name":["operator="],"detaileddescription":[{"para":["TEST::operatorEqual "]}],"description":"TEST::operatorEqual  ","testName":"operatorEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorEqual","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorEqual"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Matrix4x4","$":{"refid":"classdrider_s_d_k_1_1_matrix4x4","kindref":"compound"}}]}],"definition":["Matrix4x4 & driderSDK::Matrix4x4::operator="],"argsstring":["(const Matrix3x3 &A)"],"name":["operator="],"detaileddescription":[{"para":["TEST::operatorEqualMatrix3x3 "]}],"description":"TEST::operatorEqualMatrix3x3  ","testName":"operatorEqualMatrix3x3","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorEqualMatrix3x3","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorEqualMatrix3x3"},"errorFlag":false},{"type":[{"ref":[{"_":"Matrix4x4","$":{"refid":"classdrider_s_d_k_1_1_matrix4x4","kindref":"compound"}}]}],"definition":["Matrix4x4 driderSDK::Matrix4x4::operator+"],"argsstring":["(const Matrix4x4 &A) const"],"name":["operator+"],"detaileddescription":[{"para":["TEST::operatorAdd "]}],"description":"TEST::operatorAdd  ","testName":"operatorAdd","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorAdd","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorAdd"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Matrix4x4","$":{"refid":"classdrider_s_d_k_1_1_matrix4x4","kindref":"compound"}}]}],"definition":["Matrix4x4 & driderSDK::Matrix4x4::operator+="],"argsstring":["(const Matrix4x4 &A)"],"name":["operator+="],"detaileddescription":[{"para":["TEST::operatorAddEqual "]}],"description":"TEST::operatorAddEqual  ","testName":"operatorAddEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorAddEqual","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorAddEqual"},"errorFlag":false},{"type":[{"ref":[{"_":"Matrix4x4","$":{"refid":"classdrider_s_d_k_1_1_matrix4x4","kindref":"compound"}}]}],"definition":["Matrix4x4 driderSDK::Matrix4x4::operator-"],"argsstring":["(const Matrix4x4 &A) const"],"name":["operator-"],"detaileddescription":[{"para":["TEST::operatorMinus "]}],"description":"TEST::operatorMinus  ","testName":"operatorMinus","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMinus","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorMinus"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Matrix4x4","$":{"refid":"classdrider_s_d_k_1_1_matrix4x4","kindref":"compound"}}]}],"definition":["Matrix4x4 & driderSDK::Matrix4x4::operator-="],"argsstring":["(const Matrix4x4 &A)"],"name":["operator-="],"detaileddescription":[{"para":["TEST::operatorMinusEqual "]}],"description":"TEST::operatorMinusEqual  ","testName":"operatorMinusEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMinusEqual","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorMinusEqual"},"errorFlag":false},{"type":[{"ref":[{"_":"Matrix4x4","$":{"refid":"classdrider_s_d_k_1_1_matrix4x4","kindref":"compound"}}]}],"definition":["Matrix4x4 driderSDK::Matrix4x4::operator*"],"argsstring":["(const Matrix4x4 &A) const"],"name":["operator*"],"detaileddescription":[{"para":["TEST::operatorMultiplication "]}],"description":"TEST::operatorMultiplication  ","testName":"operatorMultiplication","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMultiplication","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorMultiplication"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Matrix4x4","$":{"refid":"classdrider_s_d_k_1_1_matrix4x4","kindref":"compound"}}]}],"definition":["Matrix4x4 & driderSDK::Matrix4x4::operator*="],"argsstring":["(const Matrix4x4 &A)"],"name":["operator*="],"detaileddescription":[{"para":["TEST::operatorMultiplicationEqual "]}],"description":"TEST::operatorMultiplicationEqual  ","testName":"operatorMultiplicationEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMultiplicationEqual","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorMultiplicationEqual"},"errorFlag":false},{"type":[{"ref":[{"_":"Vector4D","$":{"refid":"classdrider_s_d_k_1_1_vector4_d","kindref":"compound"}}]}],"definition":["Vector4D driderSDK::Matrix4x4::operator*"],"argsstring":["(const Vector4D &S) const"],"name":["operator*"],"detaileddescription":[{"para":["TEST::operatorMultiplicationForVector4 "]}],"description":"TEST::operatorMultiplicationForVector4  ","testName":"operatorMultiplicationForVector4","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMultiplicationForVector4","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorMultiplicationForVector4"},"errorFlag":false},{"type":[{"ref":[{"_":"Matrix4x4","$":{"refid":"classdrider_s_d_k_1_1_matrix4x4","kindref":"compound"}}]}],"definition":["Matrix4x4 driderSDK::Matrix4x4::operator*"],"argsstring":["(const float S) const"],"name":["operator*"],"detaileddescription":[{"para":["TEST::operatorMultiplicationFloat "]}],"description":"TEST::operatorMultiplicationFloat  ","testName":"operatorMultiplicationFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMultiplicationFloat","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorMultiplicationFloat"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Matrix4x4","$":{"refid":"classdrider_s_d_k_1_1_matrix4x4","kindref":"compound"}}]}],"definition":["Matrix4x4 & driderSDK::Matrix4x4::operator*="],"argsstring":["(const float S)"],"name":["operator*="],"detaileddescription":[{"para":["TEST::operatorMultiplicationEqualFloat "]}],"description":"TEST::operatorMultiplicationEqualFloat  ","testName":"operatorMultiplicationEqualFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMultiplicationEqualFloat","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorMultiplicationEqualFloat"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Matrix4x4::operator=="],"argsstring":["(const Matrix4x4 &M)"],"name":["operator=="],"detaileddescription":[{"para":["TEST::operatorEqualEqual "]}],"description":"TEST::operatorEqualEqual  ","testName":"operatorEqualEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorEqualEqual","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorEqualEqual"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Matrix4x4::operator!="],"argsstring":["(const Matrix4x4 &M)"],"name":["operator!="],"detaileddescription":[{"para":["TEST::operatorNotEqual "]}],"description":"TEST::operatorNotEqual  ","testName":"operatorNotEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorNotEqual","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorNotEqual"},"errorFlag":false}],"testFile":"Nombre del test: Matrix4x4","testClase":{"name":"Matrix4x4","tests":"24","failures":"0","disabled":"0","errors":"0","time":"0.021","testCases":[{"data":{"name":"forceInit","status":"run","time":"0","classname":"Matrix4x4"},"name":"forceInit"},{"data":{"name":"moveConstructor","status":"run","time":"0","classname":"Matrix4x4"},"name":"moveConstructor"},{"data":{"name":"constructForMatrix4x4","status":"run","time":"0","classname":"Matrix4x4"},"name":"constructForMatrix4x4"},{"data":{"name":"constructFor16Floats","status":"run","time":"0","classname":"Matrix4x4"},"name":"constructFor16Floats"},{"data":{"name":"constructFor4Vectors","status":"run","time":"0","classname":"Matrix4x4"},"name":"constructFor4Vectors"},{"data":{"name":"destructor","status":"run","time":"0","classname":"Matrix4x4"},"name":"destructor"},{"data":{"name":"determinant","status":"run","time":"0","classname":"Matrix4x4"},"name":"determinant"},{"data":{"name":"inverse","status":"run","time":"0","classname":"Matrix4x4"},"name":"inverse"},{"data":{"name":"identity","status":"run","time":"0","classname":"Matrix4x4"},"name":"identity"},{"data":{"name":"getPointer","status":"run","time":"0","classname":"Matrix4x4"},"name":"getPointer"},{"data":{"name":"getPointerConst","status":"run","time":"0","classname":"Matrix4x4"},"name":"getPointerConst"},{"data":{"name":"operatorEqual","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorEqual"},{"data":{"name":"operatorEqualMatrix3x3","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorEqualMatrix3x3"},{"data":{"name":"operatorAdd","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorAdd"},{"data":{"name":"operatorAddEqual","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorAddEqual"},{"data":{"name":"operatorMinus","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorMinus"},{"data":{"name":"operatorMinusEqual","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorMinusEqual"},{"data":{"name":"operatorMultiplication","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorMultiplication"},{"data":{"name":"operatorMultiplicationEqual","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorMultiplicationEqual"},{"data":{"name":"operatorMultiplicationForVector4","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorMultiplicationForVector4"},{"data":{"name":"operatorMultiplicationFloat","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorMultiplicationFloat"},{"data":{"name":"operatorMultiplicationEqualFloat","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorMultiplicationEqualFloat"},{"data":{"name":"operatorEqualEqual","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorEqualEqual"},{"data":{"name":"operatorNotEqual","status":"run","time":"0","classname":"Matrix4x4"},"name":"operatorNotEqual"}]}},{"name":"MatrixNxM","functions":[{"type":[""],"definition":["driderSDK::MatrixNxM< _rows, _cols >::MatrixNxM"],"argsstring":["()"],"name":["MatrixNxM"],"detaileddescription":[{"para":["Default constructor. "]}],"description":"Default constructor.  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::MatrixNxM< _rows, _cols >::MatrixNxM"],"argsstring":["(float _scalar)"],"name":["MatrixNxM"],"detaileddescription":[{"para":["Constructor using a scalar value.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["_scalar"]}],"parameterdescription":[{"para":["All the elements of the matrix are initialized to this value. "]}]}]}]}]}],"description":"Constructor using a scalar value. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::MatrixNxM< _rows, _cols >::MatrixNxM"],"argsstring":["(const VectorN< _cols > &_vec)"],"name":["MatrixNxM"],"detaileddescription":[{"para":["Constructor using a vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["_vec"]}],"parameterdescription":[{"para":["All the rows of the matrix are initialized to this vector. "]}]}]}]}]}],"description":"Constructor using a vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":"FORCEINLINE < _cols > &","ref":[{"_":"VectorN","$":{"refid":"classdrider_s_d_k_1_1_vector_n","kindref":"compound"}}]}],"definition":["FORCEINLINE VectorN<_cols>& driderSDK::MatrixNxM< _rows, _cols >::operator[]"],"argsstring":["(SizeT row)"],"name":["operator[]"],"detaileddescription":[{"para":["Gets a reference to the specified row (Vector) from the matrix.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["row"]}],"parameterdescription":[{"para":["The index of the row."]}]}]},{"$":{"kind":"exception"},"parameteritem":[{"parameternamelist":[{"parametername":["out_of_range"]}],"parameterdescription":[{"para":["If the row is greater than number of rows in the matrix. "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to the element at the [row] position."]}]}]}],"description":"Gets a reference to the specified row (Vector) from the matrix. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":"FORCEINLINE const < _cols > &","ref":[{"_":"VectorN","$":{"refid":"classdrider_s_d_k_1_1_vector_n","kindref":"compound"}}]}],"definition":["FORCEINLINE const VectorN<_cols>& driderSDK::MatrixNxM< _rows, _cols >::operator[]"],"argsstring":["(SizeT row) const"],"name":["operator[]"],"detaileddescription":[{"para":["Gets a const reference to the specified row (Vector) from the matrix.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["row"]}],"parameterdescription":[{"para":["The index of the row."]}]}]},{"$":{"kind":"exception"},"parameteritem":[{"parameternamelist":[{"parametername":["out_of_range"]}],"parameterdescription":[{"para":["If the row is greater than number of rows in the matrix. "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A const reference to the element at the [row] position."]}]}]}],"description":"Gets a const reference to the specified row (Vector) from the matrix. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["FORCEINLINE SizeT"],"definition":["FORCEINLINE SizeT driderSDK::MatrixNxM< _rows, _cols >::rows"],"argsstring":["() const"],"name":["rows"],"detaileddescription":[{"para":["Gets the number of rows in the matrix.",{"simplesect":[{"$":{"kind":"return"},"para":["The number of rows in the matrix. "]}]}]}],"description":"Gets the number of rows in the matrix. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["FORCEINLINE SizeT"],"definition":["FORCEINLINE SizeT driderSDK::MatrixNxM< _rows, _cols >::cols"],"argsstring":["() const"],"name":["cols"],"detaileddescription":[{"para":["Gets the number of columns in the matrix.",{"simplesect":[{"$":{"kind":"return"},"para":["The number of columns in the matrix. "]}]}]}],"description":"Gets the number of columns in the matrix. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":"FORCEINLINE < _cols, _rows >","ref":[{"_":"MatrixNxM","$":{"refid":"classdrider_s_d_k_1_1_matrix_nx_m","kindref":"compound"}}]}],"definition":["FORCEINLINE MatrixNxM<_cols, _rows> driderSDK::MatrixNxM< _rows, _cols >::transpose"],"argsstring":["() const"],"name":["transpose"],"detaileddescription":[{"para":["Gets the transposed matrix.",{"simplesect":[{"$":{"kind":"return"},"para":["The matrix transposed. "]}]}]}],"description":"Gets the transposed matrix. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["FORCEINLINE float *"],"definition":["FORCEINLINE float* driderSDK::MatrixNxM< _rows, _cols >::ptr"],"argsstring":["()"],"name":["ptr"],"detaileddescription":[{"para":["Gets a pointer to the first element of the matrix.",{"simplesect":[{"$":{"kind":"return"},"para":["A pointer to the first element of the matrix. "]}]}]}],"description":"Gets a pointer to the first element of the matrix. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["FORCEINLINE const float *"],"definition":["FORCEINLINE const float* driderSDK::MatrixNxM< _rows, _cols >::ptr"],"argsstring":["() const"],"name":["ptr"],"detaileddescription":[{"para":["Gets a constant pointer to the first element of the matrix.",{"simplesect":[{"$":{"kind":"return"},"para":["A constant pointer to the first element of the matrix. "]}]}]}],"description":"Gets a constant pointer to the first element of the matrix. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":"FORCEINLINE  &","ref":[{"_":"MatrixNxM","$":{"refid":"classdrider_s_d_k_1_1_matrix_nx_m","kindref":"compound"}}]}],"definition":["FORCEINLINE MatrixNxM& driderSDK::MatrixNxM< _rows, _cols >::operator*="],"argsstring":["(float scalar)"],"name":["operator*="],"detaileddescription":[{"para":["Overload of binary operator *=.","This overload performs the multiplication assignment by scalar to each row of the matrix.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["Right side operand (a scalar)"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to (*this). "]}]}]}],"description":"Overload of binary operator *=. This overload performs the multiplication assignment by scalar to each row of the matrix. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":"FORCEINLINE  &","ref":[{"_":"MatrixNxM","$":{"refid":"classdrider_s_d_k_1_1_matrix_nx_m","kindref":"compound"}}]}],"definition":["FORCEINLINE MatrixNxM& driderSDK::MatrixNxM< _rows, _cols >::operator/="],"argsstring":["(float scalar)"],"name":["operator/="],"detaileddescription":[{"para":["Overload of binary operator /=.","This overload performs the division assignment by scalar to each row of the matrix.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["Right side operand (a scalar)"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to (*this). "]}]}]}],"description":"Overload of binary operator /=. This overload performs the division assignment by scalar to each row of the matrix. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":"FORCEINLINE < _rows >","ref":[{"_":"VectorN","$":{"refid":"classdrider_s_d_k_1_1_vector_n","kindref":"compound"}}]}],"definition":["FORCEINLINE VectorN<_rows> driderSDK::MatrixNxM< _rows, _cols >::operator*"],"argsstring":["(const VectorN< _cols > &rhs)"],"name":["operator*"],"detaileddescription":[{"para":["Overload of binary operator *.","This overload performs the matrix-vector product.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["rhs"]}],"parameterdescription":[{"para":["Right side operand (a vector with M (number of _cols of (*this)) elements."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["The transformed vector. "]}]}]}],"description":"Overload of binary operator *. This overload performs the matrix-vector product. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["FORCEINLINE bool"],"definition":["FORCEINLINE bool driderSDK::MatrixNxM< _rows, _cols >::operator=="],"argsstring":["(const MatrixNxM &rhs)"],"name":["operator=="],"detaileddescription":[{"para":["Overload of binary operator ==.","This overload performs a memberwise equality comparision.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["rhs"]}],"parameterdescription":[{"para":["Right operand (a matrice of the same size with which the rows are compared)."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if all rows of *this matrix are equal to all rows of rhs matrix, false otherwise. "]}]}]}],"description":"Overload of binary operator ==. This overload performs a memberwise equality comparision. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["FORCEINLINE bool"],"definition":["FORCEINLINE bool driderSDK::MatrixNxM< _rows, _cols >::operator!="],"argsstring":["(const MatrixNxM &rhs)"],"name":["operator!="],"detaileddescription":[{"para":["Overload of binary operator ==.","This overload performs a memberwise inequality comparision.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["rhs"]}],"parameterdescription":[{"para":["Right operand (a matrice of the same size with which the rows are compared)."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if a row of *this matrix is unequal to a row of rhs matrix, false otherwise. "]}]}]}],"description":"Overload of binary operator ==. This overload performs a memberwise inequality comparision. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"No existe Test con el nombre de la clase"},{"name":"Module","functions":[{"type":["T &"],"definition":["static T& driderSDK::Module< T >::instance"],"argsstring":["()"],"name":["instance"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["T *"],"definition":["static T* driderSDK::Module< T >::instancePtr"],"argsstring":["()"],"name":["instancePtr"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["void"],"definition":["static void driderSDK::Module< T >::startUp"],"argsstring":["(Args &&...args)"],"name":["startUp"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["void"],"definition":["static void driderSDK::Module< T >::startUp"],"argsstring":["(Args &&...args)"],"name":["startUp"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["void"],"definition":["static void driderSDK::Module< T >::shutDown"],"argsstring":["()"],"name":["shutDown"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["static bool driderSDK::Module< T >::isStarted"],"argsstring":["()"],"name":["isStarted"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::Module< T >::Module"],"argsstring":["()"],"name":["Module"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["virtual driderSDK::Module< T >::~Module"],"argsstring":["()"],"name":["~Module"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::Module< T >::Module"],"argsstring":["(const Module &)"],"name":["Module"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":" &","ref":[{"_":"Module","$":{"refid":"classdrider_s_d_k_1_1_module","kindref":"compound"}}]}],"definition":["Module& driderSDK::Module< T >::operator="],"argsstring":["(const Module &)"],"name":["operator="],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["void"],"definition":["virtual void driderSDK::Module< T >::onStartUp"],"argsstring":["()"],"name":["onStartUp"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["void"],"definition":["virtual void driderSDK::Module< T >::onShutDown"],"argsstring":["()"],"name":["onShutDown"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["T *&"],"definition":["static T*& driderSDK::Module< T >::_instance"],"argsstring":["()"],"name":["_instance"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool &"],"definition":["static bool& driderSDK::Module< T >::isDestroyed"],"argsstring":["()"],"name":["isDestroyed"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool &"],"definition":["static bool& driderSDK::Module< T >::isShutDown"],"argsstring":["()"],"name":["isShutDown"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"No existe Test con el nombre de la clase"},{"name":"Parser","functions":[{"type":["const char *"],"definition":["const char * driderSDK::Parser::strStr"],"argsstring":["(const char *str1, const char *str2)"],"name":["strStr"],"detaileddescription":[{"para":["TEST::parserCompareAndStrstr Find in string other string.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["str1"]}],"parameterdescription":[{"para":["Buffer where string will be searched."]}]},{"parameternamelist":[{"parametername":["str2"]}],"parameterdescription":[{"para":["String to compare."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["if the string str2 exist in buffer str1 return the pointer to the first, else return null. "]}]}]}],"description":"TEST::parserCompareAndStrstr Find in string other string. [object Object] ","testName":"parserCompareAndStrstr","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"parserCompareAndStrstr","status":"run","time":"0","classname":"Parser"},"name":"parserCompareAndStrstr"},"errorFlag":false},{"type":["char *"],"definition":["char * driderSDK::Parser::strCpyBetween"],"argsstring":["(const char *source, const char *strFrom, const char *strTo, char *&destinationOut)"],"name":["strCpyBetween"],"detaileddescription":[{"para":["TEST::parserStrCpyBetween Copy a string between two strings.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["source"]}],"parameterdescription":[{"para":["String container."]}]},{"parameternamelist":[{"parametername":["strFrom"]}],"parameterdescription":[{"para":["Start string (no incluided in return)."]}]},{"parameternamelist":[{"parametername":["source"]}],"parameterdescription":[{"para":["Last string (no incluided in return)."]}]},{"parameternamelist":[{"parametername":["destinationOut"]}],"parameterdescription":[{"para":["Destination string."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["If successful return the destinationOut, otherwise return null. "]}]}]}],"description":"TEST::parserStrCpyBetween Copy a string between two strings. [object Object] ","testName":"parserStrCpyBetween","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"parserStrCpyBetween","status":"run","time":"0","classname":"Parser"},"name":"parserStrCpyBetween"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Parser::compare"],"argsstring":["(const char *str1, const char *str2)"],"name":["compare"],"detaileddescription":[{"para":["TEST::parserCompareAndStrstr Compares two strings.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["str1"]}],"parameterdescription":[{"para":["First string."]}]},{"parameternamelist":[{"parametername":["strFrom"]}],"parameterdescription":[{"para":["Second string."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["If successful return 0, otherwise return other value. "]}]}]}],"description":"TEST::parserCompareAndStrstr Compares two strings. [object Object] ","testName":"parserCompareAndStrstr","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"parserCompareAndStrstr","status":"run","time":"0","classname":"Parser"},"name":"parserCompareAndStrstr"},"errorFlag":false},{"type":["Int32 FORCEINLINE"],"definition":["static Int32 FORCEINLINE driderSDK::Parser::stringToInt32"],"argsstring":["(const char *str)"],"name":["stringToInt32"],"detaileddescription":[{"para":["TEST::parserStringToInt32 Parse a string to a Int32.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["str"]}],"parameterdescription":[{"para":["String to parse."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["The string parsed. "]}]}]}],"description":"TEST::parserStringToInt32 Parse a string to a Int32. [object Object] ","testName":"parserStringToInt32","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"parserStringToInt32","status":"run","time":"0","classname":"Parser"},"name":"parserStringToInt32"},"errorFlag":false},{"type":["float FORCEINLINE"],"definition":["static float FORCEINLINE driderSDK::Parser::stringToFloat"],"argsstring":["(const char *str)"],"name":["stringToFloat"],"detaileddescription":[{"para":["TEST::parserStringToFloat; Parse a string to a float.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["str"]}],"parameterdescription":[{"para":["String to parse."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["On success, the function returns the converted integral number as an int value. If the converted value would be out of the range of representable values by an int, it causes undefined behavior. "]}]}]}],"description":"TEST::parserStringToFloat; Parse a string to a float. [object Object] ","testName":"parserStringToFloat;","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["char *"],"definition":["static char* driderSDK::Parser::Parser::addUntilFind"],"argsstring":["(const char *source, const char *delimiter, char *&strOut)"],"name":["Parser::addUntilFind"],"detaileddescription":[{"para":["TEST::parserAddUntilFind Add a string's characters to a buffer until you find a delimiter.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["source"]}],"parameterdescription":[{"para":["Buffer to be checked."]}]},{"parameternamelist":[{"parametername":["delimiter"]}],"parameterdescription":[{"para":["Delimiter."]}]},{"parameternamelist":[{"parametername":["strOut"]}],"parameterdescription":[{"para":["The string created."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["The string created. "]}]}]}],"description":"TEST::parserAddUntilFind Add a string's characters to a buffer until you find a delimiter. [object Object] ","testName":"parserAddUntilFind","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"parserAddUntilFind","status":"run","time":"0","classname":"Parser"},"name":"parserAddUntilFind"},"errorFlag":false},{"type":["std::vector< std::string >"],"definition":["std::vector< std::string > driderSDK::Parser::split"],"argsstring":["(char *str, const char *divider)"],"name":["split"],"detaileddescription":[{"para":["TEST::parserSplit Divede in strings other string where ther is a diveder character.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["str"]}],"parameterdescription":[{"para":["Buffer to be checked."]}]},{"parameternamelist":[{"parametername":["divider"]}],"parameterdescription":[{"para":["Delimiter of each string."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["std::vector with the string created. "]}]}]}],"description":"TEST::parserSplit Divede in strings other string where ther is a diveder character. [object Object] ","testName":"parserSplit","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"parserSplit","status":"run","time":"0","classname":"Parser"},"name":"parserSplit"},"errorFlag":false},{"type":["char *"],"definition":["char * driderSDK::Parser::strCopy"],"argsstring":["(char *des, const char *source)"],"name":["strCopy"],"detaileddescription":[{"para":["TEST::strcpy Divede in strings other string where ther is a diveder character.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["str"]}],"parameterdescription":[{"para":["Buffer to be checked."]}]},{"parameternamelist":[{"parametername":["divider"]}],"parameterdescription":[{"para":["Delimiter of each string."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["std::vector with the string created. "]}]}]}],"description":"TEST::strcpy Divede in strings other string where ther is a diveder character. [object Object] ","testName":"strcpy","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"Nombre del test: Parser","testClase":{"name":"Parser","tests":"6","failures":"0","disabled":"0","errors":"0","time":"0.002","testCases":[{"data":{"name":"parserCompareAndStrstr","status":"run","time":"0","classname":"Parser"},"name":"parserCompareAndStrstr"},{"data":{"name":"parserStrCpyBetween","status":"run","time":"0","classname":"Parser"},"name":"parserStrCpyBetween"},{"data":{"name":"parserStringToInt32","status":"run","time":"0","classname":"Parser"},"name":"parserStringToInt32"},{"data":{"name":"parserStringToFloat","status":"run","time":"0","classname":"Parser"},"name":"parserStringToFloat"},{"data":{"name":"parserAddUntilFind","status":"run","time":"0","classname":"Parser"},"name":"parserAddUntilFind"},{"data":{"name":"parserSplit","status":"run","time":"0","classname":"Parser"},"name":"parserSplit"}]}},{"name":"Plane","functions":[{"type":[""],"definition":["driderSDK::Plane::Plane"],"argsstring":["()"],"name":["Plane"],"detaileddescription":[{"para":["Default constructor. "]}],"description":"Default constructor.  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::Plane::Plane"],"argsstring":["(const Vector3D &_normal, float _d)"],"name":["Plane"],"detaileddescription":[{"para":["Constructor which takes a normal and a gap . "]}],"description":"Constructor which takes a normal and a gap .  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::Plane::Plane"],"argsstring":["(const Vector3D &_normal, const Vector3D &point)"],"name":["Plane"],"detaileddescription":[{"para":["Constructor using a normal and a point to calculate the gap. "]}],"description":"Constructor using a normal and a point to calculate the gap.  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::Plane::Plane"],"argsstring":["(const Vector3D &point0, const Vector3D &point1, const Vector3D &point2)"],"name":["Plane"],"detaileddescription":[{"para":["Constructor using 3 points in the plane which are used to calculate the normal of the plane and the gap. "]}],"description":"Constructor using 3 points in the plane which are used to calculate the normal of the plane and the gap.  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::Plane::Plane"],"argsstring":["(const Plane &other)"],"name":["Plane"],"detaileddescription":[{"para":["Copy constructor "]}],"description":"Copy constructor  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["void"],"definition":["void driderSDK::Plane::compute"],"argsstring":["(const Vector3D &point0, const Vector3D &point1, const Vector3D &point2)"],"name":["compute"],"detaileddescription":[{"para":["Computes the normal and gap of the plain from 3 points. "]}],"description":"Computes the normal and gap of the plain from 3 points.  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::Plane::~Plane"],"argsstring":["()"],"name":["~Plane"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["void"],"definition":["void driderSDK::Plane::compute"],"argsstring":["(const Vector3D &_normal, const Vector3D &point)"],"name":["compute"],"detaileddescription":[{"para":["Computes the normal and gap of the plain from a normal and 1 point. "]}],"description":"Computes the normal and gap of the plain from a normal and 1 point.  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["float"],"definition":["float driderSDK::Plane::distanceToPoint"],"argsstring":["(const Vector3D &point)"],"name":["distanceToPoint"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["PLANE_INTERSECT::E"],"definition":["PLANE_INTERSECT::E driderSDK::Plane::intersects"],"argsstring":["(const Vector3D &point)"],"name":["intersects"],"detaileddescription":[{"para":["Computes the relationship between a point and the plane.",{"simplesect":[{"$":{"kind":"return"},"para":["The relationship of the point with the plane. "]}]}]}],"description":"Computes the relationship between a point and the plane. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Plane::intersects"],"argsstring":["(const Plane &other)"],"name":["intersects"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Plane::intersects"],"argsstring":["(const Sphere &sphere)"],"name":["intersects"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Plane::intersects"],"argsstring":["(const AABB &aabb)"],"name":["intersects"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Plane::intersects"],"argsstring":["(const Capsule &capsule)"],"name":["intersects"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Plane::intersects"],"argsstring":["(const Frustrum &frustrum)"],"name":["intersects"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Plane::intersects"],"argsstring":["(const Ray &ray)"],"name":["intersects"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["void"],"definition":["void driderSDK::Plane::normalize"],"argsstring":["()"],"name":["normalize"],"detaileddescription":[{"para":["Normalizes the plane. This modifies the normal and the gap. "]}],"description":"Normalizes the plane. This modifies the normal and the gap.  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":" &","ref":[{"_":"Plane","$":{"refid":"classdrider_s_d_k_1_1_plane","kindref":"compound"}}]}],"definition":["Plane & driderSDK::Plane::operator="],"argsstring":["(const Plane &other)"],"name":["operator="],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Plane::operator=="],"argsstring":["(const Plane &rhs)"],"name":["operator=="],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Plane::operator!="],"argsstring":["(const Plane &rhs)"],"name":["operator!="],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"No existe Test con el nombre de la clase"},{"name":"Polygon","functions":[{"type":[""],"definition":["driderSDK::Polygon::Polygon"],"argsstring":["()"],"name":["Polygon"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::Polygon::~Polygon"],"argsstring":["()"],"name":["~Polygon"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"No existe Test con el nombre de la clase"},{"name":"Pool","functions":[{"type":[""],"definition":["driderSDK::Pool< T, poolSize >::Pool"],"argsstring":["()"],"name":["Pool"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["T *"],"definition":["T* driderSDK::Pool< T, poolSize >::aquire"],"argsstring":["()"],"name":["aquire"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"No existe Test con el nombre de la clase"},{"name":"Quaternion","functions":[{"type":[""],"definition":["driderSDK::Quaternion::Quaternion"],"argsstring":["()"],"name":["Quaternion"],"detaileddescription":[{"para":["TEST::defaultConstructor Default constructor. "]}],"description":"TEST::defaultConstructor Default constructor.  ","testName":"defaultConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"defaultConstructor","status":"run","time":"0","classname":"Quaternion"},"name":"defaultConstructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Quaternion::Quaternion"],"argsstring":["(Math::FORCE_INIT k)"],"name":["Quaternion"],"detaileddescription":[{"para":["TEST::forceInitZero Default constructor",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["k"]}],"parameterdescription":[{"para":["Values are initialized with 0(kZero) or identity quaternion(kIdentity) "]}]}]}]}]}],"description":"TEST::forceInitZero Default constructor [object Object] ","testName":"forceInitZero","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"forceInitZero","status":"run","time":"0","classname":"Quaternion"},"name":"forceInitZero"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Quaternion::Quaternion"],"argsstring":["(Quaternion &&Q)=default"],"name":["Quaternion"],"detaileddescription":[{"para":["TEST::moveConstructor Move constructor. "]}],"description":"TEST::moveConstructor Move constructor.  ","testName":"moveConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"moveConstructor","status":"run","time":"0","classname":"Quaternion"},"name":"moveConstructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Quaternion::Quaternion"],"argsstring":["(const Quaternion &Q)"],"name":["Quaternion"],"detaileddescription":[{"para":["TEST::constructFromQuaternion Copy constructor. "]}],"description":"TEST::constructFromQuaternion Copy constructor.  ","testName":"constructFromQuaternion","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"constructFromQuaternion","status":"run","time":"0","classname":"Quaternion"},"name":"constructFromQuaternion"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Quaternion::Quaternion"],"argsstring":["(float _x, float _y, float _z, float _w)"],"name":["Quaternion"],"detaileddescription":[{"para":["TEST::constructFrom4floats Initialize the constructor with the given values.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["_x"]}],"parameterdescription":[{"para":["The x value of the quaternion."]}]},{"parameternamelist":[{"parametername":["_y"]}],"parameterdescription":[{"para":["The y value of the quaternion."]}]},{"parameternamelist":[{"parametername":["_z"]}],"parameterdescription":[{"para":["The z value of the quaternion."]}]},{"parameternamelist":[{"parametername":["_w"]}],"parameterdescription":[{"para":["The w value of the quaternion. "]}]}]}]}]}],"description":"TEST::constructFrom4floats Initialize the constructor with the given values. [object Object] ","testName":"constructFrom4floats","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"constructFrom4floats","status":"run","time":"0","classname":"Quaternion"},"name":"constructFrom4floats"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Quaternion::Quaternion"],"argsstring":["(const Vector4D &V)"],"name":["Quaternion"],"detaileddescription":[{"para":["TEST::constructFromVector4D Initialize the constructor with a vector4D",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["V"]}],"parameterdescription":[{"para":["The vector to construct the quaternion "]}]}]}]}]}],"description":"TEST::constructFromVector4D Initialize the constructor with a vector4D [object Object] ","testName":"constructFromVector4D","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"constructFromVector4D","status":"run","time":"0","classname":"Quaternion"},"name":"constructFromVector4D"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Quaternion::~Quaternion"],"argsstring":["()"],"name":["~Quaternion"],"detaileddescription":[{"para":["TEST::destructor Default destructor. "]}],"description":"TEST::destructor Default destructor.  ","testName":"destructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"destructor","status":"run","time":"0","classname":"Quaternion"},"name":"destructor"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Quaternion::measure"],"argsstring":["()"],"name":["measure"],"detaileddescription":[{"para":["TEST::measure Computes the measure of the quaternion.",{"simplesect":[{"$":{"kind":"return"},"para":[{"_":"'s lenght. ","ref":[{"_":"Quaternion","$":{"refid":"classdrider_s_d_k_1_1_quaternion","kindref":"compound"}}]}]}]}]}],"description":"TEST::measure Computes the measure of the quaternion. [object Object] ","testName":"measure","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"measure","status":"run","time":"0","classname":"Quaternion"},"name":"measure"},"errorFlag":false},{"type":[{"ref":[{"_":"Quaternion","$":{"refid":"classdrider_s_d_k_1_1_quaternion","kindref":"compound"}}]}],"definition":["Quaternion driderSDK::Quaternion::conjugate"],"argsstring":["()"],"name":["conjugate"],"detaileddescription":[{"para":["TEST::conjugate Computes the conjugate of the quaternion.",{"simplesect":[{"$":{"kind":"return"},"para":["The conjugate quaternion. "]}]}]}],"description":"TEST::conjugate Computes the conjugate of the quaternion. [object Object] ","testName":"conjugate","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"conjugate","status":"run","time":"0","classname":"Quaternion"},"name":"conjugate"},"errorFlag":false},{"type":["void"],"definition":["void driderSDK::Quaternion::normalize"],"argsstring":["()"],"name":["normalize"],"detaileddescription":[{"para":["TEST::normalize Normalize the quaternion. "]}],"description":"TEST::normalize Normalize the quaternion.  ","testName":"normalize","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"normalize","status":"run","time":"0","classname":"Quaternion"},"name":"normalize"},"errorFlag":false},{"type":[{"ref":[{"_":"Quaternion","$":{"refid":"classdrider_s_d_k_1_1_quaternion","kindref":"compound"}}]}],"definition":["Quaternion driderSDK::Quaternion::rotation"],"argsstring":["(float theta, const Quaternion &A)"],"name":["rotation"],"detaileddescription":[{"para":["TEST::rotation Rotates the quaternion given theta and another quaternion.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["theta"]}],"parameterdescription":[{"para":["Angle of rotation."]}]},{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The other quaternion to generate an axis."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A rotated quaternion. "]}]}]}],"description":"TEST::rotation Rotates the quaternion given theta and another quaternion. [object Object] ","testName":"rotation","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"rotation","status":"run","time":"0.003","classname":"Quaternion"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:13\r\n      Expected: TestQuaternion.x\r\n      Which is: 0\r\nTo be equal to: x\r\n      Which is: 1","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:13\n      Expected: TestQuaternion.x\n      Which is: 0\nTo be equal to: x\n      Which is: 1","type":""}},{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:15\r\n      Expected: TestQuaternion.z\r\n      Which is: 1\r\nTo be equal to: z\r\n      Which is: 0","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:15\n      Expected: TestQuaternion.z\n      Which is: 1\nTo be equal to: z\n      Which is: 0","type":""}}],"name":"rotation"},"errorFlag":true},{"type":["void"],"definition":["void driderSDK::Quaternion::matrixFromQuaternion"],"argsstring":["(Matrix4x4 &MatrixOut)"],"name":["matrixFromQuaternion"],"detaileddescription":[{"para":["TEST::matrixFromQuaternion4x4 Creates a 4D matrix from the quaternion.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["MatrixOut"]}],"parameterdescription":[{"para":[{"_":" to be filled. ","ref":[{"_":"Matrix4x4","$":{"refid":"classdrider_s_d_k_1_1_matrix4x4","kindref":"compound"}}]}]}]}]}]}]}],"description":"TEST::matrixFromQuaternion4x4 Creates a 4D matrix from the quaternion. [object Object] ","testName":"matrixFromQuaternion4x4","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"matrixFromQuaternion4x4","status":"run","time":"0","classname":"Quaternion"},"name":"matrixFromQuaternion4x4"},"errorFlag":false},{"type":["void"],"definition":["void driderSDK::Quaternion::matrixFromQuaternion"],"argsstring":["(Matrix3x3 &MatrixOut)"],"name":["matrixFromQuaternion"],"detaileddescription":[{"para":["TEST::matrixFromQuaternion3x3 Creates a 3D matrix from the quaternion.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["MatrixOut"]}],"parameterdescription":[{"para":[{"_":" to be filled. ","ref":[{"_":"Matrix3x3","$":{"refid":"classdrider_s_d_k_1_1_matrix3x3","kindref":"compound"}}]}]}]}]}]}]}],"description":"TEST::matrixFromQuaternion3x3 Creates a 3D matrix from the quaternion. [object Object] ","testName":"matrixFromQuaternion3x3","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"matrixFromQuaternion3x3","status":"run","time":"0","classname":"Quaternion"},"name":"matrixFromQuaternion3x3"},"errorFlag":false},{"type":["float *"],"definition":["float * driderSDK::Quaternion::ptr"],"argsstring":["()"],"name":["ptr"],"detaileddescription":[{"para":["Gets a pointer to the first element of the quaternion.",{"simplesect":[{"$":{"kind":"return"},"para":["A pointer to the first element. "]}]}]}],"description":"Gets a pointer to the first element of the quaternion. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["const float *"],"definition":["const float * driderSDK::Quaternion::ptr"],"argsstring":["() const"],"name":["ptr"],"detaileddescription":[{"para":["Gets a constant pointer to the first element of the quaternion.",{"simplesect":[{"$":{"kind":"return"},"para":["A constant pointer to the first element. "]}]}]}],"description":"Gets a constant pointer to the first element of the quaternion. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["float &"],"definition":["float & driderSDK::Quaternion::operator[]"],"argsstring":["(const SizeT index)"],"name":["operator[]"],"detaileddescription":[{"para":["TEST::operatorBrackets Gets a reference to a specific element of the quaternion.",{"simplesect":[{"$":{"kind":"return"},"para":["Reference to an element of the quaternion. "]}]}]}],"description":"TEST::operatorBrackets Gets a reference to a specific element of the quaternion. [object Object] ","testName":"operatorBrackets","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorBrackets","status":"run","time":"0","classname":"Quaternion"},"name":"operatorBrackets"},"errorFlag":false},{"type":["const float &"],"definition":["const float & driderSDK::Quaternion::operator[]"],"argsstring":["(const SizeT index) const"],"name":["operator[]"],"detaileddescription":[{"para":["Gets a constant reference to a specific element of the quaternion.",{"simplesect":[{"$":{"kind":"return"},"para":["Constant reference to an element of the quaternion. "]}]}]}],"description":"Gets a constant reference to a specific element of the quaternion. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"ref":[{"_":"Quaternion","$":{"refid":"classdrider_s_d_k_1_1_quaternion","kindref":"compound"}}]}],"definition":["Quaternion driderSDK::Quaternion::operator+"],"argsstring":["(const Quaternion &Q) const"],"name":["operator+"],"detaileddescription":[{"para":["TEST::operatorAdd Adds two quaternions.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["Q"]}],"parameterdescription":[{"para":["The other quaternion."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["The result quaternion of the operation. "]}]}]}],"description":"TEST::operatorAdd Adds two quaternions. [object Object] ","testName":"operatorAdd","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorAdd","status":"run","time":"0","classname":"Quaternion"},"name":"operatorAdd"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Quaternion","$":{"refid":"classdrider_s_d_k_1_1_quaternion","kindref":"compound"}}]}],"definition":["Quaternion & driderSDK::Quaternion::operator+="],"argsstring":["(const Quaternion &Q)"],"name":["operator+="],"detaileddescription":[{"para":["TEST::operatorAddEquals Adds two quaternions and stores the result in this quaternion",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["Q"]}],"parameterdescription":[{"para":["The other quaternion."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this quaternion "]}]}]}],"description":"TEST::operatorAddEquals Adds two quaternions and stores the result in this quaternion [object Object] ","testName":"operatorAddEquals","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorAddEquals","status":"run","time":"0","classname":"Quaternion"},"name":"operatorAddEquals"},"errorFlag":false},{"type":[{"ref":[{"_":"Quaternion","$":{"refid":"classdrider_s_d_k_1_1_quaternion","kindref":"compound"}}]}],"definition":["Quaternion driderSDK::Quaternion::operator-"],"argsstring":["(const Quaternion &Q) const"],"name":["operator-"],"detaileddescription":[{"para":["TEST::operatorMinus Substracts two quaternions.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["Q"]}],"parameterdescription":[{"para":["The other quaternion."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["The result quaternion of the operation. "]}]}]}],"description":"TEST::operatorMinus Substracts two quaternions. [object Object] ","testName":"operatorMinus","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMinus","status":"run","time":"0","classname":"Quaternion"},"name":"operatorMinus"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Quaternion","$":{"refid":"classdrider_s_d_k_1_1_quaternion","kindref":"compound"}}]}],"definition":["Quaternion & driderSDK::Quaternion::operator-="],"argsstring":["(const Quaternion &Q)"],"name":["operator-="],"detaileddescription":[{"para":["TEST::operatorMinusEquals Substracts two quaternions and stores the result in this quaternion",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["Q"]}],"parameterdescription":[{"para":["The other quaternion."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this quaternion "]}]}]}],"description":"TEST::operatorMinusEquals Substracts two quaternions and stores the result in this quaternion [object Object] ","testName":"operatorMinusEquals","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMinusEquals","status":"run","time":"0","classname":"Quaternion"},"name":"operatorMinusEquals"},"errorFlag":false},{"type":[{"ref":[{"_":"Quaternion","$":{"refid":"classdrider_s_d_k_1_1_quaternion","kindref":"compound"}}]}],"definition":["Quaternion driderSDK::Quaternion::operator*"],"argsstring":["(const Quaternion &Q) const"],"name":["operator*"],"detaileddescription":[{"para":["TEST::operatorMultiplyByQuaternion Multiplies two quaternions.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["Q"]}],"parameterdescription":[{"para":["The other quaternion."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["The result quaternion of the operation. "]}]}]}],"description":"TEST::operatorMultiplyByQuaternion Multiplies two quaternions. [object Object] ","testName":"operatorMultiplyByQuaternion","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMultiplyByQuaternion","status":"run","time":"0","classname":"Quaternion"},"name":"operatorMultiplyByQuaternion"},"errorFlag":false},{"type":[{"ref":[{"_":"Quaternion","$":{"refid":"classdrider_s_d_k_1_1_quaternion","kindref":"compound"}}]}],"definition":["Quaternion driderSDK::Quaternion::operator*"],"argsstring":["(float s) const"],"name":["operator*"],"detaileddescription":[{"para":["TEST::operatorMultiplyByScalar Multiplies quaternion with an scalar.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["s"]}],"parameterdescription":[{"para":["The value to operate with."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["The result quaternion of the operation. "]}]}]}],"description":"TEST::operatorMultiplyByScalar Multiplies quaternion with an scalar. [object Object] ","testName":"operatorMultiplyByScalar","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMultiplyByScalar","status":"run","time":"0","classname":"Quaternion"},"name":"operatorMultiplyByScalar"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Quaternion","$":{"refid":"classdrider_s_d_k_1_1_quaternion","kindref":"compound"}}]}],"definition":["Quaternion & driderSDK::Quaternion::operator*="],"argsstring":["(const Quaternion &Q)"],"name":["operator*="],"detaileddescription":[{"para":["TEST::operatorMultiplyByQuaternionEquals Multiplies two quaternions and stores the result in this quaternion",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["Q"]}],"parameterdescription":[{"para":["The other quaternion."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this quaternion "]}]}]}],"description":"TEST::operatorMultiplyByQuaternionEquals Multiplies two quaternions and stores the result in this quaternion [object Object] ","testName":"operatorMultiplyByQuaternionEquals","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMultiplyByQuaternionEquals","status":"run","time":"0","classname":"Quaternion"},"name":"operatorMultiplyByQuaternionEquals"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Quaternion","$":{"refid":"classdrider_s_d_k_1_1_quaternion","kindref":"compound"}}]}],"definition":["Quaternion & driderSDK::Quaternion::operator*="],"argsstring":["(float s)"],"name":["operator*="],"detaileddescription":[{"para":["TEST::operatorMultiplyByScalarEquals Multiplies quaternion with an scalar and stores the result in this quaternion",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["s"]}],"parameterdescription":[{"para":["The value to operate with."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this quaternion "]}]}]}],"description":"TEST::operatorMultiplyByScalarEquals Multiplies quaternion with an scalar and stores the result in this quaternion [object Object] ","testName":"operatorMultiplyByScalarEquals","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMultiplyByScalarEquals","status":"run","time":"0","classname":"Quaternion"},"name":"operatorMultiplyByScalarEquals"},"errorFlag":false},{"type":[{"ref":[{"_":"Quaternion","$":{"refid":"classdrider_s_d_k_1_1_quaternion","kindref":"compound"}}]}],"definition":["Quaternion driderSDK::Quaternion::operator/"],"argsstring":["(const Quaternion &Q) const"],"name":["operator/"],"detaileddescription":[{"para":["TEST::operatorDivide Divides two quaternions.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["Q"]}],"parameterdescription":[{"para":["The other quaternion."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["The result quaternion of the operation. "]}]}]}],"description":"TEST::operatorDivide Divides two quaternions. [object Object] ","testName":"operatorDivide","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"operatorDivide","status":"run","time":"0.002","classname":"Quaternion"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:13\r\n      Expected: TestQuaternion.x\r\n      Which is: 0.16666664\r\nTo be equal to: x\r\n      Which is: 0.27777779","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:13\n      Expected: TestQuaternion.x\n      Which is: 0.16666664\nTo be equal to: x\n      Which is: 0.27777779","type":""}},{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:15\r\n      Expected: TestQuaternion.z\r\n      Which is: -0.6111111\r\nTo be equal to: z\r\n      Which is: -0.16666667","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:15\n      Expected: TestQuaternion.z\n      Which is: -0.6111111\nTo be equal to: z\n      Which is: -0.16666667","type":""}},{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:16\r\n      Expected: TestQuaternion.w\r\n      Which is: 1.2777778\r\nTo be equal to: w\r\n      Which is: 1.3888888","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:16\n      Expected: TestQuaternion.w\n      Which is: 1.2777778\nTo be equal to: w\n      Which is: 1.3888888","type":""}}],"name":"operatorDivide"},"errorFlag":true},{"type":[{"_":" &","ref":[{"_":"Quaternion","$":{"refid":"classdrider_s_d_k_1_1_quaternion","kindref":"compound"}}]}],"definition":["Quaternion & driderSDK::Quaternion::operator/="],"argsstring":["(const Quaternion &Q)"],"name":["operator/="],"detaileddescription":[{"para":["TEST::operatorDivideEquals Divides two quaternions and stores the result in this quaternion",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["Q"]}],"parameterdescription":[{"para":["The other quaternion."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this quaternion "]}]}]}],"description":"TEST::operatorDivideEquals Divides two quaternions and stores the result in this quaternion [object Object] ","testName":"operatorDivideEquals","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"operatorDivideEquals","status":"run","time":"0.003","classname":"Quaternion"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:13\r\n      Expected: TestQuaternion.x\r\n      Which is: 8.7999992\r\nTo be equal to: x\r\n      Which is: 0.095238097","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:13\n      Expected: TestQuaternion.x\n      Which is: 8.7999992\nTo be equal to: x\n      Which is: 0.095238097","type":""}},{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:14\r\n      Expected: TestQuaternion.y\r\n      Which is: 0.93333304\r\nTo be equal to: y\r\n      Which is: -0.23809524","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:14\n      Expected: TestQuaternion.y\n      Which is: 0.93333304\nTo be equal to: y\n      Which is: -0.23809524","type":""}},{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:15\r\n      Expected: TestQuaternion.z\r\n      Which is: 4.9333329\r\nTo be equal to: z\r\n      Which is: -0.40476191","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:15\n      Expected: TestQuaternion.z\n      Which is: 4.9333329\nTo be equal to: z\n      Which is: -0.40476191","type":""}},{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:16\r\n      Expected: TestQuaternion.w\r\n      Which is: -3.8666666\r\nTo be equal to: w\r\n      Which is: 0.023809524","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:16\n      Expected: TestQuaternion.w\n      Which is: -3.8666666\nTo be equal to: w\n      Which is: 0.023809524","type":""}}],"name":"operatorDivideEquals"},"errorFlag":true},{"type":[{"_":" &","ref":[{"_":"Quaternion","$":{"refid":"classdrider_s_d_k_1_1_quaternion","kindref":"compound"}}]}],"definition":["Quaternion & driderSDK::Quaternion::operator="],"argsstring":["(const Quaternion &Q)"],"name":["operator="],"detaileddescription":[{"para":["TEST::operatorAssign Assigns the values from another quaternion",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["Q"]}],"parameterdescription":[{"para":["The quaternion to take the values from."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this quaternion "]}]}]}],"description":"TEST::operatorAssign Assigns the values from another quaternion [object Object] ","testName":"operatorAssign","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorAssign","status":"run","time":"0","classname":"Quaternion"},"name":"operatorAssign"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Quaternion::operator=="],"argsstring":["(const Quaternion &Q)"],"name":["operator=="],"detaileddescription":[{"para":["TEST::operatorEqual Checks if quaternion is equal to another quaternion",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["Q"]}],"parameterdescription":[{"para":["The quaternion to compare."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if it is equal "]}]}]}],"description":"TEST::operatorEqual Checks if quaternion is equal to another quaternion [object Object] ","testName":"operatorEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorEqual","status":"run","time":"0","classname":"Quaternion"},"name":"operatorEqual"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Quaternion::operator!="],"argsstring":["(const Quaternion &Q)"],"name":["operator!="],"detaileddescription":[{"para":["TEST::operatorNotEqual Checks if quaternion is not equal to another quaternion",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["Q"]}],"parameterdescription":[{"para":["The quaternion to compare."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if it is not equal "]}]}]}],"description":"TEST::operatorNotEqual Checks if quaternion is not equal to another quaternion [object Object] ","testName":"operatorNotEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorNotEqual","status":"run","time":"0","classname":"Quaternion"},"name":"operatorNotEqual"},"errorFlag":false},{"type":[{"ref":[{"_":"Quaternion","$":{"refid":"classdrider_s_d_k_1_1_quaternion","kindref":"compound"}}]}],"definition":["Quaternion driderSDK::Quaternion::operator-"],"argsstring":["() const"],"name":["operator-"],"detaileddescription":[{"para":["TEST::operatorNot Returns this quaternion with negated values. "]}],"description":"TEST::operatorNot Returns this quaternion with negated values.  ","testName":"operatorNot","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorNot","status":"run","time":"0","classname":"Quaternion"},"name":"operatorNot"},"errorFlag":false}],"testFile":"Nombre del test: Quaternion","testClase":{"name":"Quaternion","tests":"29","failures":"3","disabled":"0","errors":"0","time":"0.037","testCases":[{"data":{"name":"defaultConstructor","status":"run","time":"0","classname":"Quaternion"},"name":"defaultConstructor"},{"data":{"name":"forceInitZero","status":"run","time":"0","classname":"Quaternion"},"name":"forceInitZero"},{"data":{"name":"forceInitIdentity","status":"run","time":"0","classname":"Quaternion"},"name":"forceInitIdentity"},{"data":{"name":"moveConstructor","status":"run","time":"0","classname":"Quaternion"},"name":"moveConstructor"},{"data":{"name":"constructFromQuaternion","status":"run","time":"0","classname":"Quaternion"},"name":"constructFromQuaternion"},{"data":{"name":"constructFrom4floats","status":"run","time":"0","classname":"Quaternion"},"name":"constructFrom4floats"},{"data":{"name":"constructFromVector4D","status":"run","time":"0","classname":"Quaternion"},"name":"constructFromVector4D"},{"data":{"name":"destructor","status":"run","time":"0","classname":"Quaternion"},"name":"destructor"},{"data":{"name":"measure","status":"run","time":"0","classname":"Quaternion"},"name":"measure"},{"data":{"name":"conjugate","status":"run","time":"0","classname":"Quaternion"},"name":"conjugate"},{"data":{"name":"normalize","status":"run","time":"0","classname":"Quaternion"},"name":"normalize"},{"data":{"name":"rotation","status":"run","time":"0.003","classname":"Quaternion"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:13\r\n      Expected: TestQuaternion.x\r\n      Which is: 0\r\nTo be equal to: x\r\n      Which is: 1","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:13\n      Expected: TestQuaternion.x\n      Which is: 0\nTo be equal to: x\n      Which is: 1","type":""}},{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:15\r\n      Expected: TestQuaternion.z\r\n      Which is: 1\r\nTo be equal to: z\r\n      Which is: 0","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:15\n      Expected: TestQuaternion.z\n      Which is: 1\nTo be equal to: z\n      Which is: 0","type":""}}],"name":"rotation"},{"data":{"name":"matrixFromQuaternion4x4","status":"run","time":"0","classname":"Quaternion"},"name":"matrixFromQuaternion4x4"},{"data":{"name":"matrixFromQuaternion3x3","status":"run","time":"0","classname":"Quaternion"},"name":"matrixFromQuaternion3x3"},{"data":{"name":"operatorBrackets","status":"run","time":"0","classname":"Quaternion"},"name":"operatorBrackets"},{"data":{"name":"operatorAdd","status":"run","time":"0","classname":"Quaternion"},"name":"operatorAdd"},{"data":{"name":"operatorAddEquals","status":"run","time":"0","classname":"Quaternion"},"name":"operatorAddEquals"},{"data":{"name":"operatorMinus","status":"run","time":"0","classname":"Quaternion"},"name":"operatorMinus"},{"data":{"name":"operatorMinusEquals","status":"run","time":"0","classname":"Quaternion"},"name":"operatorMinusEquals"},{"data":{"name":"operatorMultiplyByQuaternion","status":"run","time":"0","classname":"Quaternion"},"name":"operatorMultiplyByQuaternion"},{"data":{"name":"operatorMultiplyByScalar","status":"run","time":"0","classname":"Quaternion"},"name":"operatorMultiplyByScalar"},{"data":{"name":"operatorMultiplyByQuaternionEquals","status":"run","time":"0","classname":"Quaternion"},"name":"operatorMultiplyByQuaternionEquals"},{"data":{"name":"operatorMultiplyByScalarEquals","status":"run","time":"0","classname":"Quaternion"},"name":"operatorMultiplyByScalarEquals"},{"data":{"name":"operatorDivide","status":"run","time":"0.002","classname":"Quaternion"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:13\r\n      Expected: TestQuaternion.x\r\n      Which is: 0.16666664\r\nTo be equal to: x\r\n      Which is: 0.27777779","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:13\n      Expected: TestQuaternion.x\n      Which is: 0.16666664\nTo be equal to: x\n      Which is: 0.27777779","type":""}},{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:15\r\n      Expected: TestQuaternion.z\r\n      Which is: -0.6111111\r\nTo be equal to: z\r\n      Which is: -0.16666667","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:15\n      Expected: TestQuaternion.z\n      Which is: -0.6111111\nTo be equal to: z\n      Which is: -0.16666667","type":""}},{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:16\r\n      Expected: TestQuaternion.w\r\n      Which is: 1.2777778\r\nTo be equal to: w\r\n      Which is: 1.3888888","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:16\n      Expected: TestQuaternion.w\n      Which is: 1.2777778\nTo be equal to: w\n      Which is: 1.3888888","type":""}}],"name":"operatorDivide"},{"data":{"name":"operatorDivideEquals","status":"run","time":"0.003","classname":"Quaternion"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:13\r\n      Expected: TestQuaternion.x\r\n      Which is: 8.7999992\r\nTo be equal to: x\r\n      Which is: 0.095238097","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:13\n      Expected: TestQuaternion.x\n      Which is: 8.7999992\nTo be equal to: x\n      Which is: 0.095238097","type":""}},{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:14\r\n      Expected: TestQuaternion.y\r\n      Which is: 0.93333304\r\nTo be equal to: y\r\n      Which is: -0.23809524","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:14\n      Expected: TestQuaternion.y\n      Which is: 0.93333304\nTo be equal to: y\n      Which is: -0.23809524","type":""}},{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:15\r\n      Expected: TestQuaternion.z\r\n      Which is: 4.9333329\r\nTo be equal to: z\r\n      Which is: -0.40476191","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:15\n      Expected: TestQuaternion.z\n      Which is: 4.9333329\nTo be equal to: z\n      Which is: -0.40476191","type":""}},{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:16\r\n      Expected: TestQuaternion.w\r\n      Which is: -3.8666666\r\nTo be equal to: w\r\n      Which is: 0.023809524","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_quaternion.cpp:16\n      Expected: TestQuaternion.w\n      Which is: -3.8666666\nTo be equal to: w\n      Which is: 0.023809524","type":""}}],"name":"operatorDivideEquals"},{"data":{"name":"operatorAssign","status":"run","time":"0","classname":"Quaternion"},"name":"operatorAssign"},{"data":{"name":"operatorEqual","status":"run","time":"0","classname":"Quaternion"},"name":"operatorEqual"},{"data":{"name":"operatorNotEqual","status":"run","time":"0","classname":"Quaternion"},"name":"operatorNotEqual"},{"data":{"name":"operatorNot","status":"run","time":"0","classname":"Quaternion"},"name":"operatorNot"}]}},{"name":"Radian","functions":[{"type":[""],"definition":["driderSDK::Radian::Radian"],"argsstring":["()"],"name":["Radian"],"detaileddescription":[{"para":["TEST::defaultConstructor","Default constructor. "]}],"description":"TEST::defaultConstructor Default constructor.  ","testName":"defaultConstructor","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"defaultConstructor","status":"run","time":"0","classname":"Radian"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_radian.cpp:8\r\nValue of: ptrRadian\r\n  Actual: true\r\nExpected: false","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_radian.cpp:8\nValue of: ptrRadian\n  Actual: true\nExpected: false","type":""}}],"name":"defaultConstructor"},"errorFlag":true},{"type":[""],"definition":["driderSDK::Radian::Radian"],"argsstring":["(Radian &&V)=default"],"name":["Radian"],"detaileddescription":[{"para":["TEST::moveConstructor","Move constructor. "]}],"description":"TEST::moveConstructor Move constructor.  ","testName":"moveConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"moveConstructor","status":"run","time":"0","classname":"Radian"},"name":"moveConstructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Radian::Radian"],"argsstring":["(const Radian &V)"],"name":["Radian"],"detaileddescription":[{"para":["TEST::copyConstructor","Copy constructor. "]}],"description":"TEST::copyConstructor Copy constructor.  ","testName":"copyConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"copyConstructor","status":"run","time":"0","classname":"Radian"},"name":"copyConstructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Radian::Radian"],"argsstring":["(float value)"],"name":["Radian"],"detaileddescription":[{"para":["TEST::floatConstructor","Initialize class with value.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["value"]}],"parameterdescription":[{"para":["Initial value. "]}]}]}]}]}],"description":"TEST::floatConstructor Initialize class with value. [object Object] ","testName":"floatConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"floatConstructor","status":"run","time":"0","classname":"Radian"},"name":"floatConstructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Radian::~Radian"],"argsstring":["()"],"name":["~Radian"],"detaileddescription":[{"para":["TEST::defaultDestructor","Default destructor. "]}],"description":"TEST::defaultDestructor Default destructor.  ","testName":"defaultDestructor","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"defaultDestructor","status":"run","time":"0.001","classname":"Radian"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_radian.cpp:44\r\nValue of: ptrRadian\r\n  Actual: false\r\nExpected: true","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_radian.cpp:44\nValue of: ptrRadian\n  Actual: false\nExpected: true","type":""}}],"name":"defaultDestructor"},"errorFlag":true},{"type":["float"],"definition":["float driderSDK::Radian::toDegree"],"argsstring":["() const"],"name":["toDegree"],"detaileddescription":[{"para":["TEST::ToDegree",{"_":"Returns a  value equal to the actual radian in degrees.","ref":[{"_":"Degree","$":{"refid":"classdrider_s_d_k_1_1_degree","kindref":"compound"}}]},{"simplesect":[{"$":{"kind":"return"},"para":["Class degree. "]}]}]}],"description":"TEST::ToDegree [object Object] [object Object] ","testName":"ToDegree","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"ToDegree","status":"run","time":"0","classname":"Radian"},"name":"ToDegree"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Radian","$":{"refid":"classdrider_s_d_k_1_1_radian","kindref":"compound"}}]}],"definition":["Radian & driderSDK::Radian::unwind"],"argsstring":["()"],"name":["unwind"],"detaileddescription":[{"para":["TEST::Unwind","Limit the value in [0, 360)",{"simplesect":[{"$":{"kind":"return"},"para":["A reference to this class. "]}]}]}],"description":"TEST::Unwind Limit the value in [0, 360) [object Object] ","testName":"Unwind","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"Unwind","status":"run","time":"0","classname":"Radian"},"name":"Unwind"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Radian::operator float"],"argsstring":["()"],"name":["operator float"],"detaileddescription":[{"para":["TEST::floatOperator","The class value as a float. "]}],"description":"TEST::floatOperator The class value as a float.  ","testName":"floatOperator","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"floatOperator","status":"run","time":"0","classname":"Radian"},"name":"floatOperator"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Radian","$":{"refid":"classdrider_s_d_k_1_1_radian","kindref":"compound"}}]}],"definition":["Radian & driderSDK::Radian::operator="],"argsstring":["(float V)"],"name":["operator="],"detaileddescription":[{"para":["TEST::equalFloat","Sets the class value to the given float.",{"simplesect":[{"$":{"kind":"return"},"para":["Reference to this. "]}]}]}],"description":"TEST::equalFloat Sets the class value to the given float. [object Object] ","testName":"equalFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"equalFloat","status":"run","time":"0","classname":"Radian"},"name":"equalFloat"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Radian","$":{"refid":"classdrider_s_d_k_1_1_radian","kindref":"compound"}}]}],"definition":["Radian & driderSDK::Radian::operator+="],"argsstring":["(float V)"],"name":["operator+="],"detaileddescription":[{"para":["TEST::plusEqualFloat","Add the given float to the class value.",{"simplesect":[{"$":{"kind":"return"},"para":["Reference to this. "]}]}]}],"description":"TEST::plusEqualFloat Add the given float to the class value. [object Object] ","testName":"plusEqualFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"plusEqualFloat","status":"run","time":"0","classname":"Radian"},"name":"plusEqualFloat"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Radian","$":{"refid":"classdrider_s_d_k_1_1_radian","kindref":"compound"}}]}],"definition":["Radian & driderSDK::Radian::operator-="],"argsstring":["(float V)"],"name":["operator-="],"detaileddescription":[{"para":["TEST::lessEqualFloat","Subs the given float to the class value.",{"simplesect":[{"$":{"kind":"return"},"para":["Reference to this. "]}]}]}],"description":"TEST::lessEqualFloat Subs the given float to the class value. [object Object] ","testName":"lessEqualFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"lessEqualFloat","status":"run","time":"0","classname":"Radian"},"name":"lessEqualFloat"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Radian","$":{"refid":"classdrider_s_d_k_1_1_radian","kindref":"compound"}}]}],"definition":["Radian & driderSDK::Radian::operator*="],"argsstring":["(float V)"],"name":["operator*="],"detaileddescription":[{"para":["TEST::mulEqualFloat","Multiplies the given float to the class value.",{"simplesect":[{"$":{"kind":"return"},"para":["Reference to this. "]}]}]}],"description":"TEST::mulEqualFloat Multiplies the given float to the class value. [object Object] ","testName":"mulEqualFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"mulEqualFloat","status":"run","time":"0","classname":"Radian"},"name":"mulEqualFloat"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Radian","$":{"refid":"classdrider_s_d_k_1_1_radian","kindref":"compound"}}]}],"definition":["Radian & driderSDK::Radian::operator/="],"argsstring":["(float V)"],"name":["operator/="],"detaileddescription":[{"para":["TEST::divEqualFloat","Divides the class value with the given float.",{"simplesect":[{"$":{"kind":"return"},"para":["Reference to this. "]}]}]}],"description":"TEST::divEqualFloat Divides the class value with the given float. [object Object] ","testName":"divEqualFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"divEqualFloat","status":"run","time":"0","classname":"Radian"},"name":"divEqualFloat"},"errorFlag":false}],"testFile":"Nombre del test: Radian","testClase":{"name":"Radian","tests":"13","failures":"2","disabled":"0","errors":"0","time":"0.011","testCases":[{"data":{"name":"defaultConstructor","status":"run","time":"0","classname":"Radian"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_radian.cpp:8\r\nValue of: ptrRadian\r\n  Actual: true\r\nExpected: false","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_radian.cpp:8\nValue of: ptrRadian\n  Actual: true\nExpected: false","type":""}}],"name":"defaultConstructor"},{"data":{"name":"moveConstructor","status":"run","time":"0","classname":"Radian"},"name":"moveConstructor"},{"data":{"name":"copyConstructor","status":"run","time":"0","classname":"Radian"},"name":"copyConstructor"},{"data":{"name":"floatConstructor","status":"run","time":"0","classname":"Radian"},"name":"floatConstructor"},{"data":{"name":"defaultDestructor","status":"run","time":"0.001","classname":"Radian"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_radian.cpp:44\r\nValue of: ptrRadian\r\n  Actual: false\r\nExpected: true","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_radian.cpp:44\nValue of: ptrRadian\n  Actual: false\nExpected: true","type":""}}],"name":"defaultDestructor"},{"data":{"name":"ToDegree","status":"run","time":"0","classname":"Radian"},"name":"ToDegree"},{"data":{"name":"Unwind","status":"run","time":"0","classname":"Radian"},"name":"Unwind"},{"data":{"name":"floatOperator","status":"run","time":"0","classname":"Radian"},"name":"floatOperator"},{"data":{"name":"equalFloat","status":"run","time":"0","classname":"Radian"},"name":"equalFloat"},{"data":{"name":"plusEqualFloat","status":"run","time":"0","classname":"Radian"},"name":"plusEqualFloat"},{"data":{"name":"lessEqualFloat","status":"run","time":"0","classname":"Radian"},"name":"lessEqualFloat"},{"data":{"name":"mulEqualFloat","status":"run","time":"0","classname":"Radian"},"name":"mulEqualFloat"},{"data":{"name":"divEqualFloat","status":"run","time":"0","classname":"Radian"},"name":"divEqualFloat"}]}},{"name":"Ray","functions":[{"type":[""],"definition":["driderSDK::Ray::Ray"],"argsstring":["()"],"name":["Ray"],"detaileddescription":[{"para":["Default constructor. "]}],"description":"Default constructor.  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::Ray::Ray"],"argsstring":["(Vector3D _origin, Vector3D _direction)"],"name":["Ray"],"detaileddescription":[{"para":["Constructor using origin and direction",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["_origin"]}],"parameterdescription":[{"para":["The origin of the ray."]}]},{"parameternamelist":[{"parametername":["_direction"]}],"parameterdescription":[{"para":["The direction of the ray "]}]}]}]}]}],"description":"Constructor using origin and direction [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::Ray::~Ray"],"argsstring":["()"],"name":["~Ray"],"detaileddescription":[{"para":["Destructor "]}],"description":"Destructor  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Ray::intersects"],"argsstring":["(const Ray &bRay) const"],"name":["intersects"],"detaileddescription":[{"para":["Check if the ray intersects other ray",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["bRay"]}],"parameterdescription":[{"para":["The other ray to check the intersecton."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the ray intersects with the other ray "]}]}]}],"description":"Check if the ray intersects other ray [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Ray::intersects"],"argsstring":["(const Plane &plane) const"],"name":["intersects"],"detaileddescription":[{"para":["Check if the ray intersects with a plane",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["plane"]}],"parameterdescription":[{"para":["The plane to check the intersecton."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the ray intersects with the plane "]}]}]}],"description":"Check if the ray intersects with a plane [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Ray::intersects"],"argsstring":["(const Plane &plane, float *t) const"],"name":["intersects"],"detaileddescription":[{"para":["Check if the ray intersects with a plane",{"_":"\nparam t The parameter of the point intersection.","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["plane"]}],"parameterdescription":[{"para":["The plane to check the intersecton."]}]}]}]},{"simplesect":[{"$":{"kind":"return"},"para":["True if the ray intersects with the plane "]}]}]}],"description":"Check if the ray intersects with a plane [object Object] [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Ray::intersects"],"argsstring":["(const Sphere &sphere) const"],"name":["intersects"],"detaileddescription":[{"para":["Check if the ray intersects with a sphere",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["sphere"]}],"parameterdescription":[{"para":["The sphere to check the intersecton."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the ray intersects with the sphere "]}]}]}],"description":"Check if the ray intersects with a sphere [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Ray::intersects"],"argsstring":["(const Capsule &capsule) const"],"name":["intersects"],"detaileddescription":[{"para":["Check if the ray intersects with a capsule",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["capsule"]}],"parameterdescription":[{"para":["The capsule to check the intersecton."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the ray intersects with the capsule "]}]}]}],"description":"Check if the ray intersects with a capsule [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Ray::intersects"],"argsstring":["(const Frustrum &frustrum) const"],"name":["intersects"],"detaileddescription":[{"para":["Check if the ray intersects with a frustrum",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["frustrum"]}],"parameterdescription":[{"para":["The frustrum to check the intersecton."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if the ray intersects with the frustrum "]}]}]}],"description":"Check if the ray intersects with a frustrum [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"No existe Test con el nombre de la clase"},{"name":"Resource","functions":[{"type":[""],"definition":["driderSDK::Resource::Resource"],"argsstring":["()"],"name":["Resource"],"detaileddescription":[{"para":["TEST::resourceConstructor Default constructor. "]}],"description":"TEST::resourceConstructor Default constructor.  ","testName":"resourceConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"resourceConstructor","status":"run","time":"0","classname":"Resource"},"name":"resourceConstructor"},"errorFlag":false},{"type":[""],"definition":["virtual driderSDK::Resource::~Resource"],"argsstring":["()"],"name":["~Resource"],"detaileddescription":[{"para":["TEST::resourceDestructor Default destructor. "]}],"description":"TEST::resourceDestructor Default destructor.  ","testName":"resourceDestructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"resourceDestructor","status":"run","time":"0","classname":"Resource"},"name":"resourceDestructor"},"errorFlag":false}],"testFile":"Nombre del test: Resource","testClase":{"name":"Resource","tests":"2","failures":"0","disabled":"0","errors":"0","time":"0.001","testCases":[{"data":{"name":"resourceConstructor","status":"run","time":"0","classname":"Resource"},"name":"resourceConstructor"},{"data":{"name":"resourceDestructor","status":"run","time":"0","classname":"Resource"},"name":"resourceDestructor"}]}},{"name":"ResourceManager","functions":[{"type":[""],"definition":["driderSDK::ResourceManager::ResourceManager"],"argsstring":["()"],"name":["ResourceManager"],"detaileddescription":[{"para":["Default constructor. "]}],"description":"Default constructor.  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::ResourceManager::~ResourceManager"],"argsstring":["()"],"name":["~ResourceManager"],"detaileddescription":[{"para":["Default destructor. "]}],"description":"Default destructor.  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["void"],"definition":["void driderSDK::ResourceManager::loadResource"],"argsstring":["(std::string nameResource, std::string pathFile)"],"name":["loadResource"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["void"],"definition":["void driderSDK::ResourceManager::createResource"],"argsstring":["(ResourceType::E resourceType, std::string resourceName)"],"name":["createResource"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::ResourceManager::isCompatible"],"argsstring":["(std::string resource, ResourceType::E &resourceTypeOut)"],"name":["isCompatible"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::ResourceManager::existInResourceContent"],"argsstring":["(std::string key)"],"name":["existInResourceContent"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":"std::shared_ptr<  >","ref":[{"_":"Resource","$":{"refid":"classdrider_s_d_k_1_1_resource","kindref":"compound"}}]}],"definition":["std::shared_ptr< Resource > driderSDK::ResourceManager::getReference"],"argsstring":["(std::string key)"],"name":["getReference"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"No existe Test con el nombre de la clase"},{"name":"Sphere","functions":[{"type":[""],"definition":["driderSDK::Sphere::Sphere"],"argsstring":["()"],"name":["Sphere"],"detaileddescription":[{"para":["TEST::sphereConstructor Default constructor. "]}],"description":"TEST::sphereConstructor Default constructor.  ","testName":"sphereConstructor","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"sphereConstructor","status":"run","time":"0.001","classname":"Sphere"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_sphere.cpp:16\r\nValue of: sphere2.radius == 0.6f && sphere2.center == driderSDK::Vector3D(0.0f, 0.0f, 0.0f)\r\n  Actual: false\r\nExpected: true","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_sphere.cpp:16\nValue of: sphere2.radius == 0.6f && sphere2.center == driderSDK::Vector3D(0.0f, 0.0f, 0.0f)\n  Actual: false\nExpected: true","type":""}}],"name":"sphereConstructor"},"errorFlag":true},{"type":[""],"definition":["driderSDK::Sphere::Sphere"],"argsstring":["(Vector3D _center, float _radius)"],"name":["Sphere"],"detaileddescription":[{"para":["TEST::sphereConstructor Constructor with center and radius. "]}],"description":"TEST::sphereConstructor Constructor with center and radius.  ","testName":"sphereConstructor","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"sphereConstructor","status":"run","time":"0.001","classname":"Sphere"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_sphere.cpp:16\r\nValue of: sphere2.radius == 0.6f && sphere2.center == driderSDK::Vector3D(0.0f, 0.0f, 0.0f)\r\n  Actual: false\r\nExpected: true","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_sphere.cpp:16\nValue of: sphere2.radius == 0.6f && sphere2.center == driderSDK::Vector3D(0.0f, 0.0f, 0.0f)\n  Actual: false\nExpected: true","type":""}}],"name":"sphereConstructor"},"errorFlag":true},{"type":[""],"definition":["driderSDK::Sphere::~Sphere"],"argsstring":["()"],"name":["~Sphere"],"detaileddescription":[{"para":["TEST::sphereDestructor Destructor. "]}],"description":"TEST::sphereDestructor Destructor.  ","testName":"sphereDestructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"sphereDestructor","status":"run","time":"0","classname":"Sphere"},"name":"sphereDestructor"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Sphere::intersects"],"argsstring":["(const Vector3D &point)"],"name":["intersects"],"detaileddescription":[{"para":["TEST::intersectsPoint Checks if a point is on a sphare.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["point"]}],"parameterdescription":[{"para":["The point to check."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Return true if the point is in the sphere, otherwise return false. "]}]}]}],"description":"TEST::intersectsPoint Checks if a point is on a sphare. [object Object] ","testName":"intersectsPoint","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"intersectsPoint","status":"run","time":"0.001","classname":"Sphere"},"name":"intersectsPoint"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Sphere::intersects"],"argsstring":["(const Plane &plane)"],"name":["intersects"],"detaileddescription":[{"para":["TEST::intersectsPlane Checks if a plane intersets with a sphere.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["plane"]}],"parameterdescription":[{"para":["The plane to check."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Return true if the plane intersects with the sphere, otherwise return false. "]}]}]}],"description":"TEST::intersectsPlane Checks if a plane intersets with a sphere. [object Object] ","testName":"intersectsPlane","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"intersectsPlane","status":"run","time":"0","classname":"Sphere"},"name":"intersectsPlane"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Sphere::intersects"],"argsstring":["(const Sphere &sphere)"],"name":["intersects"],"detaileddescription":[{"para":["TEST::intersectsSphere Checks if a sphere intersets with other sphere.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["sphere"]}],"parameterdescription":[{"para":["The sphere to check."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Return true if the sphere intersects with the other sphere, otherwise return false. "]}]}]}],"description":"TEST::intersectsSphere Checks if a sphere intersets with other sphere. [object Object] ","testName":"intersectsSphere","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"intersectsSphere","status":"run","time":"0","classname":"Sphere"},"name":"intersectsSphere"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Sphere::intersects"],"argsstring":["(const AABB &aabb)"],"name":["intersects"],"detaileddescription":[{"para":["TEST::intersectsAabb Checks if a aabb intersets with a sphere.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["aabb"]}],"parameterdescription":[{"para":["The aabb to check."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Return true if the sphere intersects with the aabb, otherwise return false. "]}]}]}],"description":"TEST::intersectsAabb Checks if a aabb intersets with a sphere. [object Object] ","testName":"intersectsAabb","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Sphere::intersects"],"argsstring":["(const Capsule &capsule)"],"name":["intersects"],"detaileddescription":[{"para":["TEST::intersectsCapsule Checks if a capsule intersets with a sphere.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["capsule"]}],"parameterdescription":[{"para":["The capsule to check."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Return true if the sphere intersects with the capsule, otherwise return false. "]}]}]}],"description":"TEST::intersectsCapsule Checks if a capsule intersets with a sphere. [object Object] ","testName":"intersectsCapsule","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"intersectsCapsule","status":"run","time":"0","classname":"Sphere"},"name":"intersectsCapsule"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Sphere::intersects"],"argsstring":["(const Frustrum &frustrum)"],"name":["intersects"],"detaileddescription":[{"para":["TEST::intersectsFrustrum Checks if a frustrum intersets with a sphere.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["frustrum"]}],"parameterdescription":[{"para":["The frustrum to check."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Return true if the sphere intersects with the frustrum, otherwise return false. "]}]}]}],"description":"TEST::intersectsFrustrum Checks if a frustrum intersets with a sphere. [object Object] ","testName":"intersectsFrustrum","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"intersectsFrustrum","status":"run","time":"0","classname":"Sphere"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_sphere.cpp:100\r\nValue of: false\r\n  Actual: false\r\nExpected: true","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_sphere.cpp:100\nValue of: false\n  Actual: false\nExpected: true","type":""}}],"name":"intersectsFrustrum"},"errorFlag":true}],"testFile":"Nombre del test: Sphere","testClase":{"name":"Sphere","tests":"8","failures":"2","disabled":"1","errors":"0","time":"0.008","testCases":[{"data":{"name":"sphereConstructor","status":"run","time":"0.001","classname":"Sphere"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_sphere.cpp:16\r\nValue of: sphere2.radius == 0.6f && sphere2.center == driderSDK::Vector3D(0.0f, 0.0f, 0.0f)\r\n  Actual: false\r\nExpected: true","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_sphere.cpp:16\nValue of: sphere2.radius == 0.6f && sphere2.center == driderSDK::Vector3D(0.0f, 0.0f, 0.0f)\n  Actual: false\nExpected: true","type":""}}],"name":"sphereConstructor"},{"data":{"name":"sphereDestructor","status":"run","time":"0","classname":"Sphere"},"name":"sphereDestructor"},{"data":{"name":"intersectsPoint","status":"run","time":"0.001","classname":"Sphere"},"name":"intersectsPoint"},{"data":{"name":"intersectsPlane","status":"run","time":"0","classname":"Sphere"},"name":"intersectsPlane"},{"data":{"name":"intersectsSphere","status":"run","time":"0","classname":"Sphere"},"name":"intersectsSphere"},{"data":{"name":"DISABLED_intersectsAabb","status":"notrun","time":"0","classname":"Sphere"},"name":"DISABLED_intersectsAabb"},{"data":{"name":"intersectsCapsule","status":"run","time":"0","classname":"Sphere"},"name":"intersectsCapsule"},{"data":{"name":"intersectsFrustrum","status":"run","time":"0","classname":"Sphere"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_sphere.cpp:100\r\nValue of: false\r\n  Actual: false\r\nExpected: true","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_sphere.cpp:100\nValue of: false\n  Actual: false\nExpected: true","type":""}}],"name":"intersectsFrustrum"}]}},{"name":"Texture","functions":[{"type":[""],"definition":["driderSDK::Texture::Texture"],"argsstring":["()"],"name":["Texture"],"detaileddescription":[{"para":["Default constructor. "]}],"description":"Default constructor.  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["virtual driderSDK::Texture::~Texture"],"argsstring":["()"],"name":["~Texture"],"detaileddescription":[{"para":["Default destructor. "]}],"description":"Default destructor.  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"No existe Test con el nombre de la clase"},{"name":"Vector2D","functions":[{"type":[""],"definition":["driderSDK::Vector2D::Vector2D"],"argsstring":["()"],"name":["Vector2D"],"detaileddescription":[{"para":["TEST::defaultConstructor","Default constructor. "]}],"description":"TEST::defaultConstructor Default constructor.  ","testName":"defaultConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"defaultConstructor","status":"run","time":"0","classname":"Vector2D"},"name":"defaultConstructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Vector2D::Vector2D"],"argsstring":["(Math::FORCE_INIT k)"],"name":["Vector2D"],"detaileddescription":[{"para":["TEST:forceInit","Default constructor.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["k"]}],"parameterdescription":[{"para":["Values are initialized with 0. "]}]}]}]}]}],"description":"TEST:forceInit Default constructor. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::Vector2D::Vector2D"],"argsstring":["(Vector2D &&V)=default"],"name":["Vector2D"],"detaileddescription":[{"para":["TEST::moveContructor","Move constructor. "]}],"description":"TEST::moveContructor Move constructor.  ","testName":"moveContructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"moveContructor","status":"run","time":"0","classname":"Vector2D"},"name":"moveContructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Vector2D::Vector2D"],"argsstring":["(const Vector2D &V)"],"name":["Vector2D"],"detaileddescription":[{"para":["TEST::constructForVector2DI","Copy constructor. "]}],"description":"TEST::constructForVector2DI Copy constructor.  ","testName":"constructForVector2DI","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::Vector2D::Vector2D"],"argsstring":["(float _x, float _y)"],"name":["Vector2D"],"detaileddescription":[{"para":["TEST::constructorFor2Int32","Initialize constructor with values.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["_x"]}],"parameterdescription":[{"para":["The x value of the vector."]}]},{"parameternamelist":[{"parametername":["_y"]}],"parameterdescription":[{"para":["The y value of the vector. "]}]}]}]}]}],"description":"TEST::constructorFor2Int32 Initialize constructor with values. [object Object] ","testName":"constructorFor2Int32","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::Vector2D::~Vector2D"],"argsstring":["()"],"name":["~Vector2D"],"detaileddescription":[{"para":["TEST::destructor","Default destructor. "]}],"description":"TEST::destructor Default destructor.  ","testName":"destructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"destructor","status":"run","time":"0","classname":"Vector2D"},"name":"destructor"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector2D::dot"],"argsstring":["(const Vector2D &B) const"],"name":["dot"],"detaileddescription":[{"para":["TEST:: dot","Computes the dot product between this vector and the vector parameter. This operatios is commutative.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["B"]}],"parameterdescription":[{"para":["The vector against which the dot product is calculated."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["The sum of the products of the corresponding entries of the vectors. "]}]}]}],"description":"TEST:: dot Computes the dot product between this vector and the vector parameter. This operatios is commutative. [object Object] ","testName":"","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"ref":[{"_":"Vector2D","$":{"refid":"classdrider_s_d_k_1_1_vector2_d","kindref":"compound"}}]}],"definition":["Vector2D driderSDK::Vector2D::cross"],"argsstring":["() const"],"name":["cross"],"detaileddescription":[{"para":["TEST::cross","Computes the cross product between himself.",{"simplesect":[{"$":{"kind":"return"},"para":["Result vector of the cross product "]}]}]}],"description":"TEST::cross Computes the cross product between himself. [object Object] ","testName":"cross","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"cross","status":"run","time":"0","classname":"Vector2D"},"name":"cross"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector2D::length"],"argsstring":["() const"],"name":["length"],"detaileddescription":[{"para":["TEST::length","Computes the length of this vector.",{"simplesect":[{"$":{"kind":"return"},"para":["The length (or \"size\") of the vector. "]}]}]}],"description":"TEST::length Computes the length of this vector. [object Object] ","testName":"length","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"length","status":"run","time":"0","classname":"Vector2D"},"name":"length"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector2D::lengthSqr"],"argsstring":["() const"],"name":["lengthSqr"],"detaileddescription":[{"para":["TEST::lengthSqr","Computes the squared length of this vector.",{"simplesect":[{"$":{"kind":"return"},"para":["The length (or \"size\") of the vector squared. "]}]}]}],"description":"TEST::lengthSqr Computes the squared length of this vector. [object Object] ","testName":"lengthSqr","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"lengthSqr","status":"run","time":"0","classname":"Vector2D"},"name":"lengthSqr"},"errorFlag":false},{"type":["void"],"definition":["void driderSDK::Vector2D::normalize"],"argsstring":["()"],"name":["normalize"],"detaileddescription":[{"para":["TEST::normalize","Normalize the vector. "]}],"description":"TEST::normalize Normalize the vector.  ","testName":"normalize","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"normalize","status":"run","time":"0","classname":"Vector2D"},"name":"normalize"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector2D::distance"],"argsstring":["(const Vector2D &otherVector) const"],"name":["distance"],"detaileddescription":[{"para":["TEST::distance","Computes the distance between two vectors.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["otherVector"]}],"parameterdescription":[{"para":["Vector to calculate the distance."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Distance. "]}]}]}],"description":"TEST::distance Computes the distance between two vectors. [object Object] ","testName":"distance","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"distance","status":"run","time":"0","classname":"Vector2D"},"name":"distance"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector2D::distanceSqr"],"argsstring":["(const Vector2D &otherVector) const"],"name":["distanceSqr"],"detaileddescription":[{"para":["Computes the squared distance between two vectors.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["otherVector"]}],"parameterdescription":[{"para":["Vector to calculate the distance."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Distance. "]}]}]}],"description":"Computes the squared distance between two vectors. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Vector2D::equals"],"argsstring":["(const Vector2D &otherVector, float errorRange=Math::SMALL_NUMBER) const"],"name":["equals"],"detaileddescription":[{"para":["Check's if the other vector is equal to this vector with an error range.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["otherVector"]}],"parameterdescription":[{"para":["Vector to compare with this vector."]}]},{"parameternamelist":[{"parametername":["errorRange"]}],"parameterdescription":[{"para":["The value of the error range."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["bool expression of condition. "]}]}]}],"description":"Check's if the other vector is equal to this vector with an error range. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["float *"],"definition":["float * driderSDK::Vector2D::ptr"],"argsstring":["()"],"name":["ptr"],"detaileddescription":[{"para":["Gets a reference to the specified element from the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["index"]}],"parameterdescription":[{"para":["The index of the element."]}]}]},{"$":{"kind":"exception"},"parameteritem":[{"parameternamelist":[{"parametername":["out_of_range"]}],"parameterdescription":[{"para":["If the index is greater than number of elements in the vector. Gets a pointer to the first element of the matrix."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A const reference to the element at the [index] position."]},{"$":{"kind":"return"},"para":["A pointer to the first element of the matrix. "]}]}]}],"description":"Gets a reference to the specified element from the vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["const float *"],"definition":["const float * driderSDK::Vector2D::ptr"],"argsstring":["() const"],"name":["ptr"],"detaileddescription":[{"para":["Gets a constant pointer to the first element of the matrix.",{"simplesect":[{"$":{"kind":"return"},"para":["A constant pointer to the first element of the matrix. "]}]}]}],"description":"Gets a constant pointer to the first element of the matrix. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["float &"],"definition":["float & driderSDK::Vector2D::operator[]"],"argsstring":["(const SizeT index)"],"name":["operator[]"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["const float &"],"definition":["const float & driderSDK::Vector2D::operator[]"],"argsstring":["(const SizeT index) const"],"name":["operator[]"],"detaileddescription":[{"para":["Gets a reference to the specified element from the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["index"]}],"parameterdescription":[{"para":["The index of the element."]}]}]},{"$":{"kind":"exception"},"parameteritem":[{"parameternamelist":[{"parametername":["out_of_range"]}],"parameterdescription":[{"para":["If the index is greater than number of elements in the vector. "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A const reference to the element at the [index] position."]}]}]}],"description":"Gets a reference to the specified element from the vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["float"],"definition":["float driderSDK::Vector2D::operator|"],"argsstring":["(const Vector2D &B) const"],"name":["operator|"],"detaileddescription":[{"para":["Computes the dot product between this vector and the vector parameter. This operatios is commutative.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["B"]}],"parameterdescription":[{"para":["The vector against which the dot product is calculated."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["The sum of the products of the corresponding entries of the vectors. "]}]}]}],"description":"Computes the dot product between this vector and the vector parameter. This operatios is commutative. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":" &","ref":[{"_":"Vector2D","$":{"refid":"classdrider_s_d_k_1_1_vector2_d","kindref":"compound"}}]}],"definition":["Vector2D & driderSDK::Vector2D::operator="],"argsstring":["(const Vector2D &A)"],"name":["operator="],"detaileddescription":[{"para":["Set the x, y values of this vector with the x, y of the other vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"Set the x, y values of this vector with the x, y of the other vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"ref":[{"_":"Vector2D","$":{"refid":"classdrider_s_d_k_1_1_vector2_d","kindref":"compound"}}]}],"definition":["Vector2D driderSDK::Vector2D::operator+"],"argsstring":["(const Vector2D &A) const"],"name":["operator+"],"detaileddescription":[{"para":["Adds elements of the vector with the elements of the other vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"Adds elements of the vector with the elements of the other vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":" &","ref":[{"_":"Vector2D","$":{"refid":"classdrider_s_d_k_1_1_vector2_d","kindref":"compound"}}]}],"definition":["Vector2D & driderSDK::Vector2D::operator+="],"argsstring":["(const Vector2D &A)"],"name":["operator+="],"detaileddescription":[{"para":["Adds elements of the vector with the elements of the other vector and stores it in this vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"Adds elements of the vector with the elements of the other vector and stores it in this vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"ref":[{"_":"Vector2D","$":{"refid":"classdrider_s_d_k_1_1_vector2_d","kindref":"compound"}}]}],"definition":["Vector2D driderSDK::Vector2D::operator-"],"argsstring":["(const Vector2D &A) const"],"name":["operator-"],"detaileddescription":[{"para":["Substracts elements of the vector with the elements of the other vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"Substracts elements of the vector with the elements of the other vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":" &","ref":[{"_":"Vector2D","$":{"refid":"classdrider_s_d_k_1_1_vector2_d","kindref":"compound"}}]}],"definition":["Vector2D & driderSDK::Vector2D::operator-="],"argsstring":["(const Vector2D &A)"],"name":["operator-="],"detaileddescription":[{"para":["Substracts elements of the vector with the elements of the other vector and stores it in this vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"Substracts elements of the vector with the elements of the other vector and stores it in this vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"ref":[{"_":"Vector2D","$":{"refid":"classdrider_s_d_k_1_1_vector2_d","kindref":"compound"}}]}],"definition":["Vector2D driderSDK::Vector2D::operator*"],"argsstring":["(const Vector2D &A) const"],"name":["operator*"],"detaileddescription":[{"para":["Multiplies elements of the vector with the elements of the other vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the factors to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"Multiplies elements of the vector with the elements of the other vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":" &","ref":[{"_":"Vector2D","$":{"refid":"classdrider_s_d_k_1_1_vector2_d","kindref":"compound"}}]}],"definition":["Vector2D & driderSDK::Vector2D::operator*="],"argsstring":["(const Vector2D &A)"],"name":["operator*="],"detaileddescription":[{"para":["Multiplies elements of the vector with the elements of the other vector, and stores the result in this vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the factors to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"Multiplies elements of the vector with the elements of the other vector, and stores the result in this vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"ref":[{"_":"Vector2D","$":{"refid":"classdrider_s_d_k_1_1_vector2_d","kindref":"compound"}}]}],"definition":["Vector2D driderSDK::Vector2D::operator*"],"argsstring":["(const float scalar) const"],"name":["operator*"],"detaileddescription":[{"para":["Multiplies elements of the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["The factor."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"Multiplies elements of the vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":" &","ref":[{"_":"Vector2D","$":{"refid":"classdrider_s_d_k_1_1_vector2_d","kindref":"compound"}}]}],"definition":["Vector2D & driderSDK::Vector2D::operator*="],"argsstring":["(const float scalar)"],"name":["operator*="],"detaileddescription":[{"para":["Multiplies elements of the vector and stores it in the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["The factor."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"Multiplies elements of the vector and stores it in the vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"ref":[{"_":"Vector2D","$":{"refid":"classdrider_s_d_k_1_1_vector2_d","kindref":"compound"}}]}],"definition":["Vector2D driderSDK::Vector2D::operator/"],"argsstring":["(const float scalar) const"],"name":["operator/"],"detaileddescription":[{"para":["Divide elements of the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["The dividend."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"Divide elements of the vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":" &","ref":[{"_":"Vector2D","$":{"refid":"classdrider_s_d_k_1_1_vector2_d","kindref":"compound"}}]}],"definition":["Vector2D & driderSDK::Vector2D::operator/="],"argsstring":["(const float scalar)"],"name":["operator/="],"detaileddescription":[{"para":["Divide elements of the vector and stores it in the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["The dividend."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"Divide elements of the vector and stores it in the vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Vector2D::operator=="],"argsstring":["(const Vector2D &otherVector)"],"name":["operator=="],"detaileddescription":[{"para":["Checks if the values of the vectors are equal.",{"simplesect":[{"$":{"kind":"return"},"para":["Flag if vectors are equal. "]}]}]}],"description":"Checks if the values of the vectors are equal. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Vector2D::operator!="],"argsstring":["(const Vector2D &otherVector)"],"name":["operator!="],"detaileddescription":[{"para":["Checks if the values of the vectors aren't equal.",{"simplesect":[{"$":{"kind":"return"},"para":["Flag if vectors aren't equal. "]}]}]}],"description":"Checks if the values of the vectors aren't equal. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"ref":[{"_":"Vector2D","$":{"refid":"classdrider_s_d_k_1_1_vector2_d","kindref":"compound"}}]}],"definition":["Vector2D driderSDK::Vector2D::operator-"],"argsstring":["() const"],"name":["operator-"],"detaileddescription":[{"para":["Returns this vector with negated values. "]}],"description":"Returns this vector with negated values.  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"Nombre del test: Vector2D","testClase":{"name":"Vector2D","tests":"12","failures":"0","disabled":"0","errors":"0","time":"0.008","testCases":[{"data":{"name":"defaultConstructor","status":"run","time":"0","classname":"Vector2D"},"name":"defaultConstructor"},{"data":{"name":"forceInit","status":"run","time":"0","classname":"Vector2D"},"name":"forceInit"},{"data":{"name":"moveContructor","status":"run","time":"0","classname":"Vector2D"},"name":"moveContructor"},{"data":{"name":"copyConstructor","status":"run","time":"0","classname":"Vector2D"},"name":"copyConstructor"},{"data":{"name":"constructorFor2Floats","status":"run","time":"0","classname":"Vector2D"},"name":"constructorFor2Floats"},{"data":{"name":"destructor","status":"run","time":"0","classname":"Vector2D"},"name":"destructor"},{"data":{"name":"dot","status":"run","time":"0","classname":"Vector2D"},"name":"dot"},{"data":{"name":"cross","status":"run","time":"0","classname":"Vector2D"},"name":"cross"},{"data":{"name":"length","status":"run","time":"0","classname":"Vector2D"},"name":"length"},{"data":{"name":"lengthSqr","status":"run","time":"0","classname":"Vector2D"},"name":"lengthSqr"},{"data":{"name":"normalize","status":"run","time":"0","classname":"Vector2D"},"name":"normalize"},{"data":{"name":"distance","status":"run","time":"0","classname":"Vector2D"},"name":"distance"}]}},{"name":"Vector2DI","functions":[{"type":[""],"definition":["driderSDK::Vector2DI::Vector2DI"],"argsstring":["()"],"name":["Vector2DI"],"detaileddescription":[{"para":["TEST::defaultConstructor","Default constructor "]}],"description":"TEST::defaultConstructor Default constructor  ","testName":"defaultConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"defaultConstructor","status":"run","time":"0","classname":"Vector2DI"},"name":"defaultConstructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Vector2DI::Vector2DI"],"argsstring":["(Math::FORCE_INIT k)"],"name":["Vector2DI"],"detaileddescription":[{"para":["TEST::forceInit","Default constructor",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["k"]}],"parameterdescription":[{"para":["Values are initialized with 0. "]}]}]}]}]}],"description":"TEST::forceInit Default constructor [object Object] ","testName":"forceInit","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"forceInit","status":"run","time":"0","classname":"Vector2DI"},"name":"forceInit"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Vector2DI::Vector2DI"],"argsstring":["(Vector2DI &&V)=default"],"name":["Vector2DI"],"detaileddescription":[{"para":["TEST::moveContructor","Move constructor "]}],"description":"TEST::moveContructor Move constructor  ","testName":"moveContructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"moveContructor","status":"run","time":"0","classname":"Vector2DI"},"name":"moveContructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Vector2DI::Vector2DI"],"argsstring":["(const Vector2DI &V)"],"name":["Vector2DI"],"detaileddescription":[{"para":["TEST::copyConstructor","Copy constructor "]}],"description":"TEST::copyConstructor Copy constructor  ","testName":"copyConstructor","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::Vector2DI::Vector2DI"],"argsstring":["(Int32 _x, Int32 _y)"],"name":["Vector2DI"],"detaileddescription":[{"para":["TEST::constructorFor2Floats","Initialize constructor with values.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["_x"]}],"parameterdescription":[{"para":["The x value of the vector"]}]},{"parameternamelist":[{"parametername":["_y"]}],"parameterdescription":[{"para":["The y value of the vector "]}]}]}]}]}],"description":"TEST::constructorFor2Floats Initialize constructor with values. [object Object] ","testName":"constructorFor2Floats","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::Vector2DI::~Vector2DI"],"argsstring":["()"],"name":["~Vector2DI"],"detaileddescription":[{"para":["TEST::destructor","Default destructor "]}],"description":"TEST::destructor Default destructor  ","testName":"destructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"destructor","status":"run","time":"0","classname":"Vector2DI"},"name":"destructor"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector2DI::dot"],"argsstring":["(const Vector2DI &B) const"],"name":["dot"],"detaileddescription":[{"para":["TEST::dot","Computes the dot product between this vector and the vector parameter. This operatios is commutative.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["B"]}],"parameterdescription":[{"para":["The vector against which the dot product is calculated."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["The sum of the products of the corresponding entries of the vectors. "]}]}]}],"description":"TEST::dot Computes the dot product between this vector and the vector parameter. This operatios is commutative. [object Object] ","testName":"dot","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"dot","status":"run","time":"0.001","classname":"Vector2DI"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:64\r\n      Expected: 693.5797004f\r\n      Which is: 693.57971\r\nTo be equal to: testVector2.dot(testVector3)\r\n      Which is: 694","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:64\n      Expected: 693.5797004f\n      Which is: 693.57971\nTo be equal to: testVector2.dot(testVector3)\n      Which is: 694","type":""}}],"name":"dot"},"errorFlag":true},{"type":[{"ref":[{"_":"Vector2DI","$":{"refid":"classdrider_s_d_k_1_1_vector2_d_i","kindref":"compound"}}]}],"definition":["Vector2DI driderSDK::Vector2DI::cross"],"argsstring":["() const"],"name":["cross"],"detaileddescription":[{"para":["TEST::cross","Computes the cross product between himself.",{"simplesect":[{"$":{"kind":"return"},"para":["Result vector of the cross product "]}]}]}],"description":"TEST::cross Computes the cross product between himself. [object Object] ","testName":"cross","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"cross","status":"run","time":"0","classname":"Vector2DI"},"name":"cross"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector2DI::length"],"argsstring":["() const"],"name":["length"],"detaileddescription":[{"para":["TEST::length","Computes the length of this vector.",{"simplesect":[{"$":{"kind":"return"},"para":["The length (or \"size\") of the vector. "]}]}]}],"description":"TEST::length Computes the length of this vector. [object Object] ","testName":"length","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"length","status":"run","time":"0.001","classname":"Vector2DI"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:88\r\n      Expected: 10.049965223825405f\r\n      Which is: 10.049965\r\nTo be equal to: testVector2.length()\r\n      Which is: 9.0553856","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:88\n      Expected: 10.049965223825405f\n      Which is: 10.049965\nTo be equal to: testVector2.length()\n      Which is: 9.0553856","type":""}}],"name":"length"},"errorFlag":true},{"type":["float"],"definition":["float driderSDK::Vector2DI::lengthSqr"],"argsstring":["() const"],"name":["lengthSqr"],"detaileddescription":[{"para":["TEST::lengthSqr","Computes the squared length of this vector.",{"simplesect":[{"$":{"kind":"return"},"para":["The length (or \"size\") of the vector squared. "]}]}]}],"description":"TEST::lengthSqr Computes the squared length of this vector. [object Object] ","testName":"lengthSqr","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"lengthSqr","status":"run","time":"0.001","classname":"Vector2DI"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:99\r\n      Expected: 101.00180100010002281946192341403f\r\n      Which is: 101.0018\r\nTo be equal to: testVector2.lengthSqr()\r\n      Which is: 82","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:99\n      Expected: 101.00180100010002281946192341403f\n      Which is: 101.0018\nTo be equal to: testVector2.lengthSqr()\n      Which is: 82","type":""}}],"name":"lengthSqr"},"errorFlag":true},{"type":["void"],"definition":["void driderSDK::Vector2DI::normalize"],"argsstring":["()"],"name":["normalize"],"detaileddescription":[{"para":["TEST::normalize","Normalize the vector. "]}],"description":"TEST::normalize Normalize the vector.  ","testName":"normalize","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"normalize","status":"run","time":"0","classname":"Vector2DI"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:114\r\n      Expected: 1\r\nTo be equal to: testVector3.length()\r\n      Which is: 0","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:114\n      Expected: 1\nTo be equal to: testVector3.length()\n      Which is: 0","type":""}}],"name":"normalize"},"errorFlag":true},{"type":["float"],"definition":["float driderSDK::Vector2DI::distance"],"argsstring":["(const Vector2DI &otherVector) const"],"name":["distance"],"detaileddescription":[{"para":["TEST::distance","Computes the distance between two vectors.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["Vector to calculate the distance"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Distance "]}]}]}],"description":"TEST::distance Computes the distance between two vectors. [object Object] ","testName":"distance","statusTest":"TestCase Encontrado","resultTest":"Error en esta prueba","test":{"data":{"name":"distance","status":"run","time":"0","classname":"Vector2DI"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:128\r\n      Expected: 1020.92105f\r\n      Which is: 1020.921\r\nTo be equal to: testVector4.distance(testVector5)\r\n      Which is: 1021.0935","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:128\n      Expected: 1020.92105f\n      Which is: 1020.921\nTo be equal to: testVector4.distance(testVector5)\n      Which is: 1021.0935","type":""}}],"name":"distance"},"errorFlag":true},{"type":["float"],"definition":["float driderSDK::Vector2DI::distanceSqr"],"argsstring":["(const Vector2DI &otherVector) const"],"name":["distanceSqr"],"detaileddescription":[{"para":["Computes the squared distance between two vectors.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["Vector to calculate the distance"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Distance "]}]}]}],"description":"Computes the squared distance between two vectors. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Vector2DI::equals"],"argsstring":["(const Vector2DI &otherVector, float errorRange=Math::SMALL_NUMBER) const"],"name":["equals"],"detaileddescription":[{"para":["Check's if the other vector is equal to this vector with an error range.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["otherVector"]}],"parameterdescription":[{"para":["Vector to compare with this vector."]}]},{"parameternamelist":[{"parametername":["errorRange"]}],"parameterdescription":[{"para":["The value of the error range."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["bool expression of condition. "]}]}]}],"description":"Check's if the other vector is equal to this vector with an error range. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["Int32 *"],"definition":["Int32 * driderSDK::Vector2DI::ptr"],"argsstring":["()"],"name":["ptr"],"detaileddescription":[{"para":["Gets a pointer to the first element of the matrix.",{"simplesect":[{"$":{"kind":"return"},"para":["A pointer to the first element of the matrix. "]}]}]}],"description":"Gets a pointer to the first element of the matrix. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["const Int32 *"],"definition":["const Int32 * driderSDK::Vector2DI::ptr"],"argsstring":["() const"],"name":["ptr"],"detaileddescription":[{"para":["Gets a constant pointer to the first element of the matrix.",{"simplesect":[{"$":{"kind":"return"},"para":["A constant pointer to the first element of the matrix. "]}]}]}],"description":"Gets a constant pointer to the first element of the matrix. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["Int32 &"],"definition":["Int32 & driderSDK::Vector2DI::operator[]"],"argsstring":["(const SizeT index)"],"name":["operator[]"],"detaileddescription":[{"para":["Gets a const reference to the specified element from the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["index"]}],"parameterdescription":[{"para":["The index of the element."]}]}]},{"$":{"kind":"exception"},"parameteritem":[{"parameternamelist":[{"parametername":["out_of_range"]}],"parameterdescription":[{"para":["If the index is greater than number of elements in the vector. "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A const reference to the element at the [index] position."]}]}]}],"description":"Gets a const reference to the specified element from the vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["const Int32 &"],"definition":["const Int32 & driderSDK::Vector2DI::operator[]"],"argsstring":["(const SizeT index) const"],"name":["operator[]"],"detaileddescription":[{"para":["Gets a const reference to the specified element from the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["index"]}],"parameterdescription":[{"para":["The index of the element."]}]}]},{"$":{"kind":"exception"},"parameteritem":[{"parameternamelist":[{"parametername":["out_of_range"]}],"parameterdescription":[{"para":["If the index is greater than number of elements in the vector. "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A const reference to the element at the [index] position."]}]}]}],"description":"Gets a const reference to the specified element from the vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["float"],"definition":["float driderSDK::Vector2DI::operator|"],"argsstring":["(const Vector2DI &B) const"],"name":["operator|"],"detaileddescription":[{"para":["Computes the dot product between this vector and the vector parameter. This operatios is commutative.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["B"]}],"parameterdescription":[{"para":["The vector against which the dot product is calculated."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["The sum of the products of the corresponding entries of the vectors. "]}]}]}],"description":"Computes the dot product between this vector and the vector parameter. This operatios is commutative. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":" &","ref":[{"_":"Vector2DI","$":{"refid":"classdrider_s_d_k_1_1_vector2_d_i","kindref":"compound"}}]}],"definition":["Vector2DI & driderSDK::Vector2DI::operator="],"argsstring":["(const Vector2DI &A)"],"name":["operator="],"detaileddescription":[{"para":["Set the x, y values of this vector with the x, y of the other vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"Set the x, y values of this vector with the x, y of the other vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"ref":[{"_":"Vector2DI","$":{"refid":"classdrider_s_d_k_1_1_vector2_d_i","kindref":"compound"}}]}],"definition":["Vector2DI driderSDK::Vector2DI::operator+"],"argsstring":["(const Vector2DI &A) const"],"name":["operator+"],"detaileddescription":[{"para":["Adds elements of the vector with the elements of the other vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"Adds elements of the vector with the elements of the other vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":" &","ref":[{"_":"Vector2DI","$":{"refid":"classdrider_s_d_k_1_1_vector2_d_i","kindref":"compound"}}]}],"definition":["Vector2DI & driderSDK::Vector2DI::operator+="],"argsstring":["(const Vector2DI &A)"],"name":["operator+="],"detaileddescription":[{"para":["Adds elements of the vector with the elements of the other vector and stores it in this vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"Adds elements of the vector with the elements of the other vector and stores it in this vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"ref":[{"_":"Vector2DI","$":{"refid":"classdrider_s_d_k_1_1_vector2_d_i","kindref":"compound"}}]}],"definition":["Vector2DI driderSDK::Vector2DI::operator-"],"argsstring":["(const Vector2DI &A) const"],"name":["operator-"],"detaileddescription":[{"para":["Substracts elements of the vector with the elements of the other vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"Substracts elements of the vector with the elements of the other vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":" &","ref":[{"_":"Vector2DI","$":{"refid":"classdrider_s_d_k_1_1_vector2_d_i","kindref":"compound"}}]}],"definition":["Vector2DI & driderSDK::Vector2DI::operator-="],"argsstring":["(const Vector2DI &A)"],"name":["operator-="],"detaileddescription":[{"para":["Substracts elements of the vector with the elements of the other vector and stores it in this vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"Substracts elements of the vector with the elements of the other vector and stores it in this vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"ref":[{"_":"Vector2DI","$":{"refid":"classdrider_s_d_k_1_1_vector2_d_i","kindref":"compound"}}]}],"definition":["Vector2DI driderSDK::Vector2DI::operator*"],"argsstring":["(const Vector2DI &A) const"],"name":["operator*"],"detaileddescription":[{"para":["Multiplies elements of the vector with the elements of the other vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the factors to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"Multiplies elements of the vector with the elements of the other vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":" &","ref":[{"_":"Vector2DI","$":{"refid":"classdrider_s_d_k_1_1_vector2_d_i","kindref":"compound"}}]}],"definition":["Vector2DI & driderSDK::Vector2DI::operator*="],"argsstring":["(const Vector2DI &A)"],"name":["operator*="],"detaileddescription":[{"para":["Multiplies elements of the vector with the elements of the other vector, and stores the result in this vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the factors to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"Multiplies elements of the vector with the elements of the other vector, and stores the result in this vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"ref":[{"_":"Vector2DI","$":{"refid":"classdrider_s_d_k_1_1_vector2_d_i","kindref":"compound"}}]}],"definition":["Vector2DI driderSDK::Vector2DI::operator*"],"argsstring":["(const float scalar) const"],"name":["operator*"],"detaileddescription":[{"para":["Multiplies elements of the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["The factor."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"Multiplies elements of the vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":" &","ref":[{"_":"Vector2DI","$":{"refid":"classdrider_s_d_k_1_1_vector2_d_i","kindref":"compound"}}]}],"definition":["Vector2DI & driderSDK::Vector2DI::operator*="],"argsstring":["(const float scalar)"],"name":["operator*="],"detaileddescription":[{"para":["Multiplies elements of the vector and stores it in the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["The factor."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"Multiplies elements of the vector and stores it in the vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"ref":[{"_":"Vector2DI","$":{"refid":"classdrider_s_d_k_1_1_vector2_d_i","kindref":"compound"}}]}],"definition":["Vector2DI driderSDK::Vector2DI::operator/"],"argsstring":["(const float scalar) const"],"name":["operator/"],"detaileddescription":[{"para":["Divide elements of the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["The dividend."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"Divide elements of the vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"_":" &","ref":[{"_":"Vector2DI","$":{"refid":"classdrider_s_d_k_1_1_vector2_d_i","kindref":"compound"}}]}],"definition":["Vector2DI & driderSDK::Vector2DI::operator/="],"argsstring":["(const float scalar)"],"name":["operator/="],"detaileddescription":[{"para":["Divide elements of the vector and stores it in the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["The dividend."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"Divide elements of the vector and stores it in the vector. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Vector2DI::operator=="],"argsstring":["(const Vector2DI &otherVector)"],"name":["operator=="],"detaileddescription":[{"para":["Checks if the values of the vectors are equal.",{"simplesect":[{"$":{"kind":"return"},"para":["Flag if vectors are equal. "]}]}]}],"description":"Checks if the values of the vectors are equal. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":["bool"],"definition":["bool driderSDK::Vector2DI::operator!="],"argsstring":["(const Vector2DI &otherVector)"],"name":["operator!="],"detaileddescription":[{"para":["Checks if the values of the vectors aren't equal.",{"simplesect":[{"$":{"kind":"return"},"para":["Flag if vectors aren't equal. "]}]}]}],"description":"Checks if the values of the vectors aren't equal. [object Object] ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[{"ref":[{"_":"Vector2DI","$":{"refid":"classdrider_s_d_k_1_1_vector2_d_i","kindref":"compound"}}]}],"definition":["Vector2DI driderSDK::Vector2DI::operator-"],"argsstring":["() const"],"name":["operator-"],"detaileddescription":[{"para":["Returns this vector with negated values. "]}],"description":"Returns this vector with negated values.  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"Nombre del test: Vector2DI","testClase":{"name":"Vector2DI","tests":"12","failures":"5","disabled":"0","errors":"0","time":"0.012","testCases":[{"data":{"name":"defaultConstructor","status":"run","time":"0","classname":"Vector2DI"},"name":"defaultConstructor"},{"data":{"name":"forceInit","status":"run","time":"0","classname":"Vector2DI"},"name":"forceInit"},{"data":{"name":"moveContructor","status":"run","time":"0","classname":"Vector2DI"},"name":"moveContructor"},{"data":{"name":"constructForVector2DI","status":"run","time":"0","classname":"Vector2DI"},"name":"constructForVector2DI"},{"data":{"name":"constructorFor2Int32","status":"run","time":"0","classname":"Vector2DI"},"name":"constructorFor2Int32"},{"data":{"name":"destructor","status":"run","time":"0","classname":"Vector2DI"},"name":"destructor"},{"data":{"name":"dot","status":"run","time":"0.001","classname":"Vector2DI"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:64\r\n      Expected: 693.5797004f\r\n      Which is: 693.57971\r\nTo be equal to: testVector2.dot(testVector3)\r\n      Which is: 694","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:64\n      Expected: 693.5797004f\n      Which is: 693.57971\nTo be equal to: testVector2.dot(testVector3)\n      Which is: 694","type":""}}],"name":"dot"},{"data":{"name":"cross","status":"run","time":"0","classname":"Vector2DI"},"name":"cross"},{"data":{"name":"length","status":"run","time":"0.001","classname":"Vector2DI"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:88\r\n      Expected: 10.049965223825405f\r\n      Which is: 10.049965\r\nTo be equal to: testVector2.length()\r\n      Which is: 9.0553856","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:88\n      Expected: 10.049965223825405f\n      Which is: 10.049965\nTo be equal to: testVector2.length()\n      Which is: 9.0553856","type":""}}],"name":"length"},{"data":{"name":"lengthSqr","status":"run","time":"0.001","classname":"Vector2DI"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:99\r\n      Expected: 101.00180100010002281946192341403f\r\n      Which is: 101.0018\r\nTo be equal to: testVector2.lengthSqr()\r\n      Which is: 82","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:99\n      Expected: 101.00180100010002281946192341403f\n      Which is: 101.0018\nTo be equal to: testVector2.lengthSqr()\n      Which is: 82","type":""}}],"name":"lengthSqr"},{"data":{"name":"normalize","status":"run","time":"0","classname":"Vector2DI"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:114\r\n      Expected: 1\r\nTo be equal to: testVector3.length()\r\n      Which is: 0","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:114\n      Expected: 1\nTo be equal to: testVector3.length()\n      Which is: 0","type":""}}],"name":"normalize"},{"data":{"name":"distance","status":"run","time":"0","classname":"Vector2DI"},"failure":[{"_":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:128\r\n      Expected: 1020.92105f\r\n      Which is: 1020.921\r\nTo be equal to: testVector4.distance(testVector5)\r\n      Which is: 1021.0935","$":{"message":"f:\\projectsvs2017\\drider-engine\\mathunittest\\source\\dr_unittest_vector2di.cpp:128\n      Expected: 1020.92105f\n      Which is: 1020.921\nTo be equal to: testVector4.distance(testVector5)\n      Which is: 1021.0935","type":""}}],"name":"distance"}]}},{"name":"Vector3D","functions":[{"type":[""],"definition":["driderSDK::Vector3D::Vector3D"],"argsstring":["()"],"name":["Vector3D"],"detaileddescription":[{"para":["TEST::defaultConstructor","Default constructor "]}],"description":"TEST::defaultConstructor Default constructor  ","testName":"defaultConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"defaultConstructor","status":"run","time":"0","classname":"Vector3D"},"name":"defaultConstructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Vector3D::Vector3D"],"argsstring":["(Math::FORCE_INIT k)"],"name":["Vector3D"],"detaileddescription":[{"para":["TEST::forceInit","Default constructor",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["k"]}],"parameterdescription":[{"para":["Values are initialized with 0. "]}]}]}]}]}],"description":"TEST::forceInit Default constructor [object Object] ","testName":"forceInit","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"forceInit","status":"run","time":"0","classname":"Vector3D"},"name":"forceInit"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Vector3D::Vector3D"],"argsstring":["(Vector3D &&V)=default"],"name":["Vector3D"],"detaileddescription":[{"para":["TEST::moveConstructor",{"itemizedlist":[{"listitem":[{"para":["* Move constructor "]}]}]}]}],"description":"TEST::moveConstructor [object Object] ","testName":"moveConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"moveConstructor","status":"run","time":"0","classname":"Vector3D"},"name":"moveConstructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Vector3D::Vector3D"],"argsstring":["(const Vector3D &V)"],"name":["Vector3D"],"detaileddescription":[{"para":["TEST::constructForVector3D","Copy constructor "]}],"description":"TEST::constructForVector3D Copy constructor  ","testName":"constructForVector3D","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"constructForVector3D","status":"run","time":"0","classname":"Vector3D"},"name":"constructForVector3D"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Vector3D::Vector3D"],"argsstring":["(const Vector4D &V)"],"name":["Vector3D"],"detaileddescription":[{"para":["TEST::constructForVector4D","Copy constructor for vec4 to vec3 "]}],"description":"TEST::constructForVector4D Copy constructor for vec4 to vec3  ","testName":"constructForVector4D","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"constructForVector4D","status":"run","time":"0","classname":"Vector3D"},"name":"constructForVector4D"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Vector3D::Vector3D"],"argsstring":["(float _x, float _y, float _z)"],"name":["Vector3D"],"detaileddescription":[{"para":["TEST::constructorFor3Floats","Initialize constructor with values.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["_x"]}],"parameterdescription":[{"para":["The x value of the vector"]}]},{"parameternamelist":[{"parametername":["_y"]}],"parameterdescription":[{"para":["The y value of the vector"]}]},{"parameternamelist":[{"parametername":["_z"]}],"parameterdescription":[{"para":["The z value of the vector "]}]}]}]}]}],"description":"TEST::constructorFor3Floats Initialize constructor with values. [object Object] ","testName":"constructorFor3Floats","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"constructorFor3Floats","status":"run","time":"0","classname":"Vector3D"},"name":"constructorFor3Floats"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Vector3D::~Vector3D"],"argsstring":["()"],"name":["~Vector3D"],"detaileddescription":[{"para":["TEST::destructor","Default destructor "]}],"description":"TEST::destructor Default destructor  ","testName":"destructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"destructor","status":"run","time":"0","classname":"Vector3D"},"name":"destructor"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector3D::dot"],"argsstring":["(const Vector3D &B) const"],"name":["dot"],"detaileddescription":[{"para":["TEST::dot","Computes the dot product between this vector and the vector parameter. This operatios is commutative.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["B"]}],"parameterdescription":[{"para":["The vector against which the dot product is calculated."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["The sum of the products of the corresponding entries of the vectors. "]}]}]}],"description":"TEST::dot Computes the dot product between this vector and the vector parameter. This operatios is commutative. [object Object] ","testName":"dot","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"dot","status":"run","time":"0","classname":"Vector3D"},"name":"dot"},"errorFlag":false},{"type":[{"ref":[{"_":"Vector3D","$":{"refid":"classdrider_s_d_k_1_1_vector3_d","kindref":"compound"}}]}],"definition":["Vector3D driderSDK::Vector3D::cross"],"argsstring":["(const Vector3D &B) const"],"name":["cross"],"detaileddescription":[{"para":["TEST::cross","Computes the cross product between this vector and the vector parameter. This operatios is NOT commutative.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["B"]}],"parameterdescription":[{"para":["The vector against which the cross product is calculated. B (vector parameter) is the rigth value of operation AxB"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Result vector of the cross product "]}]}]}],"description":"TEST::cross Computes the cross product between this vector and the vector parameter. This operatios is NOT commutative. [object Object] ","testName":"cross","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"cross","status":"run","time":"0","classname":"Vector3D"},"name":"cross"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector3D::length"],"argsstring":["() const"],"name":["length"],"detaileddescription":[{"para":["TEST::length","Computes the length of this vector.",{"simplesect":[{"$":{"kind":"return"},"para":["The length (or \"size\") of the vector. "]}]}]}],"description":"TEST::length Computes the length of this vector. [object Object] ","testName":"length","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"length","status":"run","time":"0.001","classname":"Vector3D"},"name":"length"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector3D::lengthSqr"],"argsstring":["() const"],"name":["lengthSqr"],"detaileddescription":[{"para":["TEST::lengthSqr","Computes the squared length of this vector.",{"simplesect":[{"$":{"kind":"return"},"para":["The length (or \"size\") of the vector squared. "]}]}]}],"description":"TEST::lengthSqr Computes the squared length of this vector. [object Object] ","testName":"lengthSqr","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"lengthSqr","status":"run","time":"0","classname":"Vector3D"},"name":"lengthSqr"},"errorFlag":false},{"type":["void"],"definition":["void driderSDK::Vector3D::normalize"],"argsstring":["()"],"name":["normalize"],"detaileddescription":[{"para":["TEST::normalize","Normalize the vector. "]}],"description":"TEST::normalize Normalize the vector.  ","testName":"normalize","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"normalize","status":"run","time":"0","classname":"Vector3D"},"name":"normalize"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector3D::distance"],"argsstring":["(const Vector3D &otherVector) const"],"name":["distance"],"detaileddescription":[{"para":["TEST::distance","Computes the distance between two vectors.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["Vector to calculate the distance"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Distance "]}]}]}],"description":"TEST::distance Computes the distance between two vectors. [object Object] ","testName":"distance","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"distance","status":"run","time":"0","classname":"Vector3D"},"name":"distance"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector3D::distanceSqr"],"argsstring":["(const Vector3D &otherVector) const"],"name":["distanceSqr"],"detaileddescription":[{"para":["TEST::distanceSqr","Computes the squared distance between two vectors.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["Vector to calculate the distance"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Distance "]}]}]}],"description":"TEST::distanceSqr Computes the squared distance between two vectors. [object Object] ","testName":"distanceSqr","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"distanceSqr","status":"run","time":"0","classname":"Vector3D"},"name":"distanceSqr"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Vector3D::equals"],"argsstring":["(const Vector3D &otherVector, float errorRange=Math::SMALL_NUMBER) const"],"name":["equals"],"detaileddescription":[{"para":["TEST::equals","Check's if the other vector is equal to this vector with an error range.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["otherVector"]}],"parameterdescription":[{"para":["Vector to compare with this vector."]}]},{"parameternamelist":[{"parametername":["errorRange"]}],"parameterdescription":[{"para":["The value of the error range."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["bool expression of condition. "]}]}]}],"description":"TEST::equals Check's if the other vector is equal to this vector with an error range. [object Object] ","testName":"equals","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"equals","status":"run","time":"0","classname":"Vector3D"},"name":"equals"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector3D::sqrDistSegment"],"argsstring":["(const Vector3D &pointA, const Vector3D &pointB) const"],"name":["sqrDistSegment"],"detaileddescription":[{"para":["TEST::sqrDistSegment","Computes the squared distance between a point and a segment.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["pointA"]}],"parameterdescription":[{"para":["Point a of the segment."]}]},{"parameternamelist":[{"parametername":["pointB"]}],"parameterdescription":[{"para":["Point b of the segment."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Distance "]}]}]}],"description":"TEST::sqrDistSegment Computes the squared distance between a point and a segment. [object Object] ","testName":"sqrDistSegment","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"sqrDistSegment","status":"run","time":"0.001","classname":"Vector3D"},"name":"sqrDistSegment"},"errorFlag":false},{"type":["float *"],"definition":["float * driderSDK::Vector3D::ptr"],"argsstring":["()"],"name":["ptr"],"detaileddescription":[{"para":["TEST::ptrOperator","Gets a pointer to the first element of the matrix.",{"simplesect":[{"$":{"kind":"return"},"para":["A pointer to the first element of the matrix. "]}]}]}],"description":"TEST::ptrOperator Gets a pointer to the first element of the matrix. [object Object] ","testName":"ptrOperator","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"ptrOperator","status":"run","time":"0","classname":"Vector3D"},"name":"ptrOperator"},"errorFlag":false},{"type":["const float *"],"definition":["const float * driderSDK::Vector3D::ptr"],"argsstring":["() const"],"name":["ptr"],"detaileddescription":[{"para":["TEST::constPtrOperator","Gets a constant pointer to the first element of the matrix.",{"simplesect":[{"$":{"kind":"return"},"para":["A constant pointer to the first element of the matrix. "]}]}]}],"description":"TEST::constPtrOperator Gets a constant pointer to the first element of the matrix. [object Object] ","testName":"constPtrOperator","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"constPtrOperator","status":"run","time":"0","classname":"Vector3D"},"name":"constPtrOperator"},"errorFlag":false},{"type":["float &"],"definition":["float & driderSDK::Vector3D::operator[]"],"argsstring":["(const SizeT index)"],"name":["operator[]"],"detaileddescription":[{"para":["TEST::operatorBrackets","Gets a reference to the specified element from the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["index"]}],"parameterdescription":[{"para":["The index of the element."]}]}]},{"$":{"kind":"exception"},"parameteritem":[{"parameternamelist":[{"parametername":["out_of_range"]}],"parameterdescription":[{"para":["If the index is greater than number of elements in the vector. "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A const reference to the element at the [index] position."]}]}]}],"description":"TEST::operatorBrackets Gets a reference to the specified element from the vector. [object Object] ","testName":"operatorBrackets","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorBrackets","status":"run","time":"0","classname":"Vector3D"},"name":"operatorBrackets"},"errorFlag":false},{"type":["const float &"],"definition":["const float & driderSDK::Vector3D::operator[]"],"argsstring":["(const SizeT index) const"],"name":["operator[]"],"detaileddescription":[{"para":["TEST::operatorBracketsPtr","Gets a reference to the specified element from the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["index"]}],"parameterdescription":[{"para":["The index of the element."]}]}]},{"$":{"kind":"exception"},"parameteritem":[{"parameternamelist":[{"parametername":["out_of_range"]}],"parameterdescription":[{"para":["If the index is greater than number of elements in the vector. "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A const reference to the element at the [index] position."]}]}]}],"description":"TEST::operatorBracketsPtr Gets a reference to the specified element from the vector. [object Object] ","testName":"operatorBracketsPtr","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorBracketsPtr","status":"run","time":"0","classname":"Vector3D"},"name":"operatorBracketsPtr"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector3D::operator|"],"argsstring":["(const Vector3D &B) const"],"name":["operator|"],"detaileddescription":[{"para":["TEST::operatorDot","Computes the dot product between this vector and the vector parameter. This operatios is commutative.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["B"]}],"parameterdescription":[{"para":["The vector against which the dot product is calculated."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["The sum of the products of the corresponding entries of the vectors. "]}]}]}],"description":"TEST::operatorDot Computes the dot product between this vector and the vector parameter. This operatios is commutative. [object Object] ","testName":"operatorDot","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorDot","status":"run","time":"0","classname":"Vector3D"},"name":"operatorDot"},"errorFlag":false},{"type":[{"ref":[{"_":"Vector3D","$":{"refid":"classdrider_s_d_k_1_1_vector3_d","kindref":"compound"}}]}],"definition":["Vector3D driderSDK::Vector3D::operator^"],"argsstring":["(const Vector3D &B) const"],"name":["operator^"],"detaileddescription":[{"para":["TEST::operatorCross","Computes the cross product between this vector and the vector parameter. This operatios is NOT commutative.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["B"]}],"parameterdescription":[{"para":["The vector against which the cross product is calculated. B (vector parameter) is the rigth value of operation AxB"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Result vector of the cross product "]}]}]}],"description":"TEST::operatorCross Computes the cross product between this vector and the vector parameter. This operatios is NOT commutative. [object Object] ","testName":"operatorCross","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorCross","status":"run","time":"0","classname":"Vector3D"},"name":"operatorCross"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Vector3D","$":{"refid":"classdrider_s_d_k_1_1_vector3_d","kindref":"compound"}}]}],"definition":["Vector3D & driderSDK::Vector3D::operator="],"argsstring":["(const Vector3D &A)"],"name":["operator="],"detaileddescription":[{"para":["TEST::operatorEqualVector3","Set the x, y, z values of this vector with the x, y, z of the other vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"TEST::operatorEqualVector3 Set the x, y, z values of this vector with the x, y, z of the other vector. [object Object] ","testName":"operatorEqualVector3","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorEqualVector3","status":"run","time":"0","classname":"Vector3D"},"name":"operatorEqualVector3"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Vector3D","$":{"refid":"classdrider_s_d_k_1_1_vector3_d","kindref":"compound"}}]}],"definition":["Vector3D & driderSDK::Vector3D::operator="],"argsstring":["(const Vector4D &A)"],"name":["operator="],"detaileddescription":[{"para":["TEST::operatorEqualVector4","Set the x, y, z values of this vector with the x, y, z of the other vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"TEST::operatorEqualVector4 Set the x, y, z values of this vector with the x, y, z of the other vector. [object Object] ","testName":"operatorEqualVector4","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorEqualVector4","status":"run","time":"0.001","classname":"Vector3D"},"name":"operatorEqualVector4"},"errorFlag":false},{"type":[{"ref":[{"_":"Vector3D","$":{"refid":"classdrider_s_d_k_1_1_vector3_d","kindref":"compound"}}]}],"definition":["Vector3D driderSDK::Vector3D::operator+"],"argsstring":["(const Vector3D &A) const"],"name":["operator+"],"detaileddescription":[{"para":["TEST::operatorAdd","Adds elements of the vector with the elements of the other vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"TEST::operatorAdd Adds elements of the vector with the elements of the other vector. [object Object] ","testName":"operatorAdd","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorAdd","status":"run","time":"0","classname":"Vector3D"},"name":"operatorAdd"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Vector3D","$":{"refid":"classdrider_s_d_k_1_1_vector3_d","kindref":"compound"}}]}],"definition":["Vector3D & driderSDK::Vector3D::operator+="],"argsstring":["(const Vector3D &A)"],"name":["operator+="],"detaileddescription":[{"para":["TEST::operatorAddEqual","Adds elements of the vector with the elements of the other vector and stores it in this vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"TEST::operatorAddEqual Adds elements of the vector with the elements of the other vector and stores it in this vector. [object Object] ","testName":"operatorAddEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorAddEqual","status":"run","time":"0","classname":"Vector3D"},"name":"operatorAddEqual"},"errorFlag":false},{"type":[{"ref":[{"_":"Vector3D","$":{"refid":"classdrider_s_d_k_1_1_vector3_d","kindref":"compound"}}]}],"definition":["Vector3D driderSDK::Vector3D::operator-"],"argsstring":["(const Vector3D &A) const"],"name":["operator-"],"detaileddescription":[{"para":["TEST::operatorMinus","Substracts elements of the vector with the elements of the other vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"TEST::operatorMinus Substracts elements of the vector with the elements of the other vector. [object Object] ","testName":"operatorMinus","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMinus","status":"run","time":"0","classname":"Vector3D"},"name":"operatorMinus"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Vector3D","$":{"refid":"classdrider_s_d_k_1_1_vector3_d","kindref":"compound"}}]}],"definition":["Vector3D & driderSDK::Vector3D::operator-="],"argsstring":["(const Vector3D &A)"],"name":["operator-="],"detaileddescription":[{"para":["TEST::operatorMinusEqual","Substracts elements of the vector with the elements of the other vector and stores it in this vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"TEST::operatorMinusEqual Substracts elements of the vector with the elements of the other vector and stores it in this vector. [object Object] ","testName":"operatorMinusEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMinusEqual","status":"run","time":"0","classname":"Vector3D"},"name":"operatorMinusEqual"},"errorFlag":false},{"type":[{"ref":[{"_":"Vector3D","$":{"refid":"classdrider_s_d_k_1_1_vector3_d","kindref":"compound"}}]}],"definition":["Vector3D driderSDK::Vector3D::operator*"],"argsstring":["(const Vector3D &A) const"],"name":["operator*"],"detaileddescription":[{"para":["TEST::operatorMultiplication","Multiplies elements of the vector with the elements of the other vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the factors to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"TEST::operatorMultiplication Multiplies elements of the vector with the elements of the other vector. [object Object] ","testName":"operatorMultiplication","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMultiplication","status":"run","time":"0.001","classname":"Vector3D"},"name":"operatorMultiplication"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Vector3D","$":{"refid":"classdrider_s_d_k_1_1_vector3_d","kindref":"compound"}}]}],"definition":["Vector3D & driderSDK::Vector3D::operator*="],"argsstring":["(const Vector3D &A)"],"name":["operator*="],"detaileddescription":[{"para":["TEST::operatorMultiplicationEqual","Multiplies elements of the vector with the elements of the other vector, and stores the result in this vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the factors to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"TEST::operatorMultiplicationEqual Multiplies elements of the vector with the elements of the other vector, and stores the result in this vector. [object Object] ","testName":"operatorMultiplicationEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMultiplicationEqual","status":"run","time":"0","classname":"Vector3D"},"name":"operatorMultiplicationEqual"},"errorFlag":false},{"type":[{"ref":[{"_":"Vector3D","$":{"refid":"classdrider_s_d_k_1_1_vector3_d","kindref":"compound"}}]}],"definition":["Vector3D driderSDK::Vector3D::operator*"],"argsstring":["(const float scalar) const"],"name":["operator*"],"detaileddescription":[{"para":["TEST::operatorMultiplicationScalar","Multiplies elements of the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["The factor."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"TEST::operatorMultiplicationScalar Multiplies elements of the vector. [object Object] ","testName":"operatorMultiplicationScalar","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMultiplicationScalar","status":"run","time":"0","classname":"Vector3D"},"name":"operatorMultiplicationScalar"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Vector3D","$":{"refid":"classdrider_s_d_k_1_1_vector3_d","kindref":"compound"}}]}],"definition":["Vector3D & driderSDK::Vector3D::operator*="],"argsstring":["(const float scalar)"],"name":["operator*="],"detaileddescription":[{"para":["TEST::operatorMultiplicationEqualScalar","Multiplies elements of the vector and stores it in the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["The factor."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"TEST::operatorMultiplicationEqualScalar Multiplies elements of the vector and stores it in the vector. [object Object] ","testName":"operatorMultiplicationEqualScalar","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorMultiplicationEqualScalar","status":"run","time":"0","classname":"Vector3D"},"name":"operatorMultiplicationEqualScalar"},"errorFlag":false},{"type":[{"ref":[{"_":"Vector3D","$":{"refid":"classdrider_s_d_k_1_1_vector3_d","kindref":"compound"}}]}],"definition":["Vector3D driderSDK::Vector3D::operator/"],"argsstring":["(const float scalar) const"],"name":["operator/"],"detaileddescription":[{"para":["TEST::operatorDivisionScalar","Divide elements of the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["The dividend."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"TEST::operatorDivisionScalar Divide elements of the vector. [object Object] ","testName":"operatorDivisionScalar","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorDivisionScalar","status":"run","time":"0","classname":"Vector3D"},"name":"operatorDivisionScalar"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Vector3D","$":{"refid":"classdrider_s_d_k_1_1_vector3_d","kindref":"compound"}}]}],"definition":["Vector3D & driderSDK::Vector3D::operator/="],"argsstring":["(const float scalar)"],"name":["operator/="],"detaileddescription":[{"para":["TEST::operatorDivisionEqualScalar","Divide elements of the vector and stores it in the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["The dividend."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"TEST::operatorDivisionEqualScalar Divide elements of the vector and stores it in the vector. [object Object] ","testName":"operatorDivisionEqualScalar","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorDivisionEqualScalar","status":"run","time":"0","classname":"Vector3D"},"name":"operatorDivisionEqualScalar"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Vector3D::operator=="],"argsstring":["(const Vector3D &otherVector)"],"name":["operator=="],"detaileddescription":[{"para":["TEST::operatorEqualEqual","Checks if the values of the vectors are equal.",{"simplesect":[{"$":{"kind":"return"},"para":["Flag if vectors are equal. "]}]}]}],"description":"TEST::operatorEqualEqual Checks if the values of the vectors are equal. [object Object] ","testName":"operatorEqualEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorEqualEqual","status":"run","time":"0","classname":"Vector3D"},"name":"operatorEqualEqual"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Vector3D::operator!="],"argsstring":["(const Vector3D &otherVector)"],"name":["operator!="],"detaileddescription":[{"para":["TEST::operatorNotEqual","Checks if the values of the vectors aren't equal.",{"simplesect":[{"$":{"kind":"return"},"para":["Flag if vectors aren't equal. "]}]}]}],"description":"TEST::operatorNotEqual Checks if the values of the vectors aren't equal. [object Object] ","testName":"operatorNotEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorNotEqual","status":"run","time":"0","classname":"Vector3D"},"name":"operatorNotEqual"},"errorFlag":false},{"type":[{"ref":[{"_":"Vector3D","$":{"refid":"classdrider_s_d_k_1_1_vector3_d","kindref":"compound"}}]}],"definition":["Vector3D driderSDK::Vector3D::operator-"],"argsstring":["() const"],"name":["operator-"],"detaileddescription":[{"para":["TEST::operatorNegate","Returns this vector with negated values. "]}],"description":"TEST::operatorNegate Returns this vector with negated values.  ","testName":"operatorNegate","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorNegate","status":"run","time":"0","classname":"Vector3D"},"name":"operatorNegate"},"errorFlag":false}],"testFile":"Nombre del test: Vector3D","testClase":{"name":"Vector3D","tests":"37","failures":"0","disabled":"0","errors":"0","time":"0.034","testCases":[{"data":{"name":"defaultConstructor","status":"run","time":"0","classname":"Vector3D"},"name":"defaultConstructor"},{"data":{"name":"forceInit","status":"run","time":"0","classname":"Vector3D"},"name":"forceInit"},{"data":{"name":"moveConstructor","status":"run","time":"0","classname":"Vector3D"},"name":"moveConstructor"},{"data":{"name":"constructForVector3D","status":"run","time":"0","classname":"Vector3D"},"name":"constructForVector3D"},{"data":{"name":"constructForVector4D","status":"run","time":"0","classname":"Vector3D"},"name":"constructForVector4D"},{"data":{"name":"constructorFor3Floats","status":"run","time":"0","classname":"Vector3D"},"name":"constructorFor3Floats"},{"data":{"name":"destructor","status":"run","time":"0","classname":"Vector3D"},"name":"destructor"},{"data":{"name":"dot","status":"run","time":"0","classname":"Vector3D"},"name":"dot"},{"data":{"name":"cross","status":"run","time":"0","classname":"Vector3D"},"name":"cross"},{"data":{"name":"length","status":"run","time":"0.001","classname":"Vector3D"},"name":"length"},{"data":{"name":"lengthSqr","status":"run","time":"0","classname":"Vector3D"},"name":"lengthSqr"},{"data":{"name":"normalize","status":"run","time":"0","classname":"Vector3D"},"name":"normalize"},{"data":{"name":"distance","status":"run","time":"0","classname":"Vector3D"},"name":"distance"},{"data":{"name":"distanceSqr","status":"run","time":"0","classname":"Vector3D"},"name":"distanceSqr"},{"data":{"name":"equals","status":"run","time":"0","classname":"Vector3D"},"name":"equals"},{"data":{"name":"sqrDistSegment","status":"run","time":"0.001","classname":"Vector3D"},"name":"sqrDistSegment"},{"data":{"name":"ptrOperator","status":"run","time":"0","classname":"Vector3D"},"name":"ptrOperator"},{"data":{"name":"constPtrOperator","status":"run","time":"0","classname":"Vector3D"},"name":"constPtrOperator"},{"data":{"name":"operatorBrackets","status":"run","time":"0","classname":"Vector3D"},"name":"operatorBrackets"},{"data":{"name":"operatorBracketsPtr","status":"run","time":"0","classname":"Vector3D"},"name":"operatorBracketsPtr"},{"data":{"name":"operatorDot","status":"run","time":"0","classname":"Vector3D"},"name":"operatorDot"},{"data":{"name":"operatorCross","status":"run","time":"0","classname":"Vector3D"},"name":"operatorCross"},{"data":{"name":"operatorEqualVector3","status":"run","time":"0","classname":"Vector3D"},"name":"operatorEqualVector3"},{"data":{"name":"operatorEqualVector4","status":"run","time":"0.001","classname":"Vector3D"},"name":"operatorEqualVector4"},{"data":{"name":"operatorAdd","status":"run","time":"0","classname":"Vector3D"},"name":"operatorAdd"},{"data":{"name":"operatorAddEqual","status":"run","time":"0","classname":"Vector3D"},"name":"operatorAddEqual"},{"data":{"name":"operatorMinus","status":"run","time":"0","classname":"Vector3D"},"name":"operatorMinus"},{"data":{"name":"operatorMinusEqual","status":"run","time":"0","classname":"Vector3D"},"name":"operatorMinusEqual"},{"data":{"name":"operatorMultiplication","status":"run","time":"0.001","classname":"Vector3D"},"name":"operatorMultiplication"},{"data":{"name":"operatorMultiplicationEqual","status":"run","time":"0","classname":"Vector3D"},"name":"operatorMultiplicationEqual"},{"data":{"name":"operatorMultiplicationScalar","status":"run","time":"0","classname":"Vector3D"},"name":"operatorMultiplicationScalar"},{"data":{"name":"operatorMultiplicationEqualScalar","status":"run","time":"0","classname":"Vector3D"},"name":"operatorMultiplicationEqualScalar"},{"data":{"name":"operatorDivisionScalar","status":"run","time":"0","classname":"Vector3D"},"name":"operatorDivisionScalar"},{"data":{"name":"operatorDivisionEqualScalar","status":"run","time":"0","classname":"Vector3D"},"name":"operatorDivisionEqualScalar"},{"data":{"name":"operatorEqualEqual","status":"run","time":"0","classname":"Vector3D"},"name":"operatorEqualEqual"},{"data":{"name":"operatorNotEqual","status":"run","time":"0","classname":"Vector3D"},"name":"operatorNotEqual"},{"data":{"name":"operatorNegate","status":"run","time":"0","classname":"Vector3D"},"name":"operatorNegate"}]}},{"name":"Vector4D","functions":[{"type":[""],"definition":["driderSDK::Vector4D::Vector4D"],"argsstring":["()"],"name":["Vector4D"],"detaileddescription":[{"para":["TEST::defaultConstructor","Default constructor. "]}],"description":"TEST::defaultConstructor Default constructor.  ","testName":"defaultConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"defaultConstructor","status":"run","time":"0","classname":"Vector4D"},"name":"defaultConstructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Vector4D::Vector4D"],"argsstring":["(Math::FORCE_INIT k)"],"name":["Vector4D"],"detaileddescription":[{"para":["TEST::forceInit","Default constructor.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["k"]}],"parameterdescription":[{"para":["Values are initialized with 0. "]}]}]}]}]}],"description":"TEST::forceInit Default constructor. [object Object] ","testName":"forceInit","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"forceInit","status":"run","time":"0","classname":"Vector4D"},"name":"forceInit"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Vector4D::Vector4D"],"argsstring":["(Vector4D &&V)=default"],"name":["Vector4D"],"detaileddescription":[{"para":["TEST::moveContructor","Move constructor. "]}],"description":"TEST::moveContructor Move constructor.  ","testName":"moveContructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"moveContructor","status":"run","time":"0","classname":"Vector4D"},"name":"moveContructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Vector4D::Vector4D"],"argsstring":["(const Vector4D &V)"],"name":["Vector4D"],"detaileddescription":[{"para":["TEST::copyConstructor4D","Copy constructor. "]}],"description":"TEST::copyConstructor4D Copy constructor.  ","testName":"copyConstructor4D","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"copyConstructor4D","status":"run","time":"0","classname":"Vector4D"},"name":"copyConstructor4D"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Vector4D::Vector4D"],"argsstring":["(const Vector3D &V)"],"name":["Vector4D"],"detaileddescription":[{"para":["TEST::copyConstructor3D","Copy constructor for vec3 to vec4. "]}],"description":"TEST::copyConstructor3D Copy constructor for vec3 to vec4.  ","testName":"copyConstructor3D","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"copyConstructor3D","status":"run","time":"0","classname":"Vector4D"},"name":"copyConstructor3D"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Vector4D::Vector4D"],"argsstring":["(const Vector3D &V, float _w)"],"name":["Vector4D"],"detaileddescription":[{"para":["TEST::copyConstructor3DwithW","Copy constructor for vec3 to vec4 with w value. "]}],"description":"TEST::copyConstructor3DwithW Copy constructor for vec3 to vec4 with w value.  ","testName":"copyConstructor3DwithW","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"copyConstructor3DwithW","status":"run","time":"0","classname":"Vector4D"},"name":"copyConstructor3DwithW"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Vector4D::Vector4D"],"argsstring":["(float _x, float _y, float _z, float _w)"],"name":["Vector4D"],"detaileddescription":[{"para":["TEST::floatsConstructor","Initialize constructor with values.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["_x"]}],"parameterdescription":[{"para":["The _x value of the vector"]}]},{"parameternamelist":[{"parametername":["_y"]}],"parameterdescription":[{"para":["The _y value of the vector"]}]},{"parameternamelist":[{"parametername":["_z"]}],"parameterdescription":[{"para":["The _z value of the vector"]}]},{"parameternamelist":[{"parametername":["_w"]}],"parameterdescription":[{"para":["The _w value of the vector "]}]}]}]}]}],"description":"TEST::floatsConstructor Initialize constructor with values. [object Object] ","testName":"floatsConstructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"floatsConstructor","status":"run","time":"0","classname":"Vector4D"},"name":"floatsConstructor"},"errorFlag":false},{"type":[""],"definition":["driderSDK::Vector4D::~Vector4D"],"argsstring":["()"],"name":["~Vector4D"],"detaileddescription":[{"para":["TEST::destructor","Default destructor "]}],"description":"TEST::destructor Default destructor  ","testName":"destructor","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"destructor","status":"run","time":"0","classname":"Vector4D"},"name":"destructor"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector4D::dot3"],"argsstring":["(const Vector4D &B) const"],"name":["dot3"],"detaileddescription":[{"para":["TEST::dot3","Computes the dot product (excluding w) between this vector and the vector parameter. This operatios is commutative.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["B"]}],"parameterdescription":[{"para":["The vector against which the dot product is calculated."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["The sum of the products of the corresponding entries of the vectors. "]}]}]}],"description":"TEST::dot3 Computes the dot product (excluding w) between this vector and the vector parameter. This operatios is commutative. [object Object] ","testName":"dot3","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"dot3","status":"run","time":"0","classname":"Vector4D"},"name":"dot3"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector4D::dot"],"argsstring":["(const Vector4D &B) const"],"name":["dot"],"detaileddescription":[{"para":["TEST::dot","Computes the dot product between this vector and the vector parameter. This operatios is commutative.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["B"]}],"parameterdescription":[{"para":["The vector against which the dot product is calculated."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["The sum of the products of the corresponding entries of the vectors. "]}]}]}],"description":"TEST::dot Computes the dot product between this vector and the vector parameter. This operatios is commutative. [object Object] ","testName":"dot","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"dot","status":"run","time":"0","classname":"Vector4D"},"name":"dot"},"errorFlag":false},{"type":[{"ref":[{"_":"Vector4D","$":{"refid":"classdrider_s_d_k_1_1_vector4_d","kindref":"compound"}}]}],"definition":["Vector4D driderSDK::Vector4D::cross"],"argsstring":["(const Vector4D &B) const"],"name":["cross"],"detaileddescription":[{"para":["TEST::cross","Computes the cross product between this vector and the vector parameter. W value is not used, and it's final value will be 0. This operatios is NOT commutative.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["B"]}],"parameterdescription":[{"para":["The vector against which the cross product is calculated. B (vector parameter) is the rigth value of operation AxB"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Result vector of the cross product "]}]}]}],"description":"TEST::cross Computes the cross product between this vector and the vector parameter. W value is not used, and it's final value will be 0. This operatios is NOT commutative. [object Object] ","testName":"cross","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"cross","status":"run","time":"0","classname":"Vector4D"},"name":"cross"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector4D::length3"],"argsstring":["() const"],"name":["length3"],"detaileddescription":[{"para":["TEST::length3","Computes the length of this vector.",{"simplesect":[{"$":{"kind":"return"},"para":["The length (or \"size\") of the vector. "]}]}]}],"description":"TEST::length3 Computes the length of this vector. [object Object] ","testName":"length3","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"length3","status":"run","time":"0","classname":"Vector4D"},"name":"length3"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector4D::length"],"argsstring":["() const"],"name":["length"],"detaileddescription":[{"para":["TEST::length","Computes the length of this vector.",{"simplesect":[{"$":{"kind":"return"},"para":["The length (or \"size\") of the vector. "]}]}]}],"description":"TEST::length Computes the length of this vector. [object Object] ","testName":"length","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"length","status":"run","time":"0","classname":"Vector4D"},"name":"length"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector4D::lengthSqr3"],"argsstring":["() const"],"name":["lengthSqr3"],"detaileddescription":[{"para":["TEST::lengthSqr3","Computes the squared length of this vector.",{"simplesect":[{"$":{"kind":"return"},"para":["The length (or \"size\") of the vector squared. "]}]}]}],"description":"TEST::lengthSqr3 Computes the squared length of this vector. [object Object] ","testName":"lengthSqr3","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"lengthSqr3","status":"run","time":"0","classname":"Vector4D"},"name":"lengthSqr3"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector4D::lengthSqr"],"argsstring":["() const"],"name":["lengthSqr"],"detaileddescription":[{"para":["TEST::lengthSqr","Computes the squared length of this vector.",{"simplesect":[{"$":{"kind":"return"},"para":["The length (or \"size\") of the vector squared. "]}]}]}],"description":"TEST::lengthSqr Computes the squared length of this vector. [object Object] ","testName":"lengthSqr","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"lengthSqr","status":"run","time":"0","classname":"Vector4D"},"name":"lengthSqr"},"errorFlag":false},{"type":["void"],"definition":["void driderSDK::Vector4D::normalize3"],"argsstring":["()"],"name":["normalize3"],"detaileddescription":[{"para":["TEST::normalize3","Normalize the vector. "]}],"description":"TEST::normalize3 Normalize the vector.  ","testName":"normalize3","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"normalize3","status":"run","time":"0","classname":"Vector4D"},"name":"normalize3"},"errorFlag":false},{"type":["void"],"definition":["void driderSDK::Vector4D::normalize"],"argsstring":["()"],"name":["normalize"],"detaileddescription":[{"para":["TEST::normalize","Normalize the vector. "]}],"description":"TEST::normalize Normalize the vector.  ","testName":"normalize","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"normalize","status":"run","time":"0","classname":"Vector4D"},"name":"normalize"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector4D::distance3"],"argsstring":["(const Vector4D &otherVector) const"],"name":["distance3"],"detaileddescription":[{"para":["TEST::distance3","Computes the distance between two vectors.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["Vector to calculate the distance"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Distance "]}]}]}],"description":"TEST::distance3 Computes the distance between two vectors. [object Object] ","testName":"distance3","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"distance3","status":"run","time":"0","classname":"Vector4D"},"name":"distance3"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector4D::distance"],"argsstring":["(const Vector4D &otherVector) const"],"name":["distance"],"detaileddescription":[{"para":["TEST::distance","Computes the distance between two vectors.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["Vector to calculate the distance"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Distance "]}]}]}],"description":"TEST::distance Computes the distance between two vectors. [object Object] ","testName":"distance","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"distance","status":"run","time":"0","classname":"Vector4D"},"name":"distance"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector4D::distanceSqr3"],"argsstring":["(const Vector4D &otherVector) const"],"name":["distanceSqr3"],"detaileddescription":[{"para":["TEST::distanceSqr3","Computes the squared distance between two vectors.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["Vector to calculate the distance"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Distance "]}]}]}],"description":"TEST::distanceSqr3 Computes the squared distance between two vectors. [object Object] ","testName":"distanceSqr3","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"distanceSqr3","status":"run","time":"0","classname":"Vector4D"},"name":"distanceSqr3"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector4D::distanceSqr"],"argsstring":["(const Vector4D &otherVector) const"],"name":["distanceSqr"],"detaileddescription":[{"para":["TEST::distanceSqr","Computes the squared distance between two vectors.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["Vector to calculate the distance"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Distance "]}]}]}],"description":"TEST::distanceSqr Computes the squared distance between two vectors. [object Object] ","testName":"distanceSqr","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"distanceSqr","status":"run","time":"0","classname":"Vector4D"},"name":"distanceSqr"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Vector4D::equals"],"argsstring":["(const Vector4D &otherVector, float errorRange=Math::SMALL_NUMBER) const"],"name":["equals"],"detaileddescription":[{"para":["TEST::equals","Check's if the other vector is equal to this vector with an error range.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["otherVector"]}],"parameterdescription":[{"para":["Vector to compare with this vector."]}]},{"parameternamelist":[{"parametername":["errorRange"]}],"parameterdescription":[{"para":["The value of the error range."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["bool expression of condition. "]}]}]}],"description":"TEST::equals Check's if the other vector is equal to this vector with an error range. [object Object] ","testName":"equals","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"equals","status":"run","time":"0","classname":"Vector4D"},"name":"equals"},"errorFlag":false},{"type":["float *"],"definition":["float * driderSDK::Vector4D::ptr"],"argsstring":["()"],"name":["ptr"],"detaileddescription":[{"para":["TEST::ptrOperator","Gets a pointer to the first element of the matrix.",{"simplesect":[{"$":{"kind":"return"},"para":["A pointer to the first element of the matrix. "]}]}]}],"description":"TEST::ptrOperator Gets a pointer to the first element of the matrix. [object Object] ","testName":"ptrOperator","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"ptrOperator","status":"run","time":"0","classname":"Vector4D"},"name":"ptrOperator"},"errorFlag":false},{"type":["const float *"],"definition":["const float * driderSDK::Vector4D::ptr"],"argsstring":["() const"],"name":["ptr"],"detaileddescription":[{"para":["TEST::constPtrOperator","Gets a constant pointer to the first element of the matrix.",{"simplesect":[{"$":{"kind":"return"},"para":["A constant pointer to the first element of the matrix. "]}]}]}],"description":"TEST::constPtrOperator Gets a constant pointer to the first element of the matrix. [object Object] ","testName":"constPtrOperator","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"constPtrOperator","status":"run","time":"0","classname":"Vector4D"},"name":"constPtrOperator"},"errorFlag":false},{"type":["float &"],"definition":["float & driderSDK::Vector4D::operator[]"],"argsstring":["(const SizeT index)"],"name":["operator[]"],"detaileddescription":[{"para":["TEST::indexOperator","Gets a reference to the specified element from the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["index"]}],"parameterdescription":[{"para":["The index of the element."]}]}]},{"$":{"kind":"exception"},"parameteritem":[{"parameternamelist":[{"parametername":["out_of_range"]}],"parameterdescription":[{"para":["If the index is greater than number of elements in the vector. "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A const reference to the element at the [index] position."]}]}]}],"description":"TEST::indexOperator Gets a reference to the specified element from the vector. [object Object] ","testName":"indexOperator","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"indexOperator","status":"run","time":"0","classname":"Vector4D"},"name":"indexOperator"},"errorFlag":false},{"type":["const float &"],"definition":["const float & driderSDK::Vector4D::operator[]"],"argsstring":["(const SizeT index) const"],"name":["operator[]"],"detaileddescription":[{"para":["TEST::constIndexOperator","Gets a const reference to the specified element from the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["index"]}],"parameterdescription":[{"para":["The index of the element."]}]}]},{"$":{"kind":"exception"},"parameteritem":[{"parameternamelist":[{"parametername":["out_of_range"]}],"parameterdescription":[{"para":["If the index is greater than number of elements in the vector. "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A const reference to the element at the [index] position."]}]}]}],"description":"TEST::constIndexOperator Gets a const reference to the specified element from the vector. [object Object] ","testName":"constIndexOperator","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"constIndexOperator","status":"run","time":"0","classname":"Vector4D"},"name":"constIndexOperator"},"errorFlag":false},{"type":["float"],"definition":["float driderSDK::Vector4D::operator|"],"argsstring":["(const Vector4D &B) const"],"name":["operator|"],"detaileddescription":[{"para":["TEST::dotOperator","Computes the dot product between this vector and the vector parameter. This operatios is commutative.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["B"]}],"parameterdescription":[{"para":["The vector against which the dot product is calculated."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["The sum of the products of the corresponding entries of the vectors. "]}]}]}],"description":"TEST::dotOperator Computes the dot product between this vector and the vector parameter. This operatios is commutative. [object Object] ","testName":"dotOperator","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"dotOperator","status":"run","time":"0","classname":"Vector4D"},"name":"dotOperator"},"errorFlag":false},{"type":[{"ref":[{"_":"Vector4D","$":{"refid":"classdrider_s_d_k_1_1_vector4_d","kindref":"compound"}}]}],"definition":["Vector4D driderSDK::Vector4D::operator^"],"argsstring":["(const Vector4D &B) const"],"name":["operator^"],"detaileddescription":[{"para":["TEST::crossOperator","Computes the cross product between this vector and the vector parameter. This operatios is NOT commutative.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["B"]}],"parameterdescription":[{"para":["The vector against which the cross product is calculated. B (vector parameter) is the rigth value of operation AxB"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["Result vector of the cross product "]}]}]}],"description":"TEST::crossOperator Computes the cross product between this vector and the vector parameter. This operatios is NOT commutative. [object Object] ","testName":"crossOperator","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"crossOperator","status":"run","time":"0","classname":"Vector4D"},"name":"crossOperator"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Vector4D","$":{"refid":"classdrider_s_d_k_1_1_vector4_d","kindref":"compound"}}]}],"definition":["Vector4D & driderSDK::Vector4D::operator="],"argsstring":["(const Vector4D &A)"],"name":["operator="],"detaileddescription":[{"para":["TEST::equalvec4Operator","Set the x, y, z, w values of this vector with the x, y, z, w of the other vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"TEST::equalvec4Operator Set the x, y, z, w values of this vector with the x, y, z, w of the other vector. [object Object] ","testName":"equalvec4Operator","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"equalvec4Operator","status":"run","time":"0","classname":"Vector4D"},"name":"equalvec4Operator"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Vector4D","$":{"refid":"classdrider_s_d_k_1_1_vector4_d","kindref":"compound"}}]}],"definition":["Vector4D & driderSDK::Vector4D::operator="],"argsstring":["(const Vector3D &A)"],"name":["operator="],"detaileddescription":[{"para":["TEST::equalvec3Operator","Set the x, y, z values of this vector with the x, y, z of the other vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"TEST::equalvec3Operator Set the x, y, z values of this vector with the x, y, z of the other vector. [object Object] ","testName":"equalvec3Operator","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"equalvec3Operator","status":"run","time":"0","classname":"Vector4D"},"name":"equalvec3Operator"},"errorFlag":false},{"type":[{"ref":[{"_":"Vector4D","$":{"refid":"classdrider_s_d_k_1_1_vector4_d","kindref":"compound"}}]}],"definition":["Vector4D driderSDK::Vector4D::operator+"],"argsstring":["(const Vector4D &A) const"],"name":["operator+"],"detaileddescription":[{"para":["TEST::addition","Adds elements of the vector with the elements of the other vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"TEST::addition Adds elements of the vector with the elements of the other vector. [object Object] ","testName":"addition","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"addition","status":"run","time":"0","classname":"Vector4D"},"name":"addition"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Vector4D","$":{"refid":"classdrider_s_d_k_1_1_vector4_d","kindref":"compound"}}]}],"definition":["Vector4D & driderSDK::Vector4D::operator+="],"argsstring":["(const Vector4D &A)"],"name":["operator+="],"detaileddescription":[{"para":["TEST::addEqual","Adds elements of the vector with the elements of the other vector and stores it in this vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"TEST::addEqual Adds elements of the vector with the elements of the other vector and stores it in this vector. [object Object] ","testName":"addEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"addEqual","status":"run","time":"0","classname":"Vector4D"},"name":"addEqual"},"errorFlag":false},{"type":[{"ref":[{"_":"Vector4D","$":{"refid":"classdrider_s_d_k_1_1_vector4_d","kindref":"compound"}}]}],"definition":["Vector4D driderSDK::Vector4D::operator-"],"argsstring":["(const Vector4D &A) const"],"name":["operator-"],"detaileddescription":[{"para":["TEST::substraction","Substracts elements of the vector with the elements of the other vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"TEST::substraction Substracts elements of the vector with the elements of the other vector. [object Object] ","testName":"substraction","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"substraction","status":"run","time":"0","classname":"Vector4D"},"name":"substraction"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Vector4D","$":{"refid":"classdrider_s_d_k_1_1_vector4_d","kindref":"compound"}}]}],"definition":["Vector4D & driderSDK::Vector4D::operator-="],"argsstring":["(const Vector4D &A)"],"name":["operator-="],"detaileddescription":[{"para":["TEST::lessEqual","Substracts elements of the vector with the elements of the other vector and stores it in this vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the values to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"TEST::lessEqual Substracts elements of the vector with the elements of the other vector and stores it in this vector. [object Object] ","testName":"lessEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"lessEqual","status":"run","time":"0","classname":"Vector4D"},"name":"lessEqual"},"errorFlag":false},{"type":[{"ref":[{"_":"Vector4D","$":{"refid":"classdrider_s_d_k_1_1_vector4_d","kindref":"compound"}}]}],"definition":["Vector4D driderSDK::Vector4D::operator*"],"argsstring":["(const Vector4D &A) const"],"name":["operator*"],"detaileddescription":[{"para":["TEST::multiplication","Multiplies elements of the vector with the elements of the other vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the factors to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"TEST::multiplication Multiplies elements of the vector with the elements of the other vector. [object Object] ","testName":"multiplication","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"multiplication","status":"run","time":"0","classname":"Vector4D"},"name":"multiplication"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Vector4D","$":{"refid":"classdrider_s_d_k_1_1_vector4_d","kindref":"compound"}}]}],"definition":["Vector4D & driderSDK::Vector4D::operator*="],"argsstring":["(const Vector4D &A)"],"name":["operator*="],"detaileddescription":[{"para":["TEST::mulEqual","Multiplies elements of the vector with the elements of the other vector, and stores the result in this vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["A"]}],"parameterdescription":[{"para":["The vector with the factors to use."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"TEST::mulEqual Multiplies elements of the vector with the elements of the other vector, and stores the result in this vector. [object Object] ","testName":"mulEqual","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"mulEqual","status":"run","time":"0","classname":"Vector4D"},"name":"mulEqual"},"errorFlag":false},{"type":[{"ref":[{"_":"Vector4D","$":{"refid":"classdrider_s_d_k_1_1_vector4_d","kindref":"compound"}}]}],"definition":["Vector4D driderSDK::Vector4D::operator*"],"argsstring":["(const float scalar) const"],"name":["operator*"],"detaileddescription":[{"para":["TEST::multiplicationFloat","Multiplies elements of the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["The factor."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"TEST::multiplicationFloat Multiplies elements of the vector. [object Object] ","testName":"multiplicationFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"multiplicationFloat","status":"run","time":"0","classname":"Vector4D"},"name":"multiplicationFloat"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Vector4D","$":{"refid":"classdrider_s_d_k_1_1_vector4_d","kindref":"compound"}}]}],"definition":["Vector4D & driderSDK::Vector4D::operator*="],"argsstring":["(const float scalar)"],"name":["operator*="],"detaileddescription":[{"para":["TEST::mulEqualFloat","Multiplies elements of the vector and stores it in the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["The factor."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"TEST::mulEqualFloat Multiplies elements of the vector and stores it in the vector. [object Object] ","testName":"mulEqualFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"mulEqualFloat","status":"run","time":"0","classname":"Vector4D"},"name":"mulEqualFloat"},"errorFlag":false},{"type":[{"ref":[{"_":"Vector4D","$":{"refid":"classdrider_s_d_k_1_1_vector4_d","kindref":"compound"}}]}],"definition":["Vector4D driderSDK::Vector4D::operator/"],"argsstring":["(const float scalar) const"],"name":["operator/"],"detaileddescription":[{"para":["TEST::divitionFloat","Divide elements of the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["The dividend."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A vector with the result values. "]}]}]}],"description":"TEST::divitionFloat Divide elements of the vector. [object Object] ","testName":"divitionFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"divitionFloat","status":"run","time":"0.001","classname":"Vector4D"},"name":"divitionFloat"},"errorFlag":false},{"type":[{"_":" &","ref":[{"_":"Vector4D","$":{"refid":"classdrider_s_d_k_1_1_vector4_d","kindref":"compound"}}]}],"definition":["Vector4D & driderSDK::Vector4D::operator/="],"argsstring":["(const float scalar)"],"name":["operator/="],"detaileddescription":[{"para":["TEST::divEqualFloat","Divide elements of the vector and stores it in the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["The dividend."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to this vector. "]}]}]}],"description":"TEST::divEqualFloat Divide elements of the vector and stores it in the vector. [object Object] ","testName":"divEqualFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"divEqualFloat","status":"run","time":"0","classname":"Vector4D"},"name":"divEqualFloat"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Vector4D::operator=="],"argsstring":["(const Vector4D &otherVector)"],"name":["operator=="],"detaileddescription":[{"para":["TEST::equalOperator","Checks if the values of the vectors are equal.",{"simplesect":[{"$":{"kind":"return"},"para":["Flag if vectors are equal. "]}]}]}],"description":"TEST::equalOperator Checks if the values of the vectors are equal. [object Object] ","testName":"equalOperator","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"equalOperator","status":"run","time":"0","classname":"Vector4D"},"name":"equalOperator"},"errorFlag":false},{"type":["bool"],"definition":["bool driderSDK::Vector4D::operator!="],"argsstring":["(const Vector4D &otherVector)"],"name":["operator!="],"detaileddescription":[{"para":["TEST::notEqualOperator","Checks if the values of the vectors aren't equal.",{"simplesect":[{"$":{"kind":"return"},"para":["Flag if vectors aren't equal. "]}]}]}],"description":"TEST::notEqualOperator Checks if the values of the vectors aren't equal. [object Object] ","testName":"notEqualOperator","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"notEqualOperator","status":"run","time":"0","classname":"Vector4D"},"name":"notEqualOperator"},"errorFlag":false},{"type":[{"ref":[{"_":"Vector4D","$":{"refid":"classdrider_s_d_k_1_1_vector4_d","kindref":"compound"}}]}],"definition":["Vector4D driderSDK::Vector4D::operator-"],"argsstring":["() const"],"name":["operator-"],"detaileddescription":[{"para":["TEST::unaryLess","Returns this vector with negated values. "]}],"description":"TEST::unaryLess Returns this vector with negated values.  ","testName":"unaryLess","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"unaryLess","status":"run","time":"0","classname":"Vector4D"},"name":"unaryLess"},"errorFlag":false}],"testFile":"Nombre del test: Vector4D","testClase":{"name":"Vector4D","tests":"43","failures":"0","disabled":"0","errors":"0","time":"0.039","testCases":[{"data":{"name":"defaultConstructor","status":"run","time":"0","classname":"Vector4D"},"name":"defaultConstructor"},{"data":{"name":"forceInit","status":"run","time":"0","classname":"Vector4D"},"name":"forceInit"},{"data":{"name":"moveContructor","status":"run","time":"0","classname":"Vector4D"},"name":"moveContructor"},{"data":{"name":"copyConstructor4D","status":"run","time":"0","classname":"Vector4D"},"name":"copyConstructor4D"},{"data":{"name":"copyConstructor3D","status":"run","time":"0","classname":"Vector4D"},"name":"copyConstructor3D"},{"data":{"name":"copyConstructor3DwithW","status":"run","time":"0","classname":"Vector4D"},"name":"copyConstructor3DwithW"},{"data":{"name":"floatsConstructor","status":"run","time":"0","classname":"Vector4D"},"name":"floatsConstructor"},{"data":{"name":"destructor","status":"run","time":"0","classname":"Vector4D"},"name":"destructor"},{"data":{"name":"dot3","status":"run","time":"0","classname":"Vector4D"},"name":"dot3"},{"data":{"name":"dot","status":"run","time":"0","classname":"Vector4D"},"name":"dot"},{"data":{"name":"cross","status":"run","time":"0","classname":"Vector4D"},"name":"cross"},{"data":{"name":"length3","status":"run","time":"0","classname":"Vector4D"},"name":"length3"},{"data":{"name":"length","status":"run","time":"0","classname":"Vector4D"},"name":"length"},{"data":{"name":"lengthSqr3","status":"run","time":"0","classname":"Vector4D"},"name":"lengthSqr3"},{"data":{"name":"lengthSqr","status":"run","time":"0","classname":"Vector4D"},"name":"lengthSqr"},{"data":{"name":"normalize3","status":"run","time":"0","classname":"Vector4D"},"name":"normalize3"},{"data":{"name":"normalize","status":"run","time":"0","classname":"Vector4D"},"name":"normalize"},{"data":{"name":"distance3","status":"run","time":"0","classname":"Vector4D"},"name":"distance3"},{"data":{"name":"distance","status":"run","time":"0","classname":"Vector4D"},"name":"distance"},{"data":{"name":"distanceSqr3","status":"run","time":"0","classname":"Vector4D"},"name":"distanceSqr3"},{"data":{"name":"distanceSqr","status":"run","time":"0","classname":"Vector4D"},"name":"distanceSqr"},{"data":{"name":"equals","status":"run","time":"0","classname":"Vector4D"},"name":"equals"},{"data":{"name":"ptrOperator","status":"run","time":"0","classname":"Vector4D"},"name":"ptrOperator"},{"data":{"name":"constPtrOperator","status":"run","time":"0","classname":"Vector4D"},"name":"constPtrOperator"},{"data":{"name":"indexOperator","status":"run","time":"0","classname":"Vector4D"},"name":"indexOperator"},{"data":{"name":"constIndexOperator","status":"run","time":"0","classname":"Vector4D"},"name":"constIndexOperator"},{"data":{"name":"dotOperator","status":"run","time":"0","classname":"Vector4D"},"name":"dotOperator"},{"data":{"name":"crossOperator","status":"run","time":"0","classname":"Vector4D"},"name":"crossOperator"},{"data":{"name":"equalvec4Operator","status":"run","time":"0","classname":"Vector4D"},"name":"equalvec4Operator"},{"data":{"name":"equalvec3Operator","status":"run","time":"0","classname":"Vector4D"},"name":"equalvec3Operator"},{"data":{"name":"addition","status":"run","time":"0","classname":"Vector4D"},"name":"addition"},{"data":{"name":"addEqual","status":"run","time":"0","classname":"Vector4D"},"name":"addEqual"},{"data":{"name":"substraction","status":"run","time":"0","classname":"Vector4D"},"name":"substraction"},{"data":{"name":"lessEqual","status":"run","time":"0","classname":"Vector4D"},"name":"lessEqual"},{"data":{"name":"multiplication","status":"run","time":"0","classname":"Vector4D"},"name":"multiplication"},{"data":{"name":"mulEqual","status":"run","time":"0","classname":"Vector4D"},"name":"mulEqual"},{"data":{"name":"multiplicationFloat","status":"run","time":"0","classname":"Vector4D"},"name":"multiplicationFloat"},{"data":{"name":"mulEqualFloat","status":"run","time":"0","classname":"Vector4D"},"name":"mulEqualFloat"},{"data":{"name":"divitionFloat","status":"run","time":"0.001","classname":"Vector4D"},"name":"divitionFloat"},{"data":{"name":"divEqualFloat","status":"run","time":"0","classname":"Vector4D"},"name":"divEqualFloat"},{"data":{"name":"equalOperator","status":"run","time":"0","classname":"Vector4D"},"name":"equalOperator"},{"data":{"name":"notEqualOperator","status":"run","time":"0","classname":"Vector4D"},"name":"notEqualOperator"},{"data":{"name":"unaryLess","status":"run","time":"0","classname":"Vector4D"},"name":"unaryLess"}]}},{"name":"VectorN","functions":[{"type":[""],"definition":["driderSDK::VectorN< _elements >::VectorN"],"argsstring":["()"],"name":["VectorN"],"detaileddescription":[{"para":["Default constructor "]}],"description":"Default constructor  ","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"},{"type":[""],"definition":["driderSDK::VectorN< _elements >::VectorN"],"argsstring":["(float _scalar)"],"name":["VectorN"],"detaileddescription":[{"para":["TEST::constructorOneFloat Constructor using a scalar value.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["_scalar"]}],"parameterdescription":[{"para":["All the elements of the vector are initialized to this value. "]}]}]}]}]}],"description":"TEST::constructorOneFloat Constructor using a scalar value. [object Object] ","testName":"constructorOneFloat","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"constructorOneFloat","status":"run","time":"0","classname":"VectorN"},"name":"constructorOneFloat"},"errorFlag":false},{"type":["FORCEINLINE SizeT"],"definition":["FORCEINLINE SizeT driderSDK::VectorN< _elements >::elements"],"argsstring":["() const"],"name":["elements"],"detaileddescription":[{"para":["TEST::elements Number of elements in the vector.",{"simplesect":[{"$":{"kind":"return"},"para":["The number of elements the vector contains. "]}]}]}],"description":"TEST::elements Number of elements in the vector. [object Object] ","testName":"elements","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"elements","status":"run","time":"0","classname":"VectorN"},"name":"elements"},"errorFlag":false},{"type":["FORCEINLINE float &"],"definition":["FORCEINLINE float& driderSDK::VectorN< _elements >::operator[]"],"argsstring":["(SizeT index)"],"name":["operator[]"],"detaileddescription":[{"para":["TEST::operatorBrakets Gets a reference to the specified element from the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["index"]}],"parameterdescription":[{"para":["The index of the element."]}]}]},{"$":{"kind":"exception"},"parameteritem":[{"parameternamelist":[{"parametername":["out_of_range"]}],"parameterdescription":[{"para":["If the index is greater than number of elements in the vector. "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to the element at the [index] position."]}]}]}],"description":"TEST::operatorBrakets Gets a reference to the specified element from the vector. [object Object] ","testName":"operatorBrakets","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorBrakets","status":"run","time":"0","classname":"VectorN"},"name":"operatorBrakets"},"errorFlag":false},{"type":["FORCEINLINE const float &"],"definition":["FORCEINLINE const float& driderSDK::VectorN< _elements >::operator[]"],"argsstring":["(SizeT index) const"],"name":["operator[]"],"detaileddescription":[{"para":["TEST::operatorBrakets Gets a const reference to the specified element from the vector.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["index"]}],"parameterdescription":[{"para":["The index of the element."]}]}]},{"$":{"kind":"exception"},"parameteritem":[{"parameternamelist":[{"parametername":["out_of_range"]}],"parameterdescription":[{"para":["If the index is greater than number of elements in the vector. "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A const reference to the element at the [index] position."]}]}]}],"description":"TEST::operatorBrakets Gets a const reference to the specified element from the vector. [object Object] ","testName":"operatorBrakets","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"operatorBrakets","status":"run","time":"0","classname":"VectorN"},"name":"operatorBrakets"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["FORCEINLINE float driderSDK::VectorN< _elements >::dot"],"argsstring":["(const VectorN &other) const"],"name":["dot"],"detaileddescription":[{"para":["TEST::dot Computes the dot product between 2 vectors.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["other"]}],"parameterdescription":[{"para":["The vector against which the dot product is calculated."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A const reference to the element at the [index] position. "]}]}]}],"description":"TEST::dot Computes the dot product between 2 vectors. [object Object] ","testName":"dot","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"dot","status":"run","time":"0","classname":"VectorN"},"name":"dot"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["FORCEINLINE float driderSDK::VectorN< _elements >::length"],"argsstring":["() const"],"name":["length"],"detaileddescription":[{"para":["TEST::length Computes the length of the vector.",{"simplesect":[{"$":{"kind":"return"},"para":["Length of the vector. "]}]}]}],"description":"TEST::length Computes the length of the vector. [object Object] ","testName":"length","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"length","status":"run","time":"0","classname":"VectorN"},"name":"length"},"errorFlag":false},{"type":["FORCEINLINE float"],"definition":["FORCEINLINE float driderSDK::VectorN< _elements >::lengthSqr"],"argsstring":["() const"],"name":["lengthSqr"],"detaileddescription":[{"para":["TEST::lengthSqr Computes the squared length of the vector.",{"simplesect":[{"$":{"kind":"return"},"para":["Squared length of the vector. "]}]}]}],"description":"TEST::lengthSqr Computes the squared length of the vector. [object Object] ","testName":"lengthSqr","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"lengthSqr","status":"run","time":"0","classname":"VectorN"},"name":"lengthSqr"},"errorFlag":false},{"type":["FORCEINLINE void"],"definition":["FORCEINLINE void driderSDK::VectorN< _elements >::normalize"],"argsstring":["()"],"name":["normalize"],"detaileddescription":[{"para":["TEST::normalize Normalize the plane "]}],"description":"TEST::normalize Normalize the plane  ","testName":"normalize","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"normalize","status":"run","time":"0","classname":"VectorN"},"name":"normalize"},"errorFlag":false},{"type":["FORCEINLINE float *"],"definition":["FORCEINLINE float* driderSDK::VectorN< _elements >::ptr"],"argsstring":["()"],"name":["ptr"],"detaileddescription":[{"para":["TEST::ptr Gets a pointer to the first element of the vector.",{"simplesect":[{"$":{"kind":"return"},"para":["The pointer to the first element of the vector. "]}]}]}],"description":"TEST::ptr Gets a pointer to the first element of the vector. [object Object] ","testName":"ptr","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"ptr","status":"run","time":"0","classname":"VectorN"},"name":"ptr"},"errorFlag":false},{"type":["FORCEINLINE const float *"],"definition":["FORCEINLINE const float* driderSDK::VectorN< _elements >::ptr"],"argsstring":["() const"],"name":["ptr"],"detaileddescription":[{"para":["TEST::ptr Gets a constant pointer to the first element of the vector.",{"simplesect":[{"$":{"kind":"return"},"para":["The constant pointer to the first element of the vector. "]}]}]}],"description":"TEST::ptr Gets a constant pointer to the first element of the vector. [object Object] ","testName":"ptr","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"ptr","status":"run","time":"0","classname":"VectorN"},"name":"ptr"},"errorFlag":false},{"type":[{"_":"FORCEINLINE  &","ref":[{"_":"VectorN","$":{"refid":"classdrider_s_d_k_1_1_vector_n","kindref":"compound"}}]}],"definition":["FORCEINLINE VectorN& driderSDK::VectorN< _elements >::operator*="],"argsstring":["(float scalar)"],"name":["operator*="],"detaileddescription":[{"para":["TEST::assignmentByMultply Overload of binary operator *=","This operator performs a memberwise multiplication by a scalar and assigns the result to *this.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["Right operand (a scalar value)."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to the transformed vector (*this). "]}]}]}],"description":"TEST::assignmentByMultply Overload of binary operator *= This operator performs a memberwise multiplication by a scalar and assigns the result to *this. [object Object] ","testName":"assignmentByMultply","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"assignmentByMultply","status":"run","time":"0","classname":"VectorN"},"name":"assignmentByMultply"},"errorFlag":false},{"type":[{"_":"FORCEINLINE  &","ref":[{"_":"VectorN","$":{"refid":"classdrider_s_d_k_1_1_vector_n","kindref":"compound"}}]}],"definition":["FORCEINLINE VectorN& driderSDK::VectorN< _elements >::operator/="],"argsstring":["(float scalar)"],"name":["operator/="],"detaileddescription":[{"para":["TEST::assignmentByDivision Overload of binary operator *=","This operator performs a memberwise division by a scalar and assigns the result to *this.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["scalar"]}],"parameterdescription":[{"para":["Right operand (a scalar value)."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to the transformed vector (*this). "]}]}]}],"description":"TEST::assignmentByDivision Overload of binary operator *= This operator performs a memberwise division by a scalar and assigns the result to *this. [object Object] ","testName":"assignmentByDivision","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"assignmentByDivision","status":"run","time":"0","classname":"VectorN"},"name":"assignmentByDivision"},"errorFlag":false},{"type":[{"_":"FORCEINLINE  &","ref":[{"_":"VectorN","$":{"refid":"classdrider_s_d_k_1_1_vector_n","kindref":"compound"}}]}],"definition":["FORCEINLINE VectorN& driderSDK::VectorN< _elements >::operator+="],"argsstring":["(const VectorN &rhs)"],"name":["operator+="],"detaileddescription":[{"para":["TEST::assignmentByAddition Overload of binary operator +=.","This operator performs a memberwise addition of both vectors and assigns the result to *this.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["rhs"]}],"parameterdescription":[{"para":["Right operand (a vector with same number of elements)."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to the transformed vector (*this). "]}]}]}],"description":"TEST::assignmentByAddition Overload of binary operator +=. This operator performs a memberwise addition of both vectors and assigns the result to *this. [object Object] ","testName":"assignmentByAddition","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"assignmentByAddition","status":"run","time":"0","classname":"VectorN"},"name":"assignmentByAddition"},"errorFlag":false},{"type":[{"_":"FORCEINLINE  &","ref":[{"_":"VectorN","$":{"refid":"classdrider_s_d_k_1_1_vector_n","kindref":"compound"}}]}],"definition":["FORCEINLINE VectorN& driderSDK::VectorN< _elements >::operator-="],"argsstring":["(const VectorN &rhs)"],"name":["operator-="],"detaileddescription":[{"para":["TEST::assignmentBySubtraction Overload of binary operator +=.","This operator performs a memberwise subtraction of both vectors and assigns the result to *this.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["rhs"]}],"parameterdescription":[{"para":["Right operand (a vector with same number of elements)."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["A reference to the transformed vector (*this). "]}]}]}],"description":"TEST::assignmentBySubtraction Overload of binary operator +=. This operator performs a memberwise subtraction of both vectors and assigns the result to *this. [object Object] ","testName":"assignmentBySubtraction","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"assignmentBySubtraction","status":"run","time":"0","classname":"VectorN"},"name":"assignmentBySubtraction"},"errorFlag":false},{"type":[{"_":"FORCEINLINE ","ref":[{"_":"VectorN","$":{"refid":"classdrider_s_d_k_1_1_vector_n","kindref":"compound"}}]}],"definition":["FORCEINLINE VectorN driderSDK::VectorN< _elements >::operator-"],"argsstring":["()"],"name":["operator-"],"detaileddescription":[{"para":["TEST::unaryMinus Overload of unary operator -.","Gets the vector with all of its elements negated.",{"simplesect":[{"$":{"kind":"return"},"para":["The vector with negated elements. "]}]}]}],"description":"TEST::unaryMinus Overload of unary operator -. Gets the vector with all of its elements negated. [object Object] ","testName":"unaryMinus","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"unaryMinus","status":"run","time":"0","classname":"VectorN"},"name":"unaryMinus"},"errorFlag":false},{"type":["FORCEINLINE bool"],"definition":["FORCEINLINE bool driderSDK::VectorN< _elements >::operator=="],"argsstring":["(const VectorN &rhs) const"],"name":["operator=="],"detaileddescription":[{"para":["TEST::equality Overload of binary operator ==.","This operator performs a memberwise equality comparison.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["rhs"]}],"parameterdescription":[{"para":["Right operand (a vector with same number of elements)."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":["True if all elements of *this vector are equal to all elements of rhs vector, false otherwise. "]}]}]}],"description":"TEST::equality Overload of binary operator ==. This operator performs a memberwise equality comparison. [object Object] ","testName":"equality","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"equality","status":"run","time":"0","classname":"VectorN"},"name":"equality"},"errorFlag":false},{"type":["FORCEINLINE bool"],"definition":["FORCEINLINE bool driderSDK::VectorN< _elements >::operator!="],"argsstring":["(const VectorN &rhs) const"],"name":["operator!="],"detaileddescription":[{"para":["TEST::inequality Overload of binary operator ==.","This operator performs a memberwise inequality comparison.",{"simplesect":[{"$":{"kind":"return"},"para":["True if an elements of *this vector is unequal to an elements of rhs vector, false otherwise. "]}]}]}],"description":"TEST::inequality Overload of binary operator ==. This operator performs a memberwise inequality comparison. [object Object] ","testName":"inequality","statusTest":"TestCase Encontrado","resultTest":"Prueba Correcta","test":{"data":{"name":"inequality","status":"run","time":"0","classname":"VectorN"},"name":"inequality"},"errorFlag":false}],"testFile":"Nombre del test: VectorN","testClase":{"name":"VectorN","tests":"20","failures":"0","disabled":"0","errors":"0","time":"0.014","testCases":[{"data":{"name":"constructorOneFloat","status":"run","time":"0","classname":"VectorN"},"name":"constructorOneFloat"},{"data":{"name":"elements","status":"run","time":"0","classname":"VectorN"},"name":"elements"},{"data":{"name":"operatorBrakets","status":"run","time":"0","classname":"VectorN"},"name":"operatorBrakets"},{"data":{"name":"dot","status":"run","time":"0","classname":"VectorN"},"name":"dot"},{"data":{"name":"length","status":"run","time":"0","classname":"VectorN"},"name":"length"},{"data":{"name":"lengthSqr","status":"run","time":"0","classname":"VectorN"},"name":"lengthSqr"},{"data":{"name":"normalize","status":"run","time":"0","classname":"VectorN"},"name":"normalize"},{"data":{"name":"ptr","status":"run","time":"0","classname":"VectorN"},"name":"ptr"},{"data":{"name":"assignmentByMultply","status":"run","time":"0","classname":"VectorN"},"name":"assignmentByMultply"},{"data":{"name":"assignmentByDivision","status":"run","time":"0","classname":"VectorN"},"name":"assignmentByDivision"},{"data":{"name":"assignmentByAddition","status":"run","time":"0","classname":"VectorN"},"name":"assignmentByAddition"},{"data":{"name":"assignmentBySubtraction","status":"run","time":"0","classname":"VectorN"},"name":"assignmentBySubtraction"},{"data":{"name":"unaryMinus","status":"run","time":"0","classname":"VectorN"},"name":"unaryMinus"},{"data":{"name":"equality","status":"run","time":"0","classname":"VectorN"},"name":"equality"},{"data":{"name":"inequality","status":"run","time":"0","classname":"VectorN"},"name":"inequality"},{"data":{"name":"multiplyScalarRight","status":"run","time":"0","classname":"VectorN"},"name":"multiplyScalarRight"},{"data":{"name":"multiplyScalarLeft","status":"run","time":"0","classname":"VectorN"},"name":"multiplyScalarLeft"},{"data":{"name":"divisionScalarRight","status":"run","time":"0","classname":"VectorN"},"name":"divisionScalarRight"},{"data":{"name":"additionVector","status":"run","time":"0","classname":"VectorN"},"name":"additionVector"},{"data":{"name":"subtractionVector","status":"run","time":"0","classname":"VectorN"},"name":"subtractionVector"}]}},{"name":"Vertex","functions":[{"type":[""],"definition":["driderSDK::Vertex::Vertex"],"argsstring":["()"],"name":["Vertex"],"detaileddescription":["\n        "],"description":"","testName":"No tiene TEST asignado","statusTest":"Falta TestCase","resultTest":"Pendiente"}],"testFile":"No existe Test con el nombre de la clase"}]